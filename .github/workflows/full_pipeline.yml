name: üè≠ Full Pipeline: From Raw Code to Production

on:
  push:
    branches: [main, master]
  workflow_dispatch:
    inputs:
      skip_tests:
        description: '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤)'
        required: false
        default: 'false'
        type: boolean

env:
  PYTHON_VERSION: '3.10'
  REPO_NAME: 'main-repo'
  ARTIFACT_NAME: 'processed-code-${{ github.run_id }}'
  DOCKER_USERNAME: ${{ vars.DOCKER_USERNAME || 'ghcr.io' }}

permissions:
  contents: write
  actions: write
  checks: write
  deployments: write
  packages: write
  pages: write
  id-token: write

jobs:
  setup:
    name: üèóÔ∏è –ù–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
    runs-on: ubuntu-latest
    outputs:
      project_name: ${{ steps.setup.outputs.repo_name }}
      core_modules: ${{ steps.setup.outputs.modules }}
    steps:
      - name: üîç –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π (GSM2017PMK-OSV/main-repo)
        uses: actions/checkout@v4
        with:
          repository: GSM2017PMK-OSV/main-repo
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: üêç –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: üìÇ –°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞
        id: setup
        run: |
          # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
          mkdir -p {core,config,data,docs,tests,diagrams,.github}
          echo "main_repo" > core_modules.txt
          echo "modules=$(cat core_modules.txt)" >> $GITHUB_OUTPUT
          echo "repo_name=${{ env.REPO_NAME }}" >> $GITHUB_OUTPUT

          # –§–∏–∫—Å–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add .
          git commit -m "Initialize project structure" || echo "No changes to commit"

  process_code:
    name: üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–∞
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          repository: GSM2017PMK-OSV/main-repo
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üßπ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞
        run: |
          # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
          pip install black pylint autopep8

          # –ê–≤—Ç–æ—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ–≥–æ –∫–æ–¥–∞
          black .
          autopep8 --in-place --aggressive --recursive .

          # –§–∏–∫—Å–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
          git add .
          git commit -m "Auto-formatted code" || echo "No changes to commit"

  build_docs:
    name: üìö –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    needs: process_code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          repository: GSM2017PMK-OSV/main-repo
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è API docs
        run: |
          pip install pdoc
          mkdir -p docs/api
          pdoc --html -o docs/api core/

      - name: üèóÔ∏è –°–±–æ—Ä–∫–∞ MkDocs
        run: |
          pip install mkdocs mkdocs-material
          mkdocs build --site-dir public

      - name: üöÄ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public

  test:
    name: üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    needs: build_docs
    if: ${{ !inputs.skip_tests }}
    strategy:
      matrix:
        python: ['3.9', '3.10']
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          repository: GSM2017PMK-OSV/main-repo
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üêç –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Python ${{ matrix.python }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}

      - name: üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
        run: |
          pip install pytest pytest-cov
          pytest tests/ --cov=./ --cov-report=xml

      - name: üìä –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏
        uses: codecov/codecov-action@v3

  deploy:
    name: üöÄ –ü—Ä–æ–¥–∞–∫—à–Ω-–¥–µ–ø–ª–æ–π
    needs: test
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4
        with:
          repository: GSM2017PMK-OSV/main-repo
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üè∑Ô∏è –°–æ–∑–¥–∞—Ç—å —Ä–µ–ª–∏–∑
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: v1.0.${{ github.run_number }}
          release_name: Production Release ${{ github.run_number }}
          draft: false
          prerelease: false

      - name: üîê –û–±–Ω–æ–≤–∏—Ç—å –≥–ª–∞–≤–Ω—É—é –≤–µ—Ç–∫—É
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/GSM2017PMK-OSV/main-repo.git
          git pull origin main
          git push origin HEAD:main --force-with-lease

  notify:
    name: üì¢ –§–∏–Ω–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    needs: deploy
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Slack-–æ–ø–æ–≤–µ—â–µ–Ω–∏–µ
        uses: slackapi/slack-github-action@v2
        with:
          payload: |
            {
              "text": "üöÄ ${{ github.workflow }} –∑–∞–≤–µ—Ä—à–µ–Ω",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*${{ github.workflow }}* –¥–ª—è *GSM2017PMK-OSV/main-repo*\n*–°—Ç–∞—Ç—É—Å*: ${{ job.status }}\n*–í–µ—Ä—Å–∏—è*: v1.0.${{ github.run_number }}\n*–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è*: https://gsm2017pmk-osv.github.io/main-repo/"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
